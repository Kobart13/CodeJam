### YamlMime:ManagedReference
items:
- uid: CodeJam.Ranges.Range`2
  commentId: T:CodeJam.Ranges.Range`2
  id: Range`2
  parent: CodeJam.Ranges
  children:
  - CodeJam.Ranges.Range`2.#ctor(`0,`0,`1)
  - CodeJam.Ranges.Range`2.#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0},`1)
  - CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.Range`2.Empty
  - CodeJam.Ranges.Range`2.Equals(CodeJam.Ranges.Range{`0,`1})
  - CodeJam.Ranges.Range`2.Equals(System.Object)
  - CodeJam.Ranges.Range`2.From
  - CodeJam.Ranges.Range`2.FromValue
  - CodeJam.Ranges.Range`2.GetHashCode
  - CodeJam.Ranges.Range`2.Infinite
  - CodeJam.Ranges.Range`2.IsEmpty
  - CodeJam.Ranges.Range`2.IsInfinite
  - CodeJam.Ranges.Range`2.IsNotEmpty
  - CodeJam.Ranges.Range`2.IsSinglePoint
  - CodeJam.Ranges.Range`2.Key
  - CodeJam.Ranges.Range`2.op_Equality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  - CodeJam.Ranges.Range`2.op_Inequality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  - CodeJam.Ranges.Range`2.To
  - CodeJam.Ranges.Range`2.ToString
  - CodeJam.Ranges.Range`2.ToString(System.IFormatProvider)
  - CodeJam.Ranges.Range`2.ToString(System.String)
  - CodeJam.Ranges.Range`2.ToString(System.String,System.IFormatProvider)
  - CodeJam.Ranges.Range`2.ToValue
  langs:
  - csharp
  - vb
  name: Range<T, TKey>
  nameWithType: Range<T, TKey>
  fullName: CodeJam.Ranges.Range<T, TKey>
  type: Struct
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Range
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 16
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Describes a range of the values with a key attached.
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct Range<T, TKey> : IRangeFactory<T, Range<T, TKey>>, IRange<T>, IEquatable<Range<T, TKey>>, IFormattable
    typeParameters:
    - id: T
      description: "\nThe type of the value. Should implement <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: TKey
      description: The type of the range key
    content.vb: >-
      <Serializable>

      Public Structure Range(Of T, TKey)
          Implements IRangeFactory(Of T, Range(Of T, TKey)), IRange(Of T), IEquatable(Of Range(Of T, TKey)), IFormattable
  implements:
  - CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}
  - CodeJam.Ranges.IRange{{T}}
  - System.IEquatable{CodeJam.Ranges.Range`2}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - CodeJam.Ranges.Range`2.CodeJam.NullableHelper.AsNullable``1
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{{T},{T2}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{{T},{T2}},System.Func{{T},{T2}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithoutKey``2
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.MakeInclusive``2(System.Func{{T},{T}},System.Func{{T},{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.MakeExclusive``2(System.Func{{T},{T}},System.Func{{T},{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithKey``3({TKey2})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2({T},{T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.HasIntersection``2({T},{T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.HasIntersection``3({TRange})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Clamp``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Union``2({T},{T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Union``3({TRange})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendFrom``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendTo``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Intersect``2({T},{T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Intersect``3({TRange})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimFrom``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimTo``2({T})
  - CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.Range`2.CodeJam.Strings.StringExtensions.ToInvariantString``1
  - CodeJam.Ranges.Range`2.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: Range(Of T, TKey)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey)
  name.vb: Range(Of T, TKey)
- uid: CodeJam.Ranges.Range`2.op_Equality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  commentId: M:CodeJam.Ranges.Range`2.op_Equality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  id: op_Equality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Equality(Range<T, TKey>, Range<T, TKey>)
  nameWithType: Range<T, TKey>.Equality(Range<T, TKey>, Range<T, TKey>)
  fullName: CodeJam.Ranges.Range<T, TKey>.Equality(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.Range<T, TKey>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Equality
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 41
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator ==.
  example: []
  syntax:
    content: public static bool operator ==(Range<T, TKey> range1, Range<T, TKey> range2)
    parameters:
    - id: range1
      type: CodeJam.Ranges.Range`2
      description: The range1.
    - id: range2
      type: CodeJam.Ranges.Range`2
      description: The range2.
    return:
      type: System.Boolean
      description: <code>True</code>, if ranges are equal.
    content.vb: Public Shared Operator =(range1 As Range(Of T, TKey), range2 As Range(Of T, TKey)) As Boolean
  overload: CodeJam.Ranges.Range`2.op_Equality*
  nameWithType.vb: Range(Of T, TKey).Equality(Range(Of T, TKey), Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Equality(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Equality(Range(Of T, TKey), Range(Of T, TKey))
- uid: CodeJam.Ranges.Range`2.op_Inequality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  commentId: M:CodeJam.Ranges.Range`2.op_Inequality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  id: op_Inequality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Inequality(Range<T, TKey>, Range<T, TKey>)
  nameWithType: Range<T, TKey>.Inequality(Range<T, TKey>, Range<T, TKey>)
  fullName: CodeJam.Ranges.Range<T, TKey>.Inequality(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.Range<T, TKey>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Inequality
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 49
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator !=.
  example: []
  syntax:
    content: public static bool operator !=(Range<T, TKey> range1, Range<T, TKey> range2)
    parameters:
    - id: range1
      type: CodeJam.Ranges.Range`2
      description: The range1.
    - id: range2
      type: CodeJam.Ranges.Range`2
      description: The range2.
    return:
      type: System.Boolean
      description: <code>True</code>, if ranges are not equal.
    content.vb: Public Shared Operator <>(range1 As Range(Of T, TKey), range2 As Range(Of T, TKey)) As Boolean
  overload: CodeJam.Ranges.Range`2.op_Inequality*
  nameWithType.vb: Range(Of T, TKey).Inequality(Range(Of T, TKey), Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Inequality(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Inequality(Range(Of T, TKey), Range(Of T, TKey))
- uid: CodeJam.Ranges.Range`2.#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0},`1)
  commentId: M:CodeJam.Ranges.Range`2.#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0},`1)
  id: '#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0},`1)'
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Range(RangeBoundaryFrom<T>, RangeBoundaryTo<T>, TKey)
  nameWithType: Range<T, TKey>.Range(RangeBoundaryFrom<T>, RangeBoundaryTo<T>, TKey)
  fullName: CodeJam.Ranges.Range<T, TKey>.Range(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>, TKey)
  type: Constructor
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 66
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates instance of <xref href="CodeJam.Ranges.Range%601" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public Range(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to, TKey key)
    parameters:
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: Boundary From.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: Boundary To.
    - id: key
      type: '{TKey}'
      description: The value of the range key.
    content.vb: Public Sub New(from As RangeBoundaryFrom(Of T), to As RangeBoundaryTo(Of T), key As TKey)
  overload: CodeJam.Ranges.Range`2.#ctor*
  nameWithType.vb: Range(Of T, TKey).Range(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T), TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Range(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T), TKey)
  name.vb: Range(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T), TKey)
- uid: CodeJam.Ranges.Range`2.#ctor(`0,`0,`1)
  commentId: M:CodeJam.Ranges.Range`2.#ctor(`0,`0,`1)
  id: '#ctor(`0,`0,`1)'
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Range(T, T, TKey)
  nameWithType: Range<T, TKey>.Range(T, T, TKey)
  fullName: CodeJam.Ranges.Range<T, TKey>.Range(T, T, TKey)
  type: Constructor
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 96
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates instance of <xref href="CodeJam.Ranges.Range%601" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public Range(T from, T to, TKey key)
    parameters:
    - id: from
      type: '{T}'
      description: Boundary From.
    - id: to
      type: '{T}'
      description: Boundary To.
    - id: key
      type: '{TKey}'
      description: The value of the range key.
    content.vb: Public Sub New(from As T, to As T, key As TKey)
  overload: CodeJam.Ranges.Range`2.#ctor*
  nameWithType.vb: Range(Of T, TKey).Range(T, T, TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Range(T, T, TKey)
- uid: CodeJam.Ranges.Range`2.From
  commentId: P:CodeJam.Ranges.Range`2.From
  id: From
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: From
  nameWithType: Range<T, TKey>.From
  fullName: CodeJam.Ranges.Range<T, TKey>.From
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: From
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 123
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Boundary From. Limits the values from the left.
  example: []
  syntax:
    content: public RangeBoundaryFrom<T> From { get; }
    parameters: []
    return:
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: Boundary From.
    content.vb: Public ReadOnly Property From As RangeBoundaryFrom(Of T)
  overload: CodeJam.Ranges.Range`2.From*
  implements:
  - CodeJam.Ranges.IRange{{T}}.From
  nameWithType.vb: Range(Of T, TKey).From
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).From
- uid: CodeJam.Ranges.Range`2.To
  commentId: P:CodeJam.Ranges.Range`2.To
  id: To
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: To
  nameWithType: Range<T, TKey>.To
  fullName: CodeJam.Ranges.Range<T, TKey>.To
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: To
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 127
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Boundary To. Limits the values from the right.
  example: []
  syntax:
    content: public RangeBoundaryTo<T> To { get; }
    parameters: []
    return:
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: Boundary To.
    content.vb: Public ReadOnly Property To As RangeBoundaryTo(Of T)
  overload: CodeJam.Ranges.Range`2.To*
  implements:
  - CodeJam.Ranges.IRange{{T}}.To
  nameWithType.vb: Range(Of T, TKey).To
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).To
- uid: CodeJam.Ranges.Range`2.FromValue
  commentId: P:CodeJam.Ranges.Range`2.FromValue
  id: FromValue
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: FromValue
  nameWithType: Range<T, TKey>.FromValue
  fullName: CodeJam.Ranges.Range<T, TKey>.FromValue
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FromValue
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 132
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The value of Boundary From.
  example: []
  syntax:
    content: public T FromValue { get; }
    parameters: []
    return:
      type: '{T}'
      description: The value of Boundary From or InvalidOperationException, if From.HasValue is <code>false</code>.
    content.vb: Public ReadOnly Property FromValue As T
  overload: CodeJam.Ranges.Range`2.FromValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if From.HasValue is <code>false</code>.
  nameWithType.vb: Range(Of T, TKey).FromValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).FromValue
- uid: CodeJam.Ranges.Range`2.ToValue
  commentId: P:CodeJam.Ranges.Range`2.ToValue
  id: ToValue
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: ToValue
  nameWithType: Range<T, TKey>.ToValue
  fullName: CodeJam.Ranges.Range<T, TKey>.ToValue
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToValue
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 137
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The value of Boundary To.
  example: []
  syntax:
    content: public T ToValue { get; }
    parameters: []
    return:
      type: '{T}'
      description: The value of Boundary To or InvalidOperationException, if To.HasValue is <code>false</code>.
    content.vb: Public ReadOnly Property ToValue As T
  overload: CodeJam.Ranges.Range`2.ToValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if To.HasValue is <code>false</code>.
  nameWithType.vb: Range(Of T, TKey).ToValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).ToValue
- uid: CodeJam.Ranges.Range`2.IsEmpty
  commentId: P:CodeJam.Ranges.Range`2.IsEmpty
  id: IsEmpty
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Range<T, TKey>.IsEmpty
  fullName: CodeJam.Ranges.Range<T, TKey>.IsEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsEmpty
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 141
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The range is empty, ∅.
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the range is empty; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: CodeJam.Ranges.Range`2.IsEmpty*
  implements:
  - CodeJam.Ranges.IRange{{T}}.IsEmpty
  nameWithType.vb: Range(Of T, TKey).IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsEmpty
- uid: CodeJam.Ranges.Range`2.IsNotEmpty
  commentId: P:CodeJam.Ranges.Range`2.IsNotEmpty
  id: IsNotEmpty
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: IsNotEmpty
  nameWithType: Range<T, TKey>.IsNotEmpty
  fullName: CodeJam.Ranges.Range<T, TKey>.IsNotEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNotEmpty
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 145
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The range is NOT empty, ≠ ∅.
  example: []
  syntax:
    content: public bool IsNotEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the range is not empty; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsNotEmpty As Boolean
  overload: CodeJam.Ranges.Range`2.IsNotEmpty*
  implements:
  - CodeJam.Ranges.IRange{{T}}.IsNotEmpty
  nameWithType.vb: Range(Of T, TKey).IsNotEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsNotEmpty
- uid: CodeJam.Ranges.Range`2.IsSinglePoint
  commentId: P:CodeJam.Ranges.Range`2.IsSinglePoint
  id: IsSinglePoint
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: IsSinglePoint
  nameWithType: Range<T, TKey>.IsSinglePoint
  fullName: CodeJam.Ranges.Range<T, TKey>.IsSinglePoint
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSinglePoint
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 151
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nThe range is Zero length range (the values of the boundary From and the boundary To are the same).\n"
  example: []
  syntax:
    content: public bool IsSinglePoint { get; }
    parameters: []
    return:
      type: System.Boolean
      description: '<code>true</code> if the range is single point range; otherwise, <code>false</code>. '
    content.vb: Public ReadOnly Property IsSinglePoint As Boolean
  overload: CodeJam.Ranges.Range`2.IsSinglePoint*
  nameWithType.vb: Range(Of T, TKey).IsSinglePoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsSinglePoint
- uid: CodeJam.Ranges.Range`2.IsInfinite
  commentId: P:CodeJam.Ranges.Range`2.IsInfinite
  id: IsInfinite
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: IsInfinite
  nameWithType: Range<T, TKey>.IsInfinite
  fullName: CodeJam.Ranges.Range<T, TKey>.IsInfinite
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsInfinite
    path: ../Main/src/Ranges/[Ranges]/Range`2.generated.cs
    startLine: 155
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The range is Infinite range (-∞..+∞).
  example: []
  syntax:
    content: public bool IsInfinite { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the range is infinite; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsInfinite As Boolean
  overload: CodeJam.Ranges.Range`2.IsInfinite*
  nameWithType.vb: Range(Of T, TKey).IsInfinite
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsInfinite
- uid: CodeJam.Ranges.Range`2.Empty
  commentId: F:CodeJam.Ranges.Range`2.Empty
  id: Empty
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Range<T, TKey>.Empty
  fullName: CodeJam.Ranges.Range<T, TKey>.Empty
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Empty
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 24
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Empty range, ∅
  example: []
  syntax:
    content: public static readonly Range<T, TKey> Empty
    return:
      type: CodeJam.Ranges.Range`2
    content.vb: Public Shared ReadOnly Empty As Range(Of T, TKey)
  nameWithType.vb: Range(Of T, TKey).Empty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Empty
- uid: CodeJam.Ranges.Range`2.Infinite
  commentId: F:CodeJam.Ranges.Range`2.Infinite
  id: Infinite
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Infinite
  nameWithType: Range<T, TKey>.Infinite
  fullName: CodeJam.Ranges.Range<T, TKey>.Infinite
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Infinite
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 27
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Infinite range, (-∞..+∞)
  example: []
  syntax:
    content: public static readonly Range<T, TKey> Infinite
    return:
      type: CodeJam.Ranges.Range`2
    content.vb: Public Shared ReadOnly Infinite As Range(Of T, TKey)
  nameWithType.vb: Range(Of T, TKey).Infinite
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Infinite
- uid: CodeJam.Ranges.Range`2.Key
  commentId: P:CodeJam.Ranges.Range`2.Key
  id: Key
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: Range<T, TKey>.Key
  fullName: CodeJam.Ranges.Range<T, TKey>.Key
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Key
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 36
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The value associated with the range.
  example: []
  syntax:
    content: public TKey Key { get; }
    parameters: []
    return:
      type: '{TKey}'
      description: The value of the range key.
    content.vb: Public ReadOnly Property Key As TKey
  overload: CodeJam.Ranges.Range`2.Key*
  nameWithType.vb: Range(Of T, TKey).Key
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Key
- uid: CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  id: CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  isEii: true
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: IRangeFactory<T, Range<T, TKey>>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: Range<T, TKey>.IRangeFactory<T, Range<T, TKey>>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.Range<T, TKey>.CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.CreateRange(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 43
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new instance of the range.
  example: []
  syntax:
    content: Range<T, TKey> IRangeFactory<T, Range<T, TKey>>.CreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to)
    parameters:
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: Boundary From.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: Boundary To.
    return:
      type: CodeJam.Ranges.Range`2
      description: A new instance of the range with specified From-To boundaries.
    content.vb: Function CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange(from As RangeBoundaryFrom(Of T), to As RangeBoundaryTo(Of T)) As Range(Of T, TKey) Implements IRangeFactory(Of T, Range(Of T, TKey)).CreateRange
  overload: CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange*
  implements:
  - CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{{T}},CodeJam.Ranges.RangeBoundaryTo{{T}})
  nameWithType.vb: Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  id: CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  isEii: true
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: IRangeFactory<T, Range<T, TKey>>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: Range<T, TKey>.IRangeFactory<T, Range<T, TKey>>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.Range<T, TKey>.CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 54
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new instance of the range, if possible.
  example: []
  syntax:
    content: Range<T, TKey> IRangeFactory<T, Range<T, TKey>>.TryCreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to)
    parameters:
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: Boundary From.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: Boundary To.
    return:
      type: CodeJam.Ranges.Range`2
      description: "\nA new instance of the range with specified From-To boundaries,\nor empty range, if from-to boundaries forms invalid range pair.\n"
    content.vb: Function CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange(from As RangeBoundaryFrom(Of T), to As RangeBoundaryTo(Of T)) As Range(Of T, TKey) Implements IRangeFactory(Of T, Range(Of T, TKey)).TryCreateRange
  overload: CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange*
  implements:
  - CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{{T}},CodeJam.Ranges.RangeBoundaryTo{{T}})
  nameWithType.vb: Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.Range`2.Equals(CodeJam.Ranges.Range{`0,`1})
  commentId: M:CodeJam.Ranges.Range`2.Equals(CodeJam.Ranges.Range{`0,`1})
  id: Equals(CodeJam.Ranges.Range{`0,`1})
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Equals(Range<T, TKey>)
  nameWithType: Range<T, TKey>.Equals(Range<T, TKey>)
  fullName: CodeJam.Ranges.Range<T, TKey>.Equals(CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 66
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Indicates whether the current range is equal to another.
  example: []
  syntax:
    content: public bool Equals(Range<T, TKey> other)
    parameters:
    - id: other
      type: CodeJam.Ranges.Range`2
      description: An range to compare with this.
    return:
      type: System.Boolean
      description: "\n<code>True</code> if the current range is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter;\notherwise, false.\n"
    content.vb: Public Function Equals(other As Range(Of T, TKey)) As Boolean
  overload: CodeJam.Ranges.Range`2.Equals*
  implements:
  - System.IEquatable{CodeJam.Ranges.Range`2}.Equals(CodeJam.Ranges.Range{{T},{TKey}})
  nameWithType.vb: Range(Of T, TKey).Equals(Range(Of T, TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Equals(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Equals(Range(Of T, TKey))
- uid: CodeJam.Ranges.Range`2.Equals(System.Object)
  commentId: M:CodeJam.Ranges.Range`2.Equals(System.Object)
  id: Equals(System.Object)
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Range<T, TKey>.Equals(Object)
  fullName: CodeJam.Ranges.Range<T, TKey>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 77
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Indicates whether the current range and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with this. '
    return:
      type: System.Boolean
      description: "\n<code>True</code> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and the current range are the same type\nand represent the same value; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: CodeJam.Ranges.Range`2.Equals*
  nameWithType.vb: Range(Of T, TKey).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Equals(System.Object)
- uid: CodeJam.Ranges.Range`2.GetHashCode
  commentId: M:CodeJam.Ranges.Range`2.GetHashCode
  id: GetHashCode
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Range<T, TKey>.GetHashCode()
  fullName: CodeJam.Ranges.Range<T, TKey>.GetHashCode()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 83
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a hash code for the current range.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: CodeJam.Ranges.Range`2.GetHashCode*
  nameWithType.vb: Range(Of T, TKey).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).GetHashCode()
- uid: CodeJam.Ranges.Range`2.ToString
  commentId: M:CodeJam.Ranges.Range`2.ToString
  id: ToString
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Range<T, TKey>.ToString()
  fullName: CodeJam.Ranges.Range<T, TKey>.ToString()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 95
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns string representation of the range.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: CodeJam.Ranges.Range`2.ToString*
  nameWithType.vb: Range(Of T, TKey).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).ToString()
- uid: CodeJam.Ranges.Range`2.ToString(System.String)
  commentId: M:CodeJam.Ranges.Range`2.ToString(System.String)
  id: ToString(System.String)
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: ToString(String)
  nameWithType: Range<T, TKey>.ToString(String)
  fullName: CodeJam.Ranges.Range<T, TKey>.ToString(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 106
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(string format)
    parameters:
    - id: format
      type: System.String
      description: The format string.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(format As String) As String
  overload: CodeJam.Ranges.Range`2.ToString*
  nameWithType.vb: Range(Of T, TKey).ToString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).ToString(System.String)
- uid: CodeJam.Ranges.Range`2.ToString(System.IFormatProvider)
  commentId: M:CodeJam.Ranges.Range`2.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: Range<T, TKey>.ToString(IFormatProvider)
  fullName: CodeJam.Ranges.Range<T, TKey>.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 115
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(IFormatProvider formatProvider)
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(formatProvider As IFormatProvider) As String
  overload: CodeJam.Ranges.Range`2.ToString*
  nameWithType.vb: Range(Of T, TKey).ToString(IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).ToString(System.IFormatProvider)
- uid: CodeJam.Ranges.Range`2.ToString(System.String,System.IFormatProvider)
  commentId: M:CodeJam.Ranges.Range`2.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: CodeJam.Ranges.Range`2
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: Range<T, TKey>.ToString(String, IFormatProvider)
  fullName: CodeJam.Ranges.Range<T, TKey>.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/Range`2.NonGenerated.cs
    startLine: 125
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
      description: The format string.
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: CodeJam.Ranges.Range`2.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: Range(Of T, TKey).ToString(String, IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).ToString(System.String, System.IFormatProvider)
references:
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}
  commentId: T:CodeJam.Ranges.IRangeFactory{`0,CodeJam.Ranges.Range`2}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.IRangeFactory`2
  name: IRangeFactory<T, Range<T, TKey>>
  nameWithType: IRangeFactory<T, Range<T, TKey>>
  fullName: CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>
  nameWithType.vb: IRangeFactory(Of T, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.IRangeFactory(Of T, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: IRangeFactory(Of T, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.IRangeFactory`2
    name: IRangeFactory
    nameWithType: IRangeFactory
    fullName: CodeJam.Ranges.IRangeFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.IRangeFactory`2
    name: IRangeFactory
    nameWithType: IRangeFactory
    fullName: CodeJam.Ranges.IRangeFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.IRange{{T}}
  commentId: T:CodeJam.Ranges.IRange{`0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.IRange`1
  name: IRange<T>
  nameWithType: IRange<T>
  fullName: CodeJam.Ranges.IRange<T>
  nameWithType.vb: IRange(Of T)
  fullName.vb: CodeJam.Ranges.IRange(Of T)
  name.vb: IRange(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.IRange`1
    name: IRange
    nameWithType: IRange
    fullName: CodeJam.Ranges.IRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.IRange`1
    name: IRange
    nameWithType: IRange
    fullName: CodeJam.Ranges.IRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{CodeJam.Ranges.Range`2}
  commentId: T:System.IEquatable{CodeJam.Ranges.Range`2}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Range<T, TKey>>
  nameWithType: IEquatable<Range<T, TKey>>
  fullName: System.IEquatable<CodeJam.Ranges.Range<T, TKey>>
  nameWithType.vb: IEquatable(Of Range(Of T, TKey))
  fullName.vb: System.IEquatable(Of CodeJam.Ranges.Range(Of T, TKey))
  name.vb: IEquatable(Of Range(Of T, TKey))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.NullableHelper.AsNullable``1
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  parent: CodeJam.NullableHelper
  definition: CodeJam.NullableHelper.AsNullable``1(``0)
  name: AsNullable<Range<T, TKey>>()
  nameWithType: NullableHelper.AsNullable<Range<T, TKey>>()
  fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.Range<T, TKey>>()
  nameWithType.vb: NullableHelper.AsNullable(Of Range(Of T, TKey))()
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.Range(Of T, TKey))()
  name.vb: AsNullable(Of Range(Of T, TKey))()
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable<Range<T, TKey>>
    nameWithType: NullableHelper.AsNullable<Range<T, TKey>>
    fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable(Of Range(Of T, TKey))
    nameWithType: NullableHelper.AsNullable(Of Range(Of T, TKey))
    fullName: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  name: GetComplementation<T, TKey>()
  nameWithType: CompositeRangeExtensions.GetComplementation<T, TKey>()
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T, TKey>()
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T, TKey)()
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T, TKey)()
  name.vb: GetComplementation(Of T, TKey)()
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2
    name: GetComplementation<T, TKey>
    nameWithType: CompositeRangeExtensions.GetComplementation<T, TKey>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2
    name: GetComplementation(Of T, TKey)
    nameWithType: CompositeRangeExtensions.GetComplementation(Of T, TKey)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  name: ToCompositeRange<T, TKey>()
  nameWithType: CompositeRangeExtensions.ToCompositeRange<T, TKey>()
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T, TKey>()
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of T, TKey)()
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T, TKey)()
  name.vb: ToCompositeRange(Of T, TKey)()
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2
    name: ToCompositeRange<T, TKey>
    nameWithType: CompositeRangeExtensions.ToCompositeRange<T, TKey>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2
    name: ToCompositeRange(Of T, TKey)
    nameWithType: CompositeRangeExtensions.ToCompositeRange(Of T, TKey)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{{T},{T2}})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  name: WithValues<T, T2, TKey>(Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2, TKey>(Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>(System.Func<T, T2>)
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2, TKey)(Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)(System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2, TKey)(Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{``0,``1})
    name: WithValues<T, T2, TKey>
    nameWithType: RangeExtensions.WithValues<T, T2, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{``0,``1})
    name: WithValues(Of T, T2, TKey)
    nameWithType: RangeExtensions.WithValues(Of T, T2, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{{T},{T2}},System.Func{{T},{T2}})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  name: WithValues<T, T2, TKey>(Func<T, T2>, Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2, TKey>(Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>(System.Func<T, T2>, System.Func<T, T2>)
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2, TKey)(Func(Of T, T2), Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)(System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2, TKey)(Func(Of T, T2), Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues<T, T2, TKey>
    nameWithType: RangeExtensions.WithValues<T, T2, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues(Of T, T2, TKey)
    nameWithType: RangeExtensions.WithValues(Of T, T2, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithoutKey``2
  commentId: M:CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  name: WithoutKey<T, TKey>()
  nameWithType: RangeExtensions.WithoutKey<T, TKey>()
  fullName: CodeJam.Ranges.RangeExtensions.WithoutKey<T, TKey>()
  nameWithType.vb: RangeExtensions.WithoutKey(Of T, TKey)()
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithoutKey(Of T, TKey)()
  name.vb: WithoutKey(Of T, TKey)()
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithoutKey``2
    name: WithoutKey<T, TKey>
    nameWithType: RangeExtensions.WithoutKey<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.WithoutKey<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithoutKey``2
    name: WithoutKey(Of T, TKey)
    nameWithType: RangeExtensions.WithoutKey(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.WithoutKey(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, Range<T, TKey>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, Range<T, TKey>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.Range<T, TKey>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, Range(Of T, TKey))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.Range(Of T, TKey))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, Range(Of T, TKey))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, Range<T, TKey>>
    nameWithType: RangeExtensions.Contains<T, Range<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, Range(Of T, TKey))
    nameWithType: RangeExtensions.Contains(Of T, Range(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, Range<T, TKey>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, Range<T, TKey>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.Range<T, TKey>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, Range(Of T, TKey))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.Range(Of T, TKey))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, Range(Of T, TKey))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, Range<T, TKey>>
    nameWithType: RangeExtensions.StartsAfter<T, Range<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, Range(Of T, TKey))
    nameWithType: RangeExtensions.StartsAfter(Of T, Range(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, Range<T, TKey>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, Range<T, TKey>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.Range<T, TKey>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, Range(Of T, TKey))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.Range(Of T, TKey))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, Range(Of T, TKey))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, Range<T, TKey>>
    nameWithType: RangeExtensions.EndsBefore<T, Range<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, Range(Of T, TKey))
    nameWithType: RangeExtensions.EndsBefore(Of T, Range(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.MakeInclusive``2(System.Func{{T},{T}},System.Func{{T},{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  name: MakeInclusive<T, TKey>(Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeInclusive<T, TKey>(Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive<T, TKey>(System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: RangeExtensions.MakeInclusive(Of T, TKey)(Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeInclusive(Of T, TKey)(System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T, TKey)(Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.MakeInclusive``2(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive<T, TKey>
    nameWithType: RangeExtensions.MakeInclusive<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.MakeInclusive``2(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive(Of T, TKey)
    nameWithType: RangeExtensions.MakeInclusive(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.MakeExclusive``2(System.Func{{T},{T}},System.Func{{T},{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  name: MakeExclusive<T, TKey>(Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeExclusive<T, TKey>(Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive<T, TKey>(System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: RangeExtensions.MakeExclusive(Of T, TKey)(Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeExclusive(Of T, TKey)(System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T, TKey)(Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.MakeExclusive``2(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive<T, TKey>
    nameWithType: RangeExtensions.MakeExclusive<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.MakeExclusive``2(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive(Of T, TKey)
    nameWithType: RangeExtensions.MakeExclusive(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.WithKey``3({TKey2})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  name: WithKey<T, TKey, TKey2>(TKey2)
  nameWithType: RangeExtensions.WithKey<T, TKey, TKey2>(TKey2)
  fullName: CodeJam.Ranges.RangeExtensions.WithKey<T, TKey, TKey2>(TKey2)
  nameWithType.vb: RangeExtensions.WithKey(Of T, TKey, TKey2)(TKey2)
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithKey(Of T, TKey, TKey2)(TKey2)
  name.vb: WithKey(Of T, TKey, TKey2)(TKey2)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithKey``3(``2)
    name: WithKey<T, TKey, TKey2>
    nameWithType: RangeExtensions.WithKey<T, TKey, TKey2>
    fullName: CodeJam.Ranges.RangeExtensions.WithKey<T, TKey, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithKey``3(``2)
    name: WithKey(Of T, TKey, TKey2)
    nameWithType: RangeExtensions.WithKey(Of T, TKey, TKey2)
    fullName: CodeJam.Ranges.RangeExtensions.WithKey(Of T, TKey, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: Contains<T, TKey>(T)
  nameWithType: RangeExtensions.Contains<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(T)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(T)
  name.vb: Contains(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``0)
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``0)
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: Contains<T, TKey>(RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.Contains<T, TKey>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T, TKey)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: Contains<T, TKey>(RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.Contains<T, TKey>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T, TKey)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``2({T},{T})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  name: Contains<T, TKey>(T, T)
  nameWithType: RangeExtensions.Contains<T, TKey>(T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(T, T)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(T, T)
  name.vb: Contains(Of T, TKey)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``0,``0)
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``0,``0)
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, Range<T, TKey>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, Range<T, TKey>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.Range<T, TKey>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, Range(Of T, TKey))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.Range(Of T, TKey))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, Range(Of T, TKey))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, Range<T, TKey>>
    nameWithType: RangeExtensions.Contains<T, TKey, Range<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, Range(Of T, TKey))
    nameWithType: RangeExtensions.Contains(Of T, TKey, Range(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.HasIntersection``2({T},{T})
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  name: HasIntersection<T, TKey>(T, T)
  nameWithType: RangeExtensions.HasIntersection<T, TKey>(T, T)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey>(T, T)
  nameWithType.vb: RangeExtensions.HasIntersection(Of T, TKey)(T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey)(T, T)
  name.vb: HasIntersection(Of T, TKey)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``2(``0,``0)
    name: HasIntersection<T, TKey>
    nameWithType: RangeExtensions.HasIntersection<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``2(``0,``0)
    name: HasIntersection(Of T, TKey)
    nameWithType: RangeExtensions.HasIntersection(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.HasIntersection``3({TRange})
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  name: HasIntersection<T, TKey, TRange>(TRange)
  nameWithType: RangeExtensions.HasIntersection<T, TKey, TRange>(TRange)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey, TRange>(TRange)
  nameWithType.vb: RangeExtensions.HasIntersection(Of T, TKey, TRange)(TRange)
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey, TRange)(TRange)
  name.vb: HasIntersection(Of T, TKey, TRange)(TRange)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``3(``2)
    name: HasIntersection<T, TKey, TRange>
    nameWithType: RangeExtensions.HasIntersection<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``3(``2)
    name: HasIntersection(Of T, TKey, TRange)
    nameWithType: RangeExtensions.HasIntersection(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Clamp``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: Clamp<T, TKey>(T)
  nameWithType: RangeExtensions.Clamp<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.Clamp<T, TKey>(T)
  nameWithType.vb: RangeExtensions.Clamp(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Clamp(Of T, TKey)(T)
  name.vb: Clamp(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Clamp``2(``0)
    name: Clamp<T, TKey>
    nameWithType: RangeExtensions.Clamp<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Clamp<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Clamp``2(``0)
    name: Clamp(Of T, TKey)
    nameWithType: RangeExtensions.Clamp(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Clamp(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: StartsAfter<T, TKey>(T)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(T)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(T)
  name.vb: StartsAfter(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``0)
    name: StartsAfter<T, TKey>
    nameWithType: RangeExtensions.StartsAfter<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``0)
    name: StartsAfter(Of T, TKey)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: StartsAfter<T, TKey>(RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: StartsAfter(Of T, TKey)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: StartsAfter<T, TKey>
    nameWithType: RangeExtensions.StartsAfter<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: StartsAfter(Of T, TKey)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: StartsAfter<T, TKey>(RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: StartsAfter(Of T, TKey)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: StartsAfter<T, TKey>
    nameWithType: RangeExtensions.StartsAfter<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: StartsAfter(Of T, TKey)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, Range<T, TKey>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, Range<T, TKey>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.Range<T, TKey>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, Range(Of T, TKey))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.Range(Of T, TKey))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, Range(Of T, TKey))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, Range<T, TKey>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, Range<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, Range(Of T, TKey))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, Range(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: EndsBefore<T, TKey>(T)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(T)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(T)
  name.vb: EndsBefore(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``0)
    name: EndsBefore<T, TKey>
    nameWithType: RangeExtensions.EndsBefore<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``0)
    name: EndsBefore(Of T, TKey)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: EndsBefore<T, TKey>(RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: EndsBefore(Of T, TKey)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: EndsBefore<T, TKey>
    nameWithType: RangeExtensions.EndsBefore<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: EndsBefore(Of T, TKey)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: EndsBefore<T, TKey>(RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: EndsBefore(Of T, TKey)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: EndsBefore<T, TKey>
    nameWithType: RangeExtensions.EndsBefore<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: EndsBefore(Of T, TKey)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, Range<T, TKey>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, Range<T, TKey>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.Range<T, TKey>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, Range(Of T, TKey))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.Range(Of T, TKey))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, Range(Of T, TKey))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, Range<T, TKey>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, Range<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, Range(Of T, TKey))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, Range(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Union``2({T},{T})
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  name: Union<T, TKey>(T, T)
  nameWithType: RangeExtensions.Union<T, TKey>(T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey>(T, T)
  nameWithType.vb: RangeExtensions.Union(Of T, TKey)(T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey)(T, T)
  name.vb: Union(Of T, TKey)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Union``2(``0,``0)
    name: Union<T, TKey>
    nameWithType: RangeExtensions.Union<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Union``2(``0,``0)
    name: Union(Of T, TKey)
    nameWithType: RangeExtensions.Union(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Union``3({TRange})
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  name: Union<T, TKey, TRange>(TRange)
  nameWithType: RangeExtensions.Union<T, TKey, TRange>(TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey, TRange>(TRange)
  nameWithType.vb: RangeExtensions.Union(Of T, TKey, TRange)(TRange)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey, TRange)(TRange)
  name.vb: Union(Of T, TKey, TRange)(TRange)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Union``3(``2)
    name: Union<T, TKey, TRange>
    nameWithType: RangeExtensions.Union<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Union``3(``2)
    name: Union(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Union(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendFrom``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: ExtendFrom<T, TKey>(T)
  nameWithType: RangeExtensions.ExtendFrom<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>(T)
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)(T)
  name.vb: ExtendFrom(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(``0)
    name: ExtendFrom<T, TKey>
    nameWithType: RangeExtensions.ExtendFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(``0)
    name: ExtendFrom(Of T, TKey)
    nameWithType: RangeExtensions.ExtendFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: ExtendFrom<T, TKey>(RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.ExtendFrom<T, TKey>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T, TKey)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T, TKey)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom<T, TKey>
    nameWithType: RangeExtensions.ExtendFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom(Of T, TKey)
    nameWithType: RangeExtensions.ExtendFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendTo``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: ExtendTo<T, TKey>(T)
  nameWithType: RangeExtensions.ExtendTo<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>(T)
  nameWithType.vb: RangeExtensions.ExtendTo(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)(T)
  name.vb: ExtendTo(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(``0)
    name: ExtendTo<T, TKey>
    nameWithType: RangeExtensions.ExtendTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(``0)
    name: ExtendTo(Of T, TKey)
    nameWithType: RangeExtensions.ExtendTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: ExtendTo<T, TKey>(RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.ExtendTo<T, TKey>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.ExtendTo(Of T, TKey)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T, TKey)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo<T, TKey>
    nameWithType: RangeExtensions.ExtendTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo(Of T, TKey)
    nameWithType: RangeExtensions.ExtendTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Intersect``2({T},{T})
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  name: Intersect<T, TKey>(T, T)
  nameWithType: RangeExtensions.Intersect<T, TKey>(T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey>(T, T)
  nameWithType.vb: RangeExtensions.Intersect(Of T, TKey)(T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey)(T, T)
  name.vb: Intersect(Of T, TKey)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``2(``0,``0)
    name: Intersect<T, TKey>
    nameWithType: RangeExtensions.Intersect<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``2(``0,``0)
    name: Intersect(Of T, TKey)
    nameWithType: RangeExtensions.Intersect(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.Intersect``3({TRange})
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  name: Intersect<T, TKey, TRange>(TRange)
  nameWithType: RangeExtensions.Intersect<T, TKey, TRange>(TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey, TRange>(TRange)
  nameWithType.vb: RangeExtensions.Intersect(Of T, TKey, TRange)(TRange)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey, TRange)(TRange)
  name.vb: Intersect(Of T, TKey, TRange)(TRange)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``3(``2)
    name: Intersect<T, TKey, TRange>
    nameWithType: RangeExtensions.Intersect<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``3(``2)
    name: Intersect(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Intersect(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimFrom``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: TrimFrom<T, TKey>(T)
  nameWithType: RangeExtensions.TrimFrom<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>(T)
  nameWithType.vb: RangeExtensions.TrimFrom(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)(T)
  name.vb: TrimFrom(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(``0)
    name: TrimFrom<T, TKey>
    nameWithType: RangeExtensions.TrimFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(``0)
    name: TrimFrom(Of T, TKey)
    nameWithType: RangeExtensions.TrimFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: TrimFrom<T, TKey>(RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.TrimFrom<T, TKey>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.TrimFrom(Of T, TKey)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T, TKey)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom<T, TKey>
    nameWithType: RangeExtensions.TrimFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom(Of T, TKey)
    nameWithType: RangeExtensions.TrimFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimTo``2({T})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  name: TrimTo<T, TKey>(T)
  nameWithType: RangeExtensions.TrimTo<T, TKey>(T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>(T)
  nameWithType.vb: RangeExtensions.TrimTo(Of T, TKey)(T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)(T)
  name.vb: TrimTo(Of T, TKey)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(``0)
    name: TrimTo<T, TKey>
    nameWithType: RangeExtensions.TrimTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(``0)
    name: TrimTo(Of T, TKey)
    nameWithType: RangeExtensions.TrimTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: TrimTo<T, TKey>(RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.TrimTo<T, TKey>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.TrimTo(Of T, TKey)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T, TKey)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo<T, TKey>
    nameWithType: RangeExtensions.TrimTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo(Of T, TKey)
    nameWithType: RangeExtensions.TrimTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Strings.StringExtensions.ToInvariantString``1
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  name: ToInvariantString<Range<T, TKey>>()
  nameWithType: StringExtensions.ToInvariantString<Range<T, TKey>>()
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.Range<T, TKey>>()
  nameWithType.vb: StringExtensions.ToInvariantString(Of Range(Of T, TKey))()
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.Range(Of T, TKey))()
  name.vb: ToInvariantString(Of Range(Of T, TKey))()
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString<Range<T, TKey>>
    nameWithType: StringExtensions.ToInvariantString<Range<T, TKey>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString(Of Range(Of T, TKey))
    nameWithType: StringExtensions.ToInvariantString(Of Range(Of T, TKey))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  name: ToInvariantString<Range<T, TKey>>(String)
  nameWithType: StringExtensions.ToInvariantString<Range<T, TKey>>(String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.Range<T, TKey>>(System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of Range(Of T, TKey))(String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.Range(Of T, TKey))(System.String)
  name.vb: ToInvariantString(Of Range(Of T, TKey))(String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString<Range<T, TKey>>
    nameWithType: StringExtensions.ToInvariantString<Range<T, TKey>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.Range<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString(Of Range(Of T, TKey))
    nameWithType: StringExtensions.ToInvariantString(Of Range(Of T, TKey))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.Range(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Ranges.IRangeFactory`2
  commentId: T:CodeJam.Ranges.IRangeFactory`2
  isExternal: false
  name: IRangeFactory<T, TRange>
  nameWithType: IRangeFactory<T, TRange>
  fullName: CodeJam.Ranges.IRangeFactory<T, TRange>
  nameWithType.vb: IRangeFactory(Of T, TRange)
  fullName.vb: CodeJam.Ranges.IRangeFactory(Of T, TRange)
  name.vb: IRangeFactory(Of T, TRange)
  spec.csharp:
  - uid: CodeJam.Ranges.IRangeFactory`2
    name: IRangeFactory
    nameWithType: IRangeFactory
    fullName: CodeJam.Ranges.IRangeFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.IRangeFactory`2
    name: IRangeFactory
    nameWithType: IRangeFactory
    fullName: CodeJam.Ranges.IRangeFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.IRange`1
  commentId: T:CodeJam.Ranges.IRange`1
  isExternal: false
  name: IRange<T>
  nameWithType: IRange<T>
  fullName: CodeJam.Ranges.IRange<T>
  nameWithType.vb: IRange(Of T)
  fullName.vb: CodeJam.Ranges.IRange(Of T)
  name.vb: IRange(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.IRange`1
    name: IRange
    nameWithType: IRange
    fullName: CodeJam.Ranges.IRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.IRange`1
    name: IRange
    nameWithType: IRange
    fullName: CodeJam.Ranges.IRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.NullableHelper.AsNullable``1(``0)
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  isExternal: false
  name: AsNullable<T>(T)
  nameWithType: NullableHelper.AsNullable<T>(T)
  fullName: CodeJam.NullableHelper.AsNullable<T>(T)
  nameWithType.vb: NullableHelper.AsNullable(Of T)(T)
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of T)(T)
  name.vb: AsNullable(Of T)(T)
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable<T>
    nameWithType: NullableHelper.AsNullable<T>
    fullName: CodeJam.NullableHelper.AsNullable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable(Of T)
    nameWithType: NullableHelper.AsNullable(Of T)
    fullName: CodeJam.NullableHelper.AsNullable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper
  commentId: T:CodeJam.NullableHelper
  parent: CodeJam
  isExternal: false
  name: NullableHelper
  nameWithType: NullableHelper
  fullName: CodeJam.NullableHelper
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: GetComplementation<T, TKey>(Range<T, TKey>)
  nameWithType: CompositeRangeExtensions.GetComplementation<T, TKey>(Range<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T, TKey>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T, TKey)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: GetComplementation(Of T, TKey)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
    name: GetComplementation<T, TKey>
    nameWithType: CompositeRangeExtensions.GetComplementation<T, TKey>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
    name: GetComplementation(Of T, TKey)
    nameWithType: CompositeRangeExtensions.GetComplementation(Of T, TKey)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions
  commentId: T:CodeJam.Ranges.CompositeRangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: CompositeRangeExtensions
  nameWithType: CompositeRangeExtensions
  fullName: CodeJam.Ranges.CompositeRangeExtensions
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: ToCompositeRange<T, TKey>(Range<T, TKey>)
  nameWithType: CompositeRangeExtensions.ToCompositeRange<T, TKey>(Range<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T, TKey>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: ToCompositeRange(Of T, TKey)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
    name: ToCompositeRange<T, TKey>
    nameWithType: CompositeRangeExtensions.ToCompositeRange<T, TKey>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
    name: ToCompositeRange(Of T, TKey)
    nameWithType: CompositeRangeExtensions.ToCompositeRange(Of T, TKey)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  isExternal: true
  name: WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T2>)
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
    name: WithValues<T, T2, TKey>
    nameWithType: RangeExtensions.WithValues<T, T2, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
    name: WithValues(Of T, T2, TKey)
    nameWithType: RangeExtensions.WithValues(Of T, T2, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  isExternal: true
  name: WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>, Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T2>, System.Func<T, T2>)
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2), Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2), Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues<T, T2, TKey>
    nameWithType: RangeExtensions.WithValues<T, T2, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues(Of T, T2, TKey)
    nameWithType: RangeExtensions.WithValues(Of T, T2, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: WithoutKey<T, TKey>(Range<T, TKey>)
  nameWithType: RangeExtensions.WithoutKey<T, TKey>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.WithoutKey<T, TKey>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.WithoutKey(Of T, TKey)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithoutKey(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: WithoutKey(Of T, TKey)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
    name: WithoutKey<T, TKey>
    nameWithType: RangeExtensions.WithoutKey<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.WithoutKey<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
    name: WithoutKey(Of T, TKey)
    nameWithType: RangeExtensions.WithoutKey(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.WithoutKey(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  isExternal: true
  name: MakeInclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeInclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive<T, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: RangeExtensions.MakeInclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeInclusive(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive<T, TKey>
    nameWithType: RangeExtensions.MakeInclusive<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive(Of T, TKey)
    nameWithType: RangeExtensions.MakeInclusive(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  isExternal: true
  name: MakeExclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeExclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive<T, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: RangeExtensions.MakeExclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeExclusive(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive<T, TKey>
    nameWithType: RangeExtensions.MakeExclusive<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive(Of T, TKey)
    nameWithType: RangeExtensions.MakeExclusive(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExternal: false
  name: WithKey<T, TKey, TKey2>(Range<T, TKey>, TKey2)
  nameWithType: RangeExtensions.WithKey<T, TKey, TKey2>(Range<T, TKey>, TKey2)
  fullName: CodeJam.Ranges.RangeExtensions.WithKey<T, TKey, TKey2>(CodeJam.Ranges.Range<T, TKey>, TKey2)
  nameWithType.vb: RangeExtensions.WithKey(Of T, TKey, TKey2)(Range(Of T, TKey), TKey2)
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithKey(Of T, TKey, TKey2)(CodeJam.Ranges.Range(Of T, TKey), TKey2)
  name.vb: WithKey(Of T, TKey, TKey2)(Range(Of T, TKey), TKey2)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: WithKey<T, TKey, TKey2>
    nameWithType: RangeExtensions.WithKey<T, TKey, TKey2>
    fullName: CodeJam.Ranges.RangeExtensions.WithKey<T, TKey, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: WithKey(Of T, TKey, TKey2)
    nameWithType: RangeExtensions.WithKey(Of T, TKey, TKey2)
    fullName: CodeJam.Ranges.RangeExtensions.WithKey(Of T, TKey, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: Contains<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: Contains<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: Contains<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExternal: false
  name: Contains<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: Contains<T, TKey>
    nameWithType: RangeExtensions.Contains<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: Contains(Of T, TKey)
    nameWithType: RangeExtensions.Contains(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExternal: false
  name: HasIntersection<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.HasIntersection<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  nameWithType.vb: RangeExtensions.HasIntersection(Of T, TKey)(Range(Of T, TKey), T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: HasIntersection(Of T, TKey)(Range(Of T, TKey), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: HasIntersection<T, TKey>
    nameWithType: RangeExtensions.HasIntersection<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: HasIntersection(Of T, TKey)
    nameWithType: RangeExtensions.HasIntersection(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExternal: false
  name: HasIntersection<T, TKey, TRange>(Range<T, TKey>, TRange)
  nameWithType: RangeExtensions.HasIntersection<T, TKey, TRange>(Range<T, TKey>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey, TRange>(CodeJam.Ranges.Range<T, TKey>, TRange)
  nameWithType.vb: RangeExtensions.HasIntersection(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey, TRange)(CodeJam.Ranges.Range(Of T, TKey), TRange)
  name.vb: HasIntersection(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: HasIntersection<T, TKey, TRange>
    nameWithType: RangeExtensions.HasIntersection<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: HasIntersection(Of T, TKey, TRange)
    nameWithType: RangeExtensions.HasIntersection(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: Clamp<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.Clamp<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.Clamp<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.Clamp(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Clamp(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: Clamp(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: Clamp<T, TKey>
    nameWithType: RangeExtensions.Clamp<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Clamp<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: Clamp(Of T, TKey)
    nameWithType: RangeExtensions.Clamp(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Clamp(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: StartsAfter<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: StartsAfter(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: StartsAfter<T, TKey>
    nameWithType: RangeExtensions.StartsAfter<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: StartsAfter(Of T, TKey)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: StartsAfter<T, TKey>
    nameWithType: RangeExtensions.StartsAfter<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: StartsAfter(Of T, TKey)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: StartsAfter<T, TKey>
    nameWithType: RangeExtensions.StartsAfter<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: StartsAfter(Of T, TKey)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: EndsBefore<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: EndsBefore(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: EndsBefore<T, TKey>
    nameWithType: RangeExtensions.EndsBefore<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: EndsBefore(Of T, TKey)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: EndsBefore<T, TKey>
    nameWithType: RangeExtensions.EndsBefore<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: EndsBefore(Of T, TKey)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: EndsBefore<T, TKey>
    nameWithType: RangeExtensions.EndsBefore<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: EndsBefore(Of T, TKey)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExternal: false
  name: Union<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.Union<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  nameWithType.vb: RangeExtensions.Union(Of T, TKey)(Range(Of T, TKey), T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: Union(Of T, TKey)(Range(Of T, TKey), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: Union<T, TKey>
    nameWithType: RangeExtensions.Union<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: Union(Of T, TKey)
    nameWithType: RangeExtensions.Union(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExternal: false
  name: Union<T, TKey, TRange>(Range<T, TKey>, TRange)
  nameWithType: RangeExtensions.Union<T, TKey, TRange>(Range<T, TKey>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey, TRange>(CodeJam.Ranges.Range<T, TKey>, TRange)
  nameWithType.vb: RangeExtensions.Union(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey, TRange)(CodeJam.Ranges.Range(Of T, TKey), TRange)
  name.vb: Union(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: Union<T, TKey, TRange>
    nameWithType: RangeExtensions.Union<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: Union(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Union(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: ExtendFrom<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.ExtendFrom<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: ExtendFrom(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: ExtendFrom<T, TKey>
    nameWithType: RangeExtensions.ExtendFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: ExtendFrom(Of T, TKey)
    nameWithType: RangeExtensions.ExtendFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: ExtendFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.ExtendFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom<T, TKey>
    nameWithType: RangeExtensions.ExtendFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom(Of T, TKey)
    nameWithType: RangeExtensions.ExtendFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: ExtendTo<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.ExtendTo<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.ExtendTo(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: ExtendTo(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: ExtendTo<T, TKey>
    nameWithType: RangeExtensions.ExtendTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: ExtendTo(Of T, TKey)
    nameWithType: RangeExtensions.ExtendTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: ExtendTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.ExtendTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.ExtendTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo<T, TKey>
    nameWithType: RangeExtensions.ExtendTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo(Of T, TKey)
    nameWithType: RangeExtensions.ExtendTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExternal: false
  name: Intersect<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.Intersect<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  nameWithType.vb: RangeExtensions.Intersect(Of T, TKey)(Range(Of T, TKey), T, T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: Intersect(Of T, TKey)(Range(Of T, TKey), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: Intersect<T, TKey>
    nameWithType: RangeExtensions.Intersect<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
    name: Intersect(Of T, TKey)
    nameWithType: RangeExtensions.Intersect(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExternal: false
  name: Intersect<T, TKey, TRange>(Range<T, TKey>, TRange)
  nameWithType: RangeExtensions.Intersect<T, TKey, TRange>(Range<T, TKey>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey, TRange>(CodeJam.Ranges.Range<T, TKey>, TRange)
  nameWithType.vb: RangeExtensions.Intersect(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey, TRange)(CodeJam.Ranges.Range(Of T, TKey), TRange)
  name.vb: Intersect(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: Intersect<T, TKey, TRange>
    nameWithType: RangeExtensions.Intersect<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
    name: Intersect(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Intersect(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: TrimFrom<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.TrimFrom<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.TrimFrom(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: TrimFrom(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: TrimFrom<T, TKey>
    nameWithType: RangeExtensions.TrimFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: TrimFrom(Of T, TKey)
    nameWithType: RangeExtensions.TrimFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: TrimFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.TrimFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: RangeExtensions.TrimFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom<T, TKey>
    nameWithType: RangeExtensions.TrimFrom<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom(Of T, TKey)
    nameWithType: RangeExtensions.TrimFrom(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExternal: false
  name: TrimTo<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.TrimTo<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  nameWithType.vb: RangeExtensions.TrimTo(Of T, TKey)(Range(Of T, TKey), T)
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: TrimTo(Of T, TKey)(Range(Of T, TKey), T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: TrimTo<T, TKey>
    nameWithType: RangeExtensions.TrimTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
    name: TrimTo(Of T, TKey)
    nameWithType: RangeExtensions.TrimTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: TrimTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.TrimTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: RangeExtensions.TrimTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo<T, TKey>
    nameWithType: RangeExtensions.TrimTo<T, TKey>
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo(Of T, TKey)
    nameWithType: RangeExtensions.TrimTo(Of T, TKey)
    fullName: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  isExternal: false
  name: ToInvariantString<T>(T)
  nameWithType: StringExtensions.ToInvariantString<T>(T)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T)
  name.vb: ToInvariantString(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions
  commentId: T:CodeJam.Strings.StringExtensions
  parent: CodeJam.Strings
  isExternal: false
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: CodeJam.Strings.StringExtensions
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  isExternal: true
  name: ToInvariantString<T>(T, String)
  nameWithType: StringExtensions.ToInvariantString<T>(T, String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T, System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T, String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T, System.String)
  name.vb: ToInvariantString(Of T)(T, String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.Strings
  commentId: N:CodeJam.Strings
  isExternal: false
  name: CodeJam.Strings
  nameWithType: CodeJam.Strings
  fullName: CodeJam.Strings
- uid: CodeJam.Ranges.Range`2.op_Equality*
  commentId: Overload:CodeJam.Ranges.Range`2.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Range<T, TKey>.Equality
  fullName: CodeJam.Ranges.Range<T, TKey>.Equality
  nameWithType.vb: Range(Of T, TKey).Equality
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Equality
- uid: CodeJam.Ranges.Range`2
  commentId: T:CodeJam.Ranges.Range`2
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T, TKey>
  nameWithType: Range<T, TKey>
  fullName: CodeJam.Ranges.Range<T, TKey>
  nameWithType.vb: Range(Of T, TKey)
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey)
  name.vb: Range(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Ranges.Range`2.op_Inequality*
  commentId: Overload:CodeJam.Ranges.Range`2.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Range<T, TKey>.Inequality
  fullName: CodeJam.Ranges.Range<T, TKey>.Inequality
  nameWithType.vb: Range(Of T, TKey).Inequality
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Inequality
- uid: CodeJam.Ranges.Range`1
  commentId: T:CodeJam.Ranges.Range`1
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.#ctor*
  commentId: Overload:CodeJam.Ranges.Range`2.#ctor
  isExternal: false
  name: Range
  nameWithType: Range<T, TKey>.Range
  fullName: CodeJam.Ranges.Range<T, TKey>.Range
  nameWithType.vb: Range(Of T, TKey).Range
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Range
- uid: CodeJam.Ranges.RangeBoundaryFrom{{T}}
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryFrom`1
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  nameWithType.vb: RangeBoundaryFrom(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryTo{{T}}
  commentId: T:CodeJam.Ranges.RangeBoundaryTo{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryTo`1
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CodeJam.Ranges.RangeBoundaryFrom`1
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  nameWithType.vb: RangeBoundaryFrom(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryTo`1
  commentId: T:CodeJam.Ranges.RangeBoundaryTo`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Ranges.Range`2.From*
  commentId: Overload:CodeJam.Ranges.Range`2.From
  isExternal: false
  name: From
  nameWithType: Range<T, TKey>.From
  fullName: CodeJam.Ranges.Range<T, TKey>.From
  nameWithType.vb: Range(Of T, TKey).From
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).From
- uid: CodeJam.Ranges.IRange{{T}}.From
  commentId: P:CodeJam.Ranges.IRange{`0}.From
  parent: CodeJam.Ranges.IRange{{T}}
  definition: CodeJam.Ranges.IRange`1.From
  name: From
  nameWithType: IRange<T>.From
  fullName: CodeJam.Ranges.IRange<T>.From
  nameWithType.vb: IRange(Of T).From
  fullName.vb: CodeJam.Ranges.IRange(Of T).From
- uid: CodeJam.Ranges.IRange`1.From
  commentId: P:CodeJam.Ranges.IRange`1.From
  isExternal: false
  name: From
  nameWithType: IRange<T>.From
  fullName: CodeJam.Ranges.IRange<T>.From
  nameWithType.vb: IRange(Of T).From
  fullName.vb: CodeJam.Ranges.IRange(Of T).From
- uid: CodeJam.Ranges.Range`2.To*
  commentId: Overload:CodeJam.Ranges.Range`2.To
  isExternal: false
  name: To
  nameWithType: Range<T, TKey>.To
  fullName: CodeJam.Ranges.Range<T, TKey>.To
  nameWithType.vb: Range(Of T, TKey).To
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).To
- uid: CodeJam.Ranges.IRange{{T}}.To
  commentId: P:CodeJam.Ranges.IRange{`0}.To
  parent: CodeJam.Ranges.IRange{{T}}
  definition: CodeJam.Ranges.IRange`1.To
  name: To
  nameWithType: IRange<T>.To
  fullName: CodeJam.Ranges.IRange<T>.To
  nameWithType.vb: IRange(Of T).To
  fullName.vb: CodeJam.Ranges.IRange(Of T).To
- uid: CodeJam.Ranges.IRange`1.To
  commentId: P:CodeJam.Ranges.IRange`1.To
  isExternal: false
  name: To
  nameWithType: IRange<T>.To
  fullName: CodeJam.Ranges.IRange<T>.To
  nameWithType.vb: IRange(Of T).To
  fullName.vb: CodeJam.Ranges.IRange(Of T).To
- uid: CodeJam.Ranges.Range`2.FromValue*
  commentId: Overload:CodeJam.Ranges.Range`2.FromValue
  isExternal: false
  name: FromValue
  nameWithType: Range<T, TKey>.FromValue
  fullName: CodeJam.Ranges.Range<T, TKey>.FromValue
  nameWithType.vb: Range(Of T, TKey).FromValue
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).FromValue
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: CodeJam.Ranges.Range`2.ToValue*
  commentId: Overload:CodeJam.Ranges.Range`2.ToValue
  isExternal: false
  name: ToValue
  nameWithType: Range<T, TKey>.ToValue
  fullName: CodeJam.Ranges.Range<T, TKey>.ToValue
  nameWithType.vb: Range(Of T, TKey).ToValue
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).ToValue
- uid: CodeJam.Ranges.Range`2.IsEmpty*
  commentId: Overload:CodeJam.Ranges.Range`2.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: Range<T, TKey>.IsEmpty
  fullName: CodeJam.Ranges.Range<T, TKey>.IsEmpty
  nameWithType.vb: Range(Of T, TKey).IsEmpty
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsEmpty
- uid: CodeJam.Ranges.IRange{{T}}.IsEmpty
  commentId: P:CodeJam.Ranges.IRange{`0}.IsEmpty
  parent: CodeJam.Ranges.IRange{{T}}
  definition: CodeJam.Ranges.IRange`1.IsEmpty
  name: IsEmpty
  nameWithType: IRange<T>.IsEmpty
  fullName: CodeJam.Ranges.IRange<T>.IsEmpty
  nameWithType.vb: IRange(Of T).IsEmpty
  fullName.vb: CodeJam.Ranges.IRange(Of T).IsEmpty
- uid: CodeJam.Ranges.IRange`1.IsEmpty
  commentId: P:CodeJam.Ranges.IRange`1.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: IRange<T>.IsEmpty
  fullName: CodeJam.Ranges.IRange<T>.IsEmpty
  nameWithType.vb: IRange(Of T).IsEmpty
  fullName.vb: CodeJam.Ranges.IRange(Of T).IsEmpty
- uid: CodeJam.Ranges.Range`2.IsNotEmpty*
  commentId: Overload:CodeJam.Ranges.Range`2.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: Range<T, TKey>.IsNotEmpty
  fullName: CodeJam.Ranges.Range<T, TKey>.IsNotEmpty
  nameWithType.vb: Range(Of T, TKey).IsNotEmpty
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsNotEmpty
- uid: CodeJam.Ranges.IRange{{T}}.IsNotEmpty
  commentId: P:CodeJam.Ranges.IRange{`0}.IsNotEmpty
  parent: CodeJam.Ranges.IRange{{T}}
  definition: CodeJam.Ranges.IRange`1.IsNotEmpty
  name: IsNotEmpty
  nameWithType: IRange<T>.IsNotEmpty
  fullName: CodeJam.Ranges.IRange<T>.IsNotEmpty
  nameWithType.vb: IRange(Of T).IsNotEmpty
  fullName.vb: CodeJam.Ranges.IRange(Of T).IsNotEmpty
- uid: CodeJam.Ranges.IRange`1.IsNotEmpty
  commentId: P:CodeJam.Ranges.IRange`1.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: IRange<T>.IsNotEmpty
  fullName: CodeJam.Ranges.IRange<T>.IsNotEmpty
  nameWithType.vb: IRange(Of T).IsNotEmpty
  fullName.vb: CodeJam.Ranges.IRange(Of T).IsNotEmpty
- uid: CodeJam.Ranges.Range`2.IsSinglePoint*
  commentId: Overload:CodeJam.Ranges.Range`2.IsSinglePoint
  isExternal: false
  name: IsSinglePoint
  nameWithType: Range<T, TKey>.IsSinglePoint
  fullName: CodeJam.Ranges.Range<T, TKey>.IsSinglePoint
  nameWithType.vb: Range(Of T, TKey).IsSinglePoint
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsSinglePoint
- uid: CodeJam.Ranges.Range`2.IsInfinite*
  commentId: Overload:CodeJam.Ranges.Range`2.IsInfinite
  isExternal: false
  name: IsInfinite
  nameWithType: Range<T, TKey>.IsInfinite
  fullName: CodeJam.Ranges.Range<T, TKey>.IsInfinite
  nameWithType.vb: Range(Of T, TKey).IsInfinite
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).IsInfinite
- uid: CodeJam.Ranges.Range`2.Key*
  commentId: Overload:CodeJam.Ranges.Range`2.Key
  isExternal: false
  name: Key
  nameWithType: Range<T, TKey>.Key
  fullName: CodeJam.Ranges.Range<T, TKey>.Key
  nameWithType.vb: Range(Of T, TKey).Key
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Key
- uid: CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange*
  commentId: Overload:CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange
  isExternal: false
  name: IRangeFactory<T, Range<T, TKey>>.CreateRange
  nameWithType: Range<T, TKey>.IRangeFactory<T, Range<T, TKey>>.CreateRange
  fullName: CodeJam.Ranges.Range<T, TKey>.CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.CreateRange
  nameWithType.vb: Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange
  name.vb: CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.CreateRange
- uid: CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{{T}},CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.IRangeFactory{`0,CodeJam.Ranges.Range`2}.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}
  definition: CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  name: CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: IRangeFactory<T, Range<T, TKey>>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.CreateRange(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: IRangeFactory(Of T, Range(Of T, TKey)).CreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.IRangeFactory(Of T, CodeJam.Ranges.Range(Of T, TKey)).CreateRange(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: CreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: CreateRange
    nameWithType: IRangeFactory<T, Range<T, TKey>>.CreateRange
    fullName: CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.CreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: CreateRange
    nameWithType: IRangeFactory(Of T, Range(Of T, TKey)).CreateRange
    fullName: CodeJam.Ranges.IRangeFactory(Of T, CodeJam.Ranges.Range(Of T, TKey)).CreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  isExternal: false
  name: CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: IRangeFactory<T, TRange>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.IRangeFactory<T, TRange>.CreateRange(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: IRangeFactory(Of T, TRange).CreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.IRangeFactory(Of T, TRange).CreateRange(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: CreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: CreateRange
    nameWithType: IRangeFactory<T, TRange>.CreateRange
    fullName: CodeJam.Ranges.IRangeFactory<T, TRange>.CreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: CreateRange
    nameWithType: IRangeFactory(Of T, TRange).CreateRange
    fullName: CodeJam.Ranges.IRangeFactory(Of T, TRange).CreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange*
  commentId: Overload:CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange
  isExternal: false
  name: IRangeFactory<T, Range<T, TKey>>.TryCreateRange
  nameWithType: Range<T, TKey>.IRangeFactory<T, Range<T, TKey>>.TryCreateRange
  fullName: CodeJam.Ranges.Range<T, TKey>.CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.TryCreateRange
  nameWithType.vb: Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange
  name.vb: CodeJam.Ranges.IRangeFactory<T,CodeJam.Ranges.Range<T,TKey>>.TryCreateRange
- uid: CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{{T}},CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.IRangeFactory{`0,CodeJam.Ranges.Range`2}.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.IRangeFactory{{T},CodeJam.Ranges.Range`2}
  definition: CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  name: TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: IRangeFactory<T, Range<T, TKey>>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: IRangeFactory(Of T, Range(Of T, TKey)).TryCreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.IRangeFactory(Of T, CodeJam.Ranges.Range(Of T, TKey)).TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TryCreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: TryCreateRange
    nameWithType: IRangeFactory<T, Range<T, TKey>>.TryCreateRange
    fullName: CodeJam.Ranges.IRangeFactory<T, CodeJam.Ranges.Range<T, TKey>>.TryCreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: TryCreateRange
    nameWithType: IRangeFactory(Of T, Range(Of T, TKey)).TryCreateRange
    fullName: CodeJam.Ranges.IRangeFactory(Of T, CodeJam.Ranges.Range(Of T, TKey)).TryCreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  isExternal: false
  name: TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: IRangeFactory<T, TRange>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.IRangeFactory<T, TRange>.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: IRangeFactory(Of T, TRange).TryCreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.IRangeFactory(Of T, TRange).TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TryCreateRange(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: TryCreateRange
    nameWithType: IRangeFactory<T, TRange>.TryCreateRange
    fullName: CodeJam.Ranges.IRangeFactory<T, TRange>.TryCreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
    name: TryCreateRange
    nameWithType: IRangeFactory(Of T, TRange).TryCreateRange
    fullName: CodeJam.Ranges.IRangeFactory(Of T, TRange).TryCreateRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.Equals*
  commentId: Overload:CodeJam.Ranges.Range`2.Equals
  isExternal: false
  name: Equals
  nameWithType: Range<T, TKey>.Equals
  fullName: CodeJam.Ranges.Range<T, TKey>.Equals
  nameWithType.vb: Range(Of T, TKey).Equals
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).Equals
- uid: System.IEquatable{CodeJam.Ranges.Range`2}.Equals(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:System.IEquatable{CodeJam.Ranges.Range`2}.Equals(CodeJam.Ranges.Range{`0,`1})
  parent: System.IEquatable{CodeJam.Ranges.Range`2}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Range<T, TKey>)
  nameWithType: IEquatable<Range<T, TKey>>.Equals(Range<T, TKey>)
  fullName: System.IEquatable<CodeJam.Ranges.Range<T, TKey>>.Equals(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: IEquatable(Of Range(Of T, TKey)).Equals(Range(Of T, TKey))
  fullName.vb: System.IEquatable(Of CodeJam.Ranges.Range(Of T, TKey)).Equals(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Equals(Range(Of T, TKey))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Range<T, TKey>>.Equals
    fullName: System.IEquatable<CodeJam.Ranges.Range<T, TKey>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Range(Of T, TKey)).Equals
    fullName: System.IEquatable(Of CodeJam.Ranges.Range(Of T, TKey)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.GetHashCode*
  commentId: Overload:CodeJam.Ranges.Range`2.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Range<T, TKey>.GetHashCode
  fullName: CodeJam.Ranges.Range<T, TKey>.GetHashCode
  nameWithType.vb: Range(Of T, TKey).GetHashCode
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2.ToString*
  commentId: Overload:CodeJam.Ranges.Range`2.ToString
  isExternal: false
  name: ToString
  nameWithType: Range<T, TKey>.ToString
  fullName: CodeJam.Ranges.Range<T, TKey>.ToString
  nameWithType.vb: Range(Of T, TKey).ToString
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
