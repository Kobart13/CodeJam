### YamlMime:ManagedReference
items:
- uid: CodeJam.Option`1.None
  commentId: T:CodeJam.Option`1.None
  id: Option`1.None
  parent: CodeJam
  children:
  - CodeJam.Option`1.None.GetHashCode
  langs:
  - csharp
  - vb
  name: Option<T>.None
  nameWithType: Option<T>.None
  fullName: CodeJam.Option<T>.None
  type: Class
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: None
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 154
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nRepresents an Option without value.\n"
  example: []
  syntax:
    content: 'public sealed class None : Option<T>, IOption<T>, IEquatable<Option<T>>'
    content.vb: >-
      Public NotInheritable Class None
          Inherits
           Option  (Of T)  Implements IOption(Of T), IEquatable(Of  Option(Of T) )
  inheritance:
  - System.Object
  - CodeJam.Option`1
  implements:
  - CodeJam.IOption{{T}}
  - System.IEquatable{CodeJam.Option`1}
  inheritedMembers:
  - CodeJam.Option`1.HasValue
  - CodeJam.Option`1.IsSome
  - CodeJam.Option`1.IsNone
  - CodeJam.Option`1.Value
  - CodeJam.Option`1.Equals(CodeJam.Option{{T}})
  - CodeJam.Option`1.Equals(System.Object)
  - CodeJam.Option`1.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.IOption{`0}.CodeJam.Option.Do``1(System.Action{CodeJam.IOption{{T}}},System.Action)
  - CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{{T}},{TResult}},System.Func{{TResult}})
  - CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``1({T})
  - CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}})
  - CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},{TResult})
  - CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},System.Func{{TResult}})
  - CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  nameWithType.vb: Option(Of T).None
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: CodeJam.Option(Of T).None
  name.vb: Option(Of T).None
- uid: CodeJam.Option`1.None.GetHashCode
  commentId: M:CodeJam.Option`1.None.GetHashCode
  id: GetHashCode
  parent: CodeJam.Option`1.None
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Option<T>.None.GetHashCode()
  fullName: CodeJam.Option<T>.None.GetHashCode()
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 162
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: CodeJam.Option`1.GetHashCode
  overload: CodeJam.Option`1.None.GetHashCode*
  nameWithType.vb: Option(Of T).None.GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Option(Of T).None.GetHashCode()
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.Option`1
  commentId: T:CodeJam.Option`1
  parent: CodeJam
  isExternal: false
  name: Option<T>
  nameWithType: Option<T>
  fullName: CodeJam.Option<T>
  nameWithType.vb: Option(Of T)
  fullName.vb: CodeJam.Option(Of T)
  name.vb: Option(Of T)
  spec.csharp:
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{{T}}
  commentId: T:CodeJam.IOption{``0}
  parent: CodeJam
  definition: CodeJam.IOption`1
  name: IOption<T>
  nameWithType: IOption<T>
  fullName: CodeJam.IOption<T>
  nameWithType.vb: IOption(Of T)
  fullName.vb: CodeJam.IOption(Of T)
  name.vb: IOption(Of T)
  spec.csharp:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{CodeJam.Option`1}
  commentId: T:System.IEquatable{CodeJam.Option`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Option<T>>
  nameWithType: IEquatable<Option<T>>
  fullName: System.IEquatable<CodeJam.Option<T>>
  nameWithType.vb: IEquatable(Of Option(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Option(Of T))
  name.vb: IEquatable(Of Option(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.HasValue
  commentId: P:CodeJam.Option`1.HasValue
  parent: CodeJam.Option`1
  isExternal: false
  name: HasValue
  nameWithType: Option<T>.HasValue
  fullName: CodeJam.Option<T>.HasValue
  nameWithType.vb: Option(Of T).HasValue
  fullName.vb: CodeJam.Option(Of T).HasValue
- uid: CodeJam.Option`1.IsSome
  commentId: P:CodeJam.Option`1.IsSome
  parent: CodeJam.Option`1
  isExternal: false
  name: IsSome
  nameWithType: Option<T>.IsSome
  fullName: CodeJam.Option<T>.IsSome
  nameWithType.vb: Option(Of T).IsSome
  fullName.vb: CodeJam.Option(Of T).IsSome
- uid: CodeJam.Option`1.IsNone
  commentId: P:CodeJam.Option`1.IsNone
  parent: CodeJam.Option`1
  isExternal: false
  name: IsNone
  nameWithType: Option<T>.IsNone
  fullName: CodeJam.Option<T>.IsNone
  nameWithType.vb: Option(Of T).IsNone
  fullName.vb: CodeJam.Option(Of T).IsNone
- uid: CodeJam.Option`1.Value
  commentId: P:CodeJam.Option`1.Value
  parent: CodeJam.Option`1
  isExternal: false
  name: Value
  nameWithType: Option<T>.Value
  fullName: CodeJam.Option<T>.Value
  nameWithType.vb: Option(Of T).Value
  fullName.vb: CodeJam.Option(Of T).Value
- uid: CodeJam.Option`1.Equals(CodeJam.Option{{T}})
  commentId: M:CodeJam.Option`1.Equals(CodeJam.Option{`0})
  parent: CodeJam.Option`1
  definition: CodeJam.Option`1.Equals(CodeJam.Option{`0})
  name: Equals(Option<T>)
  nameWithType: Option<T>.Equals(Option<T>)
  fullName: CodeJam.Option<T>.Equals(CodeJam.Option<T>)
  nameWithType.vb: Option(Of T).Equals(Option(Of T))
  fullName.vb: CodeJam.Option(Of T).Equals(CodeJam.Option(Of T))
  name.vb: Equals(Option(Of T))
  spec.csharp:
  - uid: CodeJam.Option`1.Equals(CodeJam.Option{`0})
    name: Equals
    nameWithType: Option<T>.Equals
    fullName: CodeJam.Option<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option`1.Equals(CodeJam.Option{`0})
    name: Equals
    nameWithType: Option(Of T).Equals
    fullName: CodeJam.Option(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.Equals(System.Object)
  commentId: M:CodeJam.Option`1.Equals(System.Object)
  parent: CodeJam.Option`1
  isExternal: true
  name: Equals(Object)
  nameWithType: Option<T>.Equals(Object)
  fullName: CodeJam.Option<T>.Equals(System.Object)
  nameWithType.vb: Option(Of T).Equals(Object)
  fullName.vb: CodeJam.Option(Of T).Equals(System.Object)
  spec.csharp:
  - uid: CodeJam.Option`1.Equals(System.Object)
    name: Equals
    nameWithType: Option<T>.Equals
    fullName: CodeJam.Option<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option`1.Equals(System.Object)
    name: Equals
    nameWithType: Option(Of T).Equals
    fullName: CodeJam.Option(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.ToString
  commentId: M:CodeJam.Option`1.ToString
  parent: CodeJam.Option`1
  isExternal: false
  name: ToString()
  nameWithType: Option<T>.ToString()
  fullName: CodeJam.Option<T>.ToString()
  nameWithType.vb: Option(Of T).ToString()
  fullName.vb: CodeJam.Option(Of T).ToString()
  spec.csharp:
  - uid: CodeJam.Option`1.ToString
    name: ToString
    nameWithType: Option<T>.ToString
    fullName: CodeJam.Option<T>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option`1.ToString
    name: ToString
    nameWithType: Option(Of T).ToString
    fullName: CodeJam.Option(Of T).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.Do``1(System.Action{CodeJam.IOption{{T}}},System.Action)
  commentId: M:CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  parent: CodeJam.Option
  definition: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  name: Do<T>(Action<IOption<T>>, Action)
  nameWithType: Option.Do<T>(Action<IOption<T>>, Action)
  fullName: CodeJam.Option.Do<T>(System.Action<CodeJam.IOption<T>>, System.Action)
  nameWithType.vb: Option.Do(Of T)(Action(Of IOption(Of T)), Action)
  fullName.vb: CodeJam.Option.Do(Of T)(System.Action(Of CodeJam.IOption(Of T)), System.Action)
  name.vb: Do(Of T)(Action(Of IOption(Of T)), Action)
  spec.csharp:
  - uid: CodeJam.Option.Do``1(System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do<T>
    nameWithType: Option.Do<T>
    fullName: CodeJam.Option.Do<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.Do``1(System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do(Of T)
    nameWithType: Option.Do(Of T)
    fullName: CodeJam.Option.Do(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{{T}},{TResult}},System.Func{{TResult}})
  commentId: M:CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  parent: CodeJam.Option
  definition: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  name: GetValueOrDefault<T, TResult>(Func<IOption<T>, TResult>, Func<TResult>)
  nameWithType: Option.GetValueOrDefault<T, TResult>(Func<IOption<T>, TResult>, Func<TResult>)
  fullName: CodeJam.Option.GetValueOrDefault<T, TResult>(System.Func<CodeJam.IOption<T>, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.GetValueOrDefault(Of T, TResult)(Func(Of IOption(Of T), TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T, TResult)(System.Func(Of CodeJam.IOption(Of T), TResult), System.Func(Of TResult))
  name.vb: GetValueOrDefault(Of T, TResult)(Func(Of IOption(Of T), TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault<T, TResult>
    nameWithType: Option.GetValueOrDefault<T, TResult>
    fullName: CodeJam.Option.GetValueOrDefault<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault(Of T, TResult)
    nameWithType: Option.GetValueOrDefault(Of T, TResult)
    fullName: CodeJam.Option.GetValueOrDefault(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``1({T})
  commentId: M:CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  parent: CodeJam.Option
  definition: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  name: GetValueOrDefault<T>(T)
  nameWithType: Option.GetValueOrDefault<T>(T)
  fullName: CodeJam.Option.GetValueOrDefault<T>(T)
  nameWithType.vb: Option.GetValueOrDefault(Of T)(T)
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T)(T)
  name.vb: GetValueOrDefault(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``1(``0)
    name: GetValueOrDefault<T>
    nameWithType: Option.GetValueOrDefault<T>
    fullName: CodeJam.Option.GetValueOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``1(``0)
    name: GetValueOrDefault(Of T)
    nameWithType: Option.GetValueOrDefault(Of T)
    fullName: CodeJam.Option.GetValueOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  parent: CodeJam.Option
  definition: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  name: With<T, TResult>(Func<T, TResult>)
  nameWithType: Option.With<T, TResult>(Func<T, TResult>)
  fullName: CodeJam.Option.With<T, TResult>(System.Func<T, TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Func(Of T, TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(System.Func(Of T, TResult))
  name.vb: With(Of T, TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},{TResult})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  parent: CodeJam.Option
  definition: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  name: With<T, TResult>(Func<T, TResult>, TResult)
  nameWithType: Option.With<T, TResult>(Func<T, TResult>, TResult)
  fullName: CodeJam.Option.With<T, TResult>(System.Func<T, TResult>, TResult)
  nameWithType.vb: Option.With(Of T, TResult)(Func(Of T, TResult), TResult)
  fullName.vb: CodeJam.Option.With(Of T, TResult)(System.Func(Of T, TResult), TResult)
  name.vb: With(Of T, TResult)(Func(Of T, TResult), TResult)
  spec.csharp:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},``1)
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},``1)
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},System.Func{{TResult}})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  parent: CodeJam.Option
  definition: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  name: With<T, TResult>(Func<T, TResult>, Func<TResult>)
  nameWithType: Option.With<T, TResult>(Func<T, TResult>, Func<TResult>)
  fullName: CodeJam.Option.With<T, TResult>(System.Func<T, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Func(Of T, TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(System.Func(Of T, TResult), System.Func(Of TResult))
  name.vb: With(Of T, TResult)(Func(Of T, TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},System.Func{``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},System.Func{``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, Option<T>.None>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, Option<T>.None>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Option<T>.None>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, Option(Of T).None)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Option(Of T).None)(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, Option(Of T).None)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, Option<T>.None>
    nameWithType: RangeExtensions.Contains<T, Option<T>.None>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Option<T>.None>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, Option(Of T).None)
    nameWithType: RangeExtensions.Contains(Of T, Option(Of T).None)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Option(Of T).None)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, Option<T>.None>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, Option<T>.None>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Option<T>.None>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, Option(Of T).None)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Option(Of T).None)(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, Option(Of T).None)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, Option<T>.None>
    nameWithType: RangeExtensions.StartsAfter<T, Option<T>.None>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Option<T>.None>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, Option(Of T).None)
    nameWithType: RangeExtensions.StartsAfter(Of T, Option(Of T).None)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Option(Of T).None)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, Option<T>.None>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, Option<T>.None>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Option<T>.None>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, Option(Of T).None)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Option(Of T).None)(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, Option(Of T).None)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, Option<T>.None>
    nameWithType: RangeExtensions.EndsBefore<T, Option<T>.None>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Option<T>.None>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, Option(Of T).None)
    nameWithType: RangeExtensions.EndsBefore(Of T, Option(Of T).None)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Option(Of T).None)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, Option<T>.None>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, Option<T>.None>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Option<T>.None>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, Option(Of T).None)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Option(Of T).None)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, Option(Of T).None)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, Option<T>.None>
    nameWithType: RangeExtensions.Contains<T, TKey, Option<T>.None>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Option<T>.None>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, Option(Of T).None)
    nameWithType: RangeExtensions.Contains(Of T, TKey, Option(Of T).None)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Option(Of T).None)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, Option<T>.None>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, Option<T>.None>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Option<T>.None>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, Option(Of T).None)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Option(Of T).None)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, Option(Of T).None)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, Option<T>.None>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, Option<T>.None>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Option<T>.None>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, Option(Of T).None)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, Option(Of T).None)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Option(Of T).None)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.None.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, Option<T>.None>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, Option<T>.None>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Option<T>.None>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, Option(Of T).None)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Option(Of T).None)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, Option(Of T).None)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, Option<T>.None>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, Option<T>.None>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Option<T>.None>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, Option(Of T).None)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, Option(Of T).None)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Option(Of T).None)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.IOption`1
  commentId: T:CodeJam.IOption`1
  isExternal: false
  name: IOption<T>
  nameWithType: IOption<T>
  fullName: CodeJam.IOption<T>
  nameWithType.vb: IOption(Of T)
  fullName.vb: CodeJam.IOption(Of T)
  name.vb: IOption(Of T)
  spec.csharp:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.Equals(CodeJam.Option{`0})
  commentId: M:CodeJam.Option`1.Equals(CodeJam.Option{`0})
  isExternal: false
  name: Equals(Option<T>)
  nameWithType: Option<T>.Equals(Option<T>)
  fullName: CodeJam.Option<T>.Equals(CodeJam.Option<T>)
  nameWithType.vb: Option(Of T).Equals(Option(Of T))
  fullName.vb: CodeJam.Option(Of T).Equals(CodeJam.Option(Of T))
  name.vb: Equals(Option(Of T))
  spec.csharp:
  - uid: CodeJam.Option`1.Equals(CodeJam.Option{`0})
    name: Equals
    nameWithType: Option<T>.Equals
    fullName: CodeJam.Option<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option`1.Equals(CodeJam.Option{`0})
    name: Equals
    nameWithType: Option(Of T).Equals
    fullName: CodeJam.Option(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  commentId: M:CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  isExternal: true
  name: Do<T>(IOption<T>, Action<IOption<T>>, Action)
  nameWithType: Option.Do<T>(IOption<T>, Action<IOption<T>>, Action)
  fullName: CodeJam.Option.Do<T>(CodeJam.IOption<T>, System.Action<CodeJam.IOption<T>>, System.Action)
  nameWithType.vb: Option.Do(Of T)(IOption(Of T), Action(Of IOption(Of T)), Action)
  fullName.vb: CodeJam.Option.Do(Of T)(CodeJam.IOption(Of T), System.Action(Of CodeJam.IOption(Of T)), System.Action)
  name.vb: Do(Of T)(IOption(Of T), Action(Of IOption(Of T)), Action)
  spec.csharp:
  - uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do<T>
    nameWithType: Option.Do<T>
    fullName: CodeJam.Option.Do<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do(Of T)
    nameWithType: Option.Do(Of T)
    fullName: CodeJam.Option.Do(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option
  commentId: T:CodeJam.Option
  parent: CodeJam
  isExternal: false
  name: Option
  nameWithType: Option
  fullName: CodeJam.Option
- uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  commentId: M:CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  isExternal: true
  name: GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>)
  nameWithType: Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>)
  fullName: CodeJam.Option.GetValueOrDefault<T, TResult>(CodeJam.IOption<T>, System.Func<CodeJam.IOption<T>, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.GetValueOrDefault(Of T, TResult)(IOption(Of T), Func(Of IOption(Of T), TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T, TResult)(CodeJam.IOption(Of T), System.Func(Of CodeJam.IOption(Of T), TResult), System.Func(Of TResult))
  name.vb: GetValueOrDefault(Of T, TResult)(IOption(Of T), Func(Of IOption(Of T), TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault<T, TResult>
    nameWithType: Option.GetValueOrDefault<T, TResult>
    fullName: CodeJam.Option.GetValueOrDefault<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault(Of T, TResult)
    nameWithType: Option.GetValueOrDefault(Of T, TResult)
    fullName: CodeJam.Option.GetValueOrDefault(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  commentId: M:CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  isExternal: false
  name: GetValueOrDefault<T>(IOption<T>, T)
  nameWithType: Option.GetValueOrDefault<T>(IOption<T>, T)
  fullName: CodeJam.Option.GetValueOrDefault<T>(CodeJam.IOption<T>, T)
  nameWithType.vb: Option.GetValueOrDefault(Of T)(IOption(Of T), T)
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T)(CodeJam.IOption(Of T), T)
  name.vb: GetValueOrDefault(Of T)(IOption(Of T), T)
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
    name: GetValueOrDefault<T>
    nameWithType: Option.GetValueOrDefault<T>
    fullName: CodeJam.Option.GetValueOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
    name: GetValueOrDefault(Of T)
    nameWithType: Option.GetValueOrDefault(Of T)
    fullName: CodeJam.Option.GetValueOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  isExternal: true
  name: With<T, TResult>(Option<T>, Func<T, TResult>)
  nameWithType: Option.With<T, TResult>(Option<T>, Func<T, TResult>)
  fullName: CodeJam.Option.With<T, TResult>(CodeJam.Option<T>, System.Func<T, TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Option(Of T), Func(Of T, TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(CodeJam.Option(Of T), System.Func(Of T, TResult))
  name.vb: With(Of T, TResult)(Option(Of T), Func(Of T, TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  isExternal: true
  name: With<T, TResult>(Option<T>, Func<T, TResult>, TResult)
  nameWithType: Option.With<T, TResult>(Option<T>, Func<T, TResult>, TResult)
  fullName: CodeJam.Option.With<T, TResult>(CodeJam.Option<T>, System.Func<T, TResult>, TResult)
  nameWithType.vb: Option.With(Of T, TResult)(Option(Of T), Func(Of T, TResult), TResult)
  fullName.vb: CodeJam.Option.With(Of T, TResult)(CodeJam.Option(Of T), System.Func(Of T, TResult), TResult)
  name.vb: With(Of T, TResult)(Option(Of T), Func(Of T, TResult), TResult)
  spec.csharp:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  isExternal: true
  name: With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>)
  nameWithType: Option.With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>)
  fullName: CodeJam.Option.With<T, TResult>(CodeJam.Option<T>, System.Func<T, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Option(Of T), Func(Of T, TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(CodeJam.Option(Of T), System.Func(Of T, TResult), System.Func(Of TResult))
  name.vb: With(Of T, TResult)(Option(Of T), Func(Of T, TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Option`1.GetHashCode
  commentId: M:CodeJam.Option`1.GetHashCode
  parent: CodeJam.Option`1
  isExternal: false
  name: GetHashCode()
  nameWithType: Option<T>.GetHashCode()
  fullName: CodeJam.Option<T>.GetHashCode()
  nameWithType.vb: Option(Of T).GetHashCode()
  fullName.vb: CodeJam.Option(Of T).GetHashCode()
  spec.csharp:
  - uid: CodeJam.Option`1.GetHashCode
    name: GetHashCode
    nameWithType: Option<T>.GetHashCode
    fullName: CodeJam.Option<T>.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option`1.GetHashCode
    name: GetHashCode
    nameWithType: Option(Of T).GetHashCode
    fullName: CodeJam.Option(Of T).GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.None.GetHashCode*
  commentId: Overload:CodeJam.Option`1.None.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Option<T>.None.GetHashCode
  fullName: CodeJam.Option<T>.None.GetHashCode
  nameWithType.vb: Option(Of T).None.GetHashCode
  fullName.vb: CodeJam.Option(Of T).None.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
