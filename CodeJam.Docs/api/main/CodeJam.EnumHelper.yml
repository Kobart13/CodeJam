### YamlMime:ManagedReference
items:
- uid: CodeJam.EnumHelper
  commentId: T:CodeJam.EnumHelper
  id: EnumHelper
  parent: CodeJam
  children:
  - CodeJam.EnumHelper.AreFlagsDefined``1(``0)
  - CodeJam.EnumHelper.ClearFlag``1(``0,``0)
  - CodeJam.EnumHelper.GetDescription``1(``0)
  - CodeJam.EnumHelper.GetDisplayName``1(``0)
  - CodeJam.EnumHelper.GetEnumValue``1(``0)
  - CodeJam.EnumHelper.GetEnumValues(System.Type)
  - CodeJam.EnumHelper.GetEnumValues``1
  - CodeJam.EnumHelper.GetField``1(``0)
  - CodeJam.EnumHelper.GetFlagsMask``1
  - CodeJam.EnumHelper.GetName``1(``0)
  - CodeJam.EnumHelper.GetNames``1(System.Boolean)
  - CodeJam.EnumHelper.GetNameValues``1(System.Boolean)
  - CodeJam.EnumHelper.GetValues``1
  - CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
  - CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
  - CodeJam.EnumHelper.IsDefined``1(``0)
  - CodeJam.EnumHelper.IsDefined``1(System.String)
  - CodeJam.EnumHelper.IsFlagsEnum``1
  - CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
  - CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
  - CodeJam.EnumHelper.Parse``1(System.String,System.Boolean)
  - CodeJam.EnumHelper.SetFlag``1(``0,``0)
  - CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
  - CodeJam.EnumHelper.TryParse``1(System.String,``0@)
  - CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean)
  - CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean,``0@)
  langs:
  - csharp
  - vb
  name: EnumHelper
  nameWithType: EnumHelper
  fullName: CodeJam.EnumHelper
  type: Class
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EnumHelper
    path: ../Main/src/EnumHelper.cs
    startLine: 30
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nExtension methods for Enum types\n"
  example: []
  syntax:
    content: public static class EnumHelper
    content.vb: Public Module EnumHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.EnumHelper.IsDefined``1(``0)
  commentId: M:CodeJam.EnumHelper.IsDefined``1(``0)
  id: IsDefined``1(``0)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: IsDefined<TEnum>(TEnum)
  nameWithType: EnumHelper.IsDefined<TEnum>(TEnum)
  fullName: CodeJam.EnumHelper.IsDefined<TEnum>(TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsDefined
    path: ../Main/src/EnumHelper.cs
    startLine: 38
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether the specified value is defined.
  example: []
  syntax:
    content: 'public static bool IsDefined<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value to check.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: True, if enum defines the value.
    content.vb: Public Shared Function IsDefined(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum) As Boolean
  overload: CodeJam.EnumHelper.IsDefined*
  nameWithType.vb: EnumHelper.IsDefined(Of TEnum)(TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.IsDefined(Of TEnum)(TEnum)
  name.vb: IsDefined(Of TEnum)(TEnum)
- uid: CodeJam.EnumHelper.IsDefined``1(System.String)
  commentId: M:CodeJam.EnumHelper.IsDefined``1(System.String)
  id: IsDefined``1(System.String)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: IsDefined<TEnum>(String)
  nameWithType: EnumHelper.IsDefined<TEnum>(String)
  fullName: CodeJam.EnumHelper.IsDefined<TEnum>(System.String)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsDefined
    path: ../Main/src/EnumHelper.cs
    startLine: 47
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether the string representation of value is defined.
  example: []
  syntax:
    content: 'public static bool IsDefined<TEnum>(string value)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: System.String
      description: String representation of value to check.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: True, if enum defines the value.
    content.vb: Public Shared Function IsDefined(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As String) As Boolean
  overload: CodeJam.EnumHelper.IsDefined*
  nameWithType.vb: EnumHelper.IsDefined(Of TEnum)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.IsDefined(Of TEnum)(System.String)
  name.vb: IsDefined(Of TEnum)(String)
- uid: CodeJam.EnumHelper.AreFlagsDefined``1(``0)
  commentId: M:CodeJam.EnumHelper.AreFlagsDefined``1(``0)
  id: AreFlagsDefined``1(``0)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: AreFlagsDefined<TEnum>(TEnum)
  nameWithType: EnumHelper.AreFlagsDefined<TEnum>(TEnum)
  fullName: CodeJam.EnumHelper.AreFlagsDefined<TEnum>(TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AreFlagsDefined
    path: ../Main/src/EnumHelper.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether all bits of the flags combination are defined.
  example: []
  syntax:
    content: 'public static bool AreFlagsDefined<TEnum>(TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: flags
      type: '{TEnum}'
      description: The flags to check.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: True, if enum defines all bits of the flags combination.
    content.vb: Public Shared Function AreFlagsDefined(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(flags As TEnum) As Boolean
  overload: CodeJam.EnumHelper.AreFlagsDefined*
  nameWithType.vb: EnumHelper.AreFlagsDefined(Of TEnum)(TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.AreFlagsDefined(Of TEnum)(TEnum)
  name.vb: AreFlagsDefined(Of TEnum)(TEnum)
- uid: CodeJam.EnumHelper.IsFlagsEnum``1
  commentId: M:CodeJam.EnumHelper.IsFlagsEnum``1
  id: IsFlagsEnum``1
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: IsFlagsEnum<TEnum>()
  nameWithType: EnumHelper.IsFlagsEnum<TEnum>()
  fullName: CodeJam.EnumHelper.IsFlagsEnum<TEnum>()
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsFlagsEnum
    path: ../Main/src/EnumHelper.cs
    startLine: 64
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether the enum has flags modifier.
  example: []
  syntax:
    content: 'public static bool IsFlagsEnum<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible'
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: True, if the enum is flags enum
    content.vb: Public Shared Function IsFlagsEnum(Of TEnum As {Structure, IComparable, IFormattable, IConvertible}) As Boolean
  overload: CodeJam.EnumHelper.IsFlagsEnum*
  nameWithType.vb: EnumHelper.IsFlagsEnum(Of TEnum)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.IsFlagsEnum(Of TEnum)()
  name.vb: IsFlagsEnum(Of TEnum)()
- uid: CodeJam.EnumHelper.GetFlagsMask``1
  commentId: M:CodeJam.EnumHelper.GetFlagsMask``1
  id: GetFlagsMask``1
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetFlagsMask<TEnum>()
  nameWithType: EnumHelper.GetFlagsMask<TEnum>()
  fullName: CodeJam.EnumHelper.GetFlagsMask<TEnum>()
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetFlagsMask
    path: ../Main/src/EnumHelper.cs
    startLine: 74
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns a combination of all flags declared in the enum.
  example: []
  syntax:
    content: 'public static TEnum GetFlagsMask<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible'
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: '{TEnum}'
      description: "\nA combination of all flags declared in the enum, or <code>default(TEnum)</code> if <xref href=\"CodeJam.EnumHelper.IsFlagsEnum%60%601\" data-throw-if-not-resolved=\"false\"></xref> is false.\n"
    content.vb: Public Shared Function GetFlagsMask(Of TEnum As {Structure, IComparable, IFormattable, IConvertible}) As TEnum
  overload: CodeJam.EnumHelper.GetFlagsMask*
  nameWithType.vb: EnumHelper.GetFlagsMask(Of TEnum)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetFlagsMask(Of TEnum)()
  name.vb: GetFlagsMask(Of TEnum)()
- uid: CodeJam.EnumHelper.TryParse``1(System.String,``0@)
  commentId: M:CodeJam.EnumHelper.TryParse``1(System.String,``0@)
  id: TryParse``1(System.String,``0@)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: TryParse<TEnum>(String, out TEnum)
  nameWithType: EnumHelper.TryParse<TEnum>(String, out TEnum)
  fullName: CodeJam.EnumHelper.TryParse<TEnum>(System.String, out TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TryParse
    path: ../Main/src/EnumHelper.cs
    startLine: 84
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Try to parse the enum value.
  example: []
  syntax:
    content: 'public static bool TryParse<TEnum>(string name, out TEnum result)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: result
      type: '{TEnum}'
      description: The parsed value.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: <code>true</code>, if parsing was successful; <code>false</code> otherwise.
    content.vb: Public Shared Function TryParse(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(name As String, ByRef result As TEnum) As Boolean
  overload: CodeJam.EnumHelper.TryParse*
  nameWithType.vb: EnumHelper.TryParse(Of TEnum)(String, ByRef TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.TryParse(Of TEnum)(System.String, ByRef TEnum)
  name.vb: TryParse(Of TEnum)(String, ByRef TEnum)
- uid: CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean,``0@)
  commentId: M:CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean,``0@)
  id: TryParse``1(System.String,System.Boolean,``0@)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: TryParse<TEnum>(String, Boolean, out TEnum)
  nameWithType: EnumHelper.TryParse<TEnum>(String, Boolean, out TEnum)
  fullName: CodeJam.EnumHelper.TryParse<TEnum>(System.String, System.Boolean, out TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TryParse
    path: ../Main/src/EnumHelper.cs
    startLine: 95
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Try to parse the enum value.
  example: []
  syntax:
    content: 'public static bool TryParse<TEnum>(string name, bool ignoreCase, out TEnum result)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code> the case of the name will be ignored.
    - id: result
      type: '{TEnum}'
      description: The parsed value.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: <code>true</code>, if parsing was successful; <code>false</code> otherwise.
    content.vb: Public Shared Function TryParse(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(name As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean
  overload: CodeJam.EnumHelper.TryParse*
  nameWithType.vb: EnumHelper.TryParse(Of TEnum)(String, Boolean, ByRef TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.TryParse(Of TEnum)(System.String, System.Boolean, ByRef TEnum)
  name.vb: TryParse(Of TEnum)(String, Boolean, ByRef TEnum)
- uid: CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean)
  commentId: M:CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean)
  id: TryParse``1(System.String,System.Boolean)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: TryParse<TEnum>(String, Boolean)
  nameWithType: EnumHelper.TryParse<TEnum>(String, Boolean)
  fullName: CodeJam.EnumHelper.TryParse<TEnum>(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TryParse
    path: ../Main/src/EnumHelper.cs
    startLine: 106
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Try to parse the enum value.
  example: []
  syntax:
    content: 'public static TEnum? TryParse<TEnum>(string name, bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code> the case of the name will be ignored.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Nullable{{TEnum}}
      description: Parsed value, if parsing was successful; <code>null</code> otherwise.
    content.vb: Public Shared Function TryParse(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(name As String, ignoreCase As Boolean = False) As TEnum?
  overload: CodeJam.EnumHelper.TryParse*
  nameWithType.vb: EnumHelper.TryParse(Of TEnum)(String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.TryParse(Of TEnum)(System.String, System.Boolean)
  name.vb: TryParse(Of TEnum)(String, Boolean)
- uid: CodeJam.EnumHelper.Parse``1(System.String,System.Boolean)
  commentId: M:CodeJam.EnumHelper.Parse``1(System.String,System.Boolean)
  id: Parse``1(System.String,System.Boolean)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: Parse<TEnum>(String, Boolean)
  nameWithType: EnumHelper.Parse<TEnum>(String, Boolean)
  fullName: CodeJam.EnumHelper.Parse<TEnum>(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Parse
    path: ../Main/src/EnumHelper.cs
    startLine: 116
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Parse the enum value.
  example: []
  syntax:
    content: 'public static TEnum Parse<TEnum>(string name, bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code> the case of the name will be ignored.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: '{TEnum}'
      description: Parsed value.
    content.vb: Public Shared Function Parse(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(name As String, ignoreCase As Boolean = False) As TEnum
  overload: CodeJam.EnumHelper.Parse*
  nameWithType.vb: EnumHelper.Parse(Of TEnum)(String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.Parse(Of TEnum)(System.String, System.Boolean)
  name.vb: Parse(Of TEnum)(String, Boolean)
- uid: CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
  id: IsFlagSet``1(``0,``0)
  isExtensionMethod: true
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: IsFlagSet<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsFlagSet<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsFlagSet<TEnum>(TEnum, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsFlagSet
    path: ../Main/src/EnumHelper.cs
    startLine: 132
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether the specified flag is set.
  example: []
  syntax:
    content: 'public static bool IsFlagSet<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: <code>true</code> if the value includes all bits of the flag or the flag is zero.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsFlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum) As Boolean
  overload: CodeJam.EnumHelper.IsFlagSet*
  nameWithType.vb: EnumHelper.IsFlagSet(Of TEnum)(TEnum, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.IsFlagSet(Of TEnum)(TEnum, TEnum)
  name.vb: IsFlagSet(Of TEnum)(TEnum, TEnum)
- uid: CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
  id: IsAnyFlagUnset``1(``0,``0)
  isExtensionMethod: true
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: IsAnyFlagUnset<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsAnyFlagUnset<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsAnyFlagUnset<TEnum>(TEnum, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsAnyFlagUnset
    path: ../Main/src/EnumHelper.cs
    startLine: 142
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether any bit from specified flag is not set.
  example: []
  syntax:
    content: 'public static bool IsAnyFlagUnset<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: <code>true</code> if the value does not include all bits of the flag.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAnyFlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum) As Boolean
  overload: CodeJam.EnumHelper.IsAnyFlagUnset*
  nameWithType.vb: EnumHelper.IsAnyFlagUnset(Of TEnum)(TEnum, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.IsAnyFlagUnset(Of TEnum)(TEnum, TEnum)
  name.vb: IsAnyFlagUnset(Of TEnum)(TEnum, TEnum)
- uid: CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
  id: IsAnyFlagSet``1(``0,``0)
  isExtensionMethod: true
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: IsAnyFlagSet<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsAnyFlagSet<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsAnyFlagSet<TEnum>(TEnum, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsAnyFlagSet
    path: ../Main/src/EnumHelper.cs
    startLine: 152
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether any bit from specified flag is set.
  example: []
  syntax:
    content: 'public static bool IsAnyFlagSet<TEnum>(this TEnum value, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: <code>true</code> if the value includes any bit of the flags or the flag is zero.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAnyFlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flags As TEnum) As Boolean
  overload: CodeJam.EnumHelper.IsAnyFlagSet*
  nameWithType.vb: EnumHelper.IsAnyFlagSet(Of TEnum)(TEnum, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.IsAnyFlagSet(Of TEnum)(TEnum, TEnum)
  name.vb: IsAnyFlagSet(Of TEnum)(TEnum, TEnum)
- uid: CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
  id: IsFlagUnset``1(``0,``0)
  isExtensionMethod: true
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: IsFlagUnset<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsFlagUnset<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsFlagUnset<TEnum>(TEnum, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsFlagUnset
    path: ../Main/src/EnumHelper.cs
    startLine: 162
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Determines whether the specified flag is not set.
  example: []
  syntax:
    content: 'public static bool IsFlagUnset<TEnum>(this TEnum value, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Boolean
      description: <code>true</code> if the value does not include any bit of the flags.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsFlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flags As TEnum) As Boolean
  overload: CodeJam.EnumHelper.IsFlagUnset*
  nameWithType.vb: EnumHelper.IsFlagUnset(Of TEnum)(TEnum, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.IsFlagUnset(Of TEnum)(TEnum, TEnum)
  name.vb: IsFlagUnset(Of TEnum)(TEnum, TEnum)
- uid: CodeJam.EnumHelper.SetFlag``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.SetFlag``1(``0,``0)
  id: SetFlag``1(``0,``0)
  isExtensionMethod: true
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: SetFlag<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.SetFlag<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.SetFlag<TEnum>(TEnum, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SetFlag
    path: ../Main/src/EnumHelper.cs
    startLine: 174
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Sets the flag.
  example: []
  syntax:
    content: 'public static TEnum SetFlag<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: '{TEnum}'
      description: Bitwise combination of the flag and the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetFlag(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum) As TEnum
  overload: CodeJam.EnumHelper.SetFlag*
  nameWithType.vb: EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum)
  name.vb: SetFlag(Of TEnum)(TEnum, TEnum)
- uid: CodeJam.EnumHelper.ClearFlag``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.ClearFlag``1(``0,``0)
  id: ClearFlag``1(``0,``0)
  isExtensionMethod: true
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: ClearFlag<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.ClearFlag<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.ClearFlag<TEnum>(TEnum, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ClearFlag
    path: ../Main/src/EnumHelper.cs
    startLine: 184
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Clears the flag.
  example: []
  syntax:
    content: 'public static TEnum ClearFlag<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: '{TEnum}'
      description: The bits of the value excluding the ones from the flag.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClearFlag(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum) As TEnum
  overload: CodeJam.EnumHelper.ClearFlag*
  nameWithType.vb: EnumHelper.ClearFlag(Of TEnum)(TEnum, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.ClearFlag(Of TEnum)(TEnum, TEnum)
  name.vb: ClearFlag(Of TEnum)(TEnum, TEnum)
- uid: CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
  commentId: M:CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
  id: SetFlag``1(``0,``0,System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: SetFlag<TEnum>(TEnum, TEnum, Boolean)
  nameWithType: EnumHelper.SetFlag<TEnum>(TEnum, TEnum, Boolean)
  fullName: CodeJam.EnumHelper.SetFlag<TEnum>(TEnum, TEnum, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SetFlag
    path: ../Main/src/EnumHelper.cs
    startLine: 198
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Sets or clears the flag depending on <code data-dev-comment-type="paramref" class="paramref">enabled</code> value.
  example: []
  syntax:
    content: 'public static TEnum SetFlag<TEnum>(this TEnum value, TEnum flag, bool enabled)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    - id: enabled
      type: System.Boolean
      description: Determines whether the flag should be set or cleared.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: '{TEnum}'
      description: "\nBitwise combination of the flag and the value if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">enabled</code> is <code>true</code>;\notherwise, the result is the bits of the value excluding the ones from the flag.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetFlag(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum, enabled As Boolean) As TEnum
  overload: CodeJam.EnumHelper.SetFlag*
  nameWithType.vb: EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum, System.Boolean)
  name.vb: SetFlag(Of TEnum)(TEnum, TEnum, Boolean)
- uid: CodeJam.EnumHelper.GetNameValues``1(System.Boolean)
  commentId: M:CodeJam.EnumHelper.GetNameValues``1(System.Boolean)
  id: GetNameValues``1(System.Boolean)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetNameValues<TEnum>(Boolean)
  nameWithType: EnumHelper.GetNameValues<TEnum>(Boolean)
  fullName: CodeJam.EnumHelper.GetNameValues<TEnum>(System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetNameValues
    path: ../Main/src/EnumHelper.cs
    startLine: 212
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns a dictionary containing the enum names and their values.
  example: []
  syntax:
    content: 'public static IReadOnlyDictionary<string, TEnum> GetNameValues<TEnum>(bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code> the case of the name will be ignored.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,{TEnum}}
      description: Returns a dictionary containing the enum names and their values.
    content.vb: Public Shared Function GetNameValues(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(ignoreCase As Boolean = False) As IReadOnlyDictionary(Of String, TEnum)
  overload: CodeJam.EnumHelper.GetNameValues*
  nameWithType.vb: EnumHelper.GetNameValues(Of TEnum)(Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetNameValues(Of TEnum)(System.Boolean)
  name.vb: GetNameValues(Of TEnum)(Boolean)
- uid: CodeJam.EnumHelper.GetNames``1(System.Boolean)
  commentId: M:CodeJam.EnumHelper.GetNames``1(System.Boolean)
  id: GetNames``1(System.Boolean)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetNames<TEnum>(Boolean)
  nameWithType: EnumHelper.GetNames<TEnum>(Boolean)
  fullName: CodeJam.EnumHelper.GetNames<TEnum>(System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetNames
    path: ../Main/src/EnumHelper.cs
    startLine: 223
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nRetrieves an array of the names of the constants in a specified enumeration.\n"
  example: []
  syntax:
    content: 'public static string[] GetNames<TEnum>(bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code> the case of the name will be ignored.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.String[]
      description: A string array of the names of the constants in enumType.
    content.vb: Public Shared Function GetNames(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(ignoreCase As Boolean = False) As String()
  overload: CodeJam.EnumHelper.GetNames*
  nameWithType.vb: EnumHelper.GetNames(Of TEnum)(Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetNames(Of TEnum)(System.Boolean)
  name.vb: GetNames(Of TEnum)(Boolean)
- uid: CodeJam.EnumHelper.GetValues``1
  commentId: M:CodeJam.EnumHelper.GetValues``1
  id: GetValues``1
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetValues<TEnum>()
  nameWithType: EnumHelper.GetValues<TEnum>()
  fullName: CodeJam.EnumHelper.GetValues<TEnum>()
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetValues
    path: ../Main/src/EnumHelper.cs
    startLine: 233
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nRetrieves an array of the values of the constants in a specified enumeration.\n"
  example: []
  syntax:
    content: 'public static TEnum[] GetValues<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible'
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: '{TEnum}[]'
      description: An array that contains the values of the constants in enumType.
    content.vb: Public Shared Function GetValues(Of TEnum As {Structure, IComparable, IFormattable, IConvertible}) As TEnum()
  overload: CodeJam.EnumHelper.GetValues*
  nameWithType.vb: EnumHelper.GetValues(Of TEnum)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetValues(Of TEnum)()
  name.vb: GetValues(Of TEnum)()
- uid: CodeJam.EnumHelper.GetEnumValues``1
  commentId: M:CodeJam.EnumHelper.GetEnumValues``1
  id: GetEnumValues``1
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetEnumValues<TEnum>()
  nameWithType: EnumHelper.GetEnumValues<TEnum>()
  fullName: CodeJam.EnumHelper.GetEnumValues<TEnum>()
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetEnumValues
    path: ../Main/src/EnumHelper.cs
    startLine: 243
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Gets enum values collection that contains information about enum type and its values.
  example: []
  syntax:
    content: 'public static EnumValues GetEnumValues<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible'
    typeParameters:
    - id: TEnum
      description: Enum type
    return:
      type: CodeJam.EnumValues
      description: The enum values collection.
    content.vb: Public Shared Function GetEnumValues(Of TEnum As {Structure, IComparable, IFormattable, IConvertible}) As EnumValues
  overload: CodeJam.EnumHelper.GetEnumValues*
  nameWithType.vb: EnumHelper.GetEnumValues(Of TEnum)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetEnumValues(Of TEnum)()
  name.vb: GetEnumValues(Of TEnum)()
- uid: CodeJam.EnumHelper.GetEnumValues(System.Type)
  commentId: M:CodeJam.EnumHelper.GetEnumValues(System.Type)
  id: GetEnumValues(System.Type)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetEnumValues(Type)
  nameWithType: EnumHelper.GetEnumValues(Type)
  fullName: CodeJam.EnumHelper.GetEnumValues(System.Type)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetEnumValues
    path: ../Main/src/EnumHelper.cs
    startLine: 251
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns enum values collection that contains information about enum type and its values.
  example: []
  syntax:
    content: public static EnumValues GetEnumValues(Type enumType)
    parameters:
    - id: enumType
      type: System.Type
      description: Type of the enum.
    return:
      type: CodeJam.EnumValues
      description: The enum values collection.
    content.vb: Public Shared Function GetEnumValues(enumType As Type) As EnumValues
  overload: CodeJam.EnumHelper.GetEnumValues*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.EnumHelper.GetEnumValue``1(``0)
  commentId: M:CodeJam.EnumHelper.GetEnumValue``1(``0)
  id: GetEnumValue``1(``0)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetEnumValue<TEnum>(TEnum)
  nameWithType: EnumHelper.GetEnumValue<TEnum>(TEnum)
  fullName: CodeJam.EnumHelper.GetEnumValue<TEnum>(TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetEnumValue
    path: ../Main/src/EnumHelper.cs
    startLine: 258
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Gets metadata about enum value.
  example: []
  syntax:
    content: 'public static EnumValue GetEnumValue<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: Enum value.
    typeParameters:
    - id: TEnum
      description: Enum type
    return:
      type: CodeJam.EnumValue
      description: The enum values collection.
    content.vb: Public Shared Function GetEnumValue(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum) As EnumValue
  overload: CodeJam.EnumHelper.GetEnumValue*
  nameWithType.vb: EnumHelper.GetEnumValue(Of TEnum)(TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetEnumValue(Of TEnum)(TEnum)
  name.vb: GetEnumValue(Of TEnum)(TEnum)
- uid: CodeJam.EnumHelper.GetName``1(``0)
  commentId: M:CodeJam.EnumHelper.GetName``1(``0)
  id: GetName``1(``0)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetName<TEnum>(TEnum)
  nameWithType: EnumHelper.GetName<TEnum>(TEnum)
  fullName: CodeJam.EnumHelper.GetName<TEnum>(TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetName
    path: ../Main/src/EnumHelper.cs
    startLine: 267
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns name of the enum value.
  example: []
  syntax:
    content: 'public static string GetName<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The enum value.
    typeParameters:
    - id: TEnum
      description: Enum type
    return:
      type: System.String
      description: The name of the enum value.
    content.vb: Public Shared Function GetName(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum) As String
  overload: CodeJam.EnumHelper.GetName*
  nameWithType.vb: EnumHelper.GetName(Of TEnum)(TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetName(Of TEnum)(TEnum)
  name.vb: GetName(Of TEnum)(TEnum)
- uid: CodeJam.EnumHelper.GetDisplayName``1(``0)
  commentId: M:CodeJam.EnumHelper.GetDisplayName``1(``0)
  id: GetDisplayName``1(``0)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetDisplayName<TEnum>(TEnum)
  nameWithType: EnumHelper.GetDisplayName<TEnum>(TEnum)
  fullName: CodeJam.EnumHelper.GetDisplayName<TEnum>(TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetDisplayName
    path: ../Main/src/EnumHelper.cs
    startLine: 281
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns description of enum value.\n"
  remarks: "\nReturns description of enum value specified by <xref href=\"System.ComponentModel.DataAnnotations.DisplayAttribute\" data-throw-if-not-resolved=\"false\"></xref>, or <code>null</code> if no attribute\nspecified.\n"
  example: []
  syntax:
    content: 'public static string GetDisplayName<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: Enum value.
    typeParameters:
    - id: TEnum
      description: Enum type
    return:
      type: System.String
    content.vb: Public Shared Function GetDisplayName(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum) As String
  overload: CodeJam.EnumHelper.GetDisplayName*
  nameWithType.vb: EnumHelper.GetDisplayName(Of TEnum)(TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetDisplayName(Of TEnum)(TEnum)
  name.vb: GetDisplayName(Of TEnum)(TEnum)
- uid: CodeJam.EnumHelper.GetDescription``1(``0)
  commentId: M:CodeJam.EnumHelper.GetDescription``1(``0)
  id: GetDescription``1(``0)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetDescription<TEnum>(TEnum)
  nameWithType: EnumHelper.GetDescription<TEnum>(TEnum)
  fullName: CodeJam.EnumHelper.GetDescription<TEnum>(TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetDescription
    path: ../Main/src/EnumHelper.cs
    startLine: 295
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns description of enum value.\n"
  remarks: "\nReturns description of enum value specified by <xref href=\"System.ComponentModel.DataAnnotations.DisplayAttribute\" data-throw-if-not-resolved=\"false\"></xref>, or <code>null</code> if no attribute\nspecified.\n"
  example: []
  syntax:
    content: 'public static string GetDescription<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: Enum value.
    typeParameters:
    - id: TEnum
      description: Enum type
    return:
      type: System.String
    content.vb: Public Shared Function GetDescription(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum) As String
  overload: CodeJam.EnumHelper.GetDescription*
  nameWithType.vb: EnumHelper.GetDescription(Of TEnum)(TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetDescription(Of TEnum)(TEnum)
  name.vb: GetDescription(Of TEnum)(TEnum)
- uid: CodeJam.EnumHelper.GetField``1(``0)
  commentId: M:CodeJam.EnumHelper.GetField``1(``0)
  id: GetField``1(``0)
  parent: CodeJam.EnumHelper
  langs:
  - csharp
  - vb
  name: GetField<TEnum>(TEnum)
  nameWithType: EnumHelper.GetField<TEnum>(TEnum)
  fullName: CodeJam.EnumHelper.GetField<TEnum>(TEnum)
  type: Method
  source:
    remote:
      path: Main/src/EnumHelper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetField
    path: ../Main/src/EnumHelper.cs
    startLine: 308
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nGets field info of enum value.\n"
  example: []
  syntax:
    content: 'public static FieldInfo GetField<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible'
    parameters:
    - id: value
      type: '{TEnum}'
      description: The enum value.
    typeParameters:
    - id: TEnum
      description: The type of the enum.
    return:
      type: System.Reflection.FieldInfo
      description: <xref href="System.Reflection.FieldInfo" data-throw-if-not-resolved="false"></xref> corresponding to <code data-dev-comment-type="paramref" class="paramref">value</code>.
    content.vb: Public Shared Function GetField(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum) As FieldInfo
  overload: CodeJam.EnumHelper.GetField*
  nameWithType.vb: EnumHelper.GetField(Of TEnum)(TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.EnumHelper.GetField(Of TEnum)(TEnum)
  name.vb: GetField(Of TEnum)(TEnum)
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.EnumHelper.IsDefined*
  commentId: Overload:CodeJam.EnumHelper.IsDefined
  isExternal: false
  name: IsDefined
  nameWithType: EnumHelper.IsDefined
  fullName: CodeJam.EnumHelper.IsDefined
- uid: '{TEnum}'
  commentId: '!:TEnum'
  definition: TEnum
  name: TEnum
  nameWithType: TEnum
  fullName: TEnum
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TEnum
  isExternal: false
  name: TEnum
  nameWithType: TEnum
  fullName: TEnum
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CodeJam.EnumHelper.AreFlagsDefined*
  commentId: Overload:CodeJam.EnumHelper.AreFlagsDefined
  isExternal: false
  name: AreFlagsDefined
  nameWithType: EnumHelper.AreFlagsDefined
  fullName: CodeJam.EnumHelper.AreFlagsDefined
- uid: CodeJam.EnumHelper.IsFlagsEnum*
  commentId: Overload:CodeJam.EnumHelper.IsFlagsEnum
  isExternal: false
  name: IsFlagsEnum
  nameWithType: EnumHelper.IsFlagsEnum
  fullName: CodeJam.EnumHelper.IsFlagsEnum
- uid: CodeJam.EnumHelper.IsFlagsEnum``1
  commentId: M:CodeJam.EnumHelper.IsFlagsEnum``1
- uid: CodeJam.EnumHelper.GetFlagsMask*
  commentId: Overload:CodeJam.EnumHelper.GetFlagsMask
  isExternal: false
  name: GetFlagsMask
  nameWithType: EnumHelper.GetFlagsMask
  fullName: CodeJam.EnumHelper.GetFlagsMask
- uid: CodeJam.EnumHelper.TryParse*
  commentId: Overload:CodeJam.EnumHelper.TryParse
  isExternal: false
  name: TryParse
  nameWithType: EnumHelper.TryParse
  fullName: CodeJam.EnumHelper.TryParse
- uid: System.Nullable{{TEnum}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TEnum>
  nameWithType: Nullable<TEnum>
  fullName: System.Nullable<TEnum>
  nameWithType.vb: Nullable(Of TEnum)
  fullName.vb: System.Nullable(Of TEnum)
  name.vb: Nullable(Of TEnum)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper.Parse*
  commentId: Overload:CodeJam.EnumHelper.Parse
  isExternal: false
  name: Parse
  nameWithType: EnumHelper.Parse
  fullName: CodeJam.EnumHelper.Parse
- uid: CodeJam.EnumHelper.IsFlagSet*
  commentId: Overload:CodeJam.EnumHelper.IsFlagSet
  isExternal: false
  name: IsFlagSet
  nameWithType: EnumHelper.IsFlagSet
  fullName: CodeJam.EnumHelper.IsFlagSet
- uid: CodeJam.EnumHelper.IsAnyFlagUnset*
  commentId: Overload:CodeJam.EnumHelper.IsAnyFlagUnset
  isExternal: false
  name: IsAnyFlagUnset
  nameWithType: EnumHelper.IsAnyFlagUnset
  fullName: CodeJam.EnumHelper.IsAnyFlagUnset
- uid: CodeJam.EnumHelper.IsAnyFlagSet*
  commentId: Overload:CodeJam.EnumHelper.IsAnyFlagSet
  isExternal: false
  name: IsAnyFlagSet
  nameWithType: EnumHelper.IsAnyFlagSet
  fullName: CodeJam.EnumHelper.IsAnyFlagSet
- uid: CodeJam.EnumHelper.IsFlagUnset*
  commentId: Overload:CodeJam.EnumHelper.IsFlagUnset
  isExternal: false
  name: IsFlagUnset
  nameWithType: EnumHelper.IsFlagUnset
  fullName: CodeJam.EnumHelper.IsFlagUnset
- uid: CodeJam.EnumHelper.SetFlag*
  commentId: Overload:CodeJam.EnumHelper.SetFlag
  isExternal: false
  name: SetFlag
  nameWithType: EnumHelper.SetFlag
  fullName: CodeJam.EnumHelper.SetFlag
- uid: CodeJam.EnumHelper.ClearFlag*
  commentId: Overload:CodeJam.EnumHelper.ClearFlag
  isExternal: false
  name: ClearFlag
  nameWithType: EnumHelper.ClearFlag
  fullName: CodeJam.EnumHelper.ClearFlag
- uid: CodeJam.EnumHelper.GetNameValues*
  commentId: Overload:CodeJam.EnumHelper.GetNameValues
  isExternal: false
  name: GetNameValues
  nameWithType: EnumHelper.GetNameValues
  fullName: CodeJam.EnumHelper.GetNameValues
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,{TEnum}}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, TEnum>
  nameWithType: IReadOnlyDictionary<String, TEnum>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, TEnum>
  nameWithType.vb: IReadOnlyDictionary(Of String, TEnum)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, TEnum)
  name.vb: IReadOnlyDictionary(Of String, TEnum)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.EnumHelper.GetNames*
  commentId: Overload:CodeJam.EnumHelper.GetNames
  isExternal: false
  name: GetNames
  nameWithType: EnumHelper.GetNames
  fullName: CodeJam.EnumHelper.GetNames
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.EnumHelper.GetValues*
  commentId: Overload:CodeJam.EnumHelper.GetValues
  isExternal: false
  name: GetValues
  nameWithType: EnumHelper.GetValues
  fullName: CodeJam.EnumHelper.GetValues
- uid: '{TEnum}[]'
  name: TEnum[]
  nameWithType: TEnum[]
  fullName: TEnum[]
  nameWithType.vb: TEnum()
  fullName.vb: TEnum()
  name.vb: TEnum()
  spec.csharp:
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.EnumHelper.GetEnumValues*
  commentId: Overload:CodeJam.EnumHelper.GetEnumValues
  isExternal: false
  name: GetEnumValues
  nameWithType: EnumHelper.GetEnumValues
  fullName: CodeJam.EnumHelper.GetEnumValues
- uid: CodeJam.EnumValues
  commentId: T:CodeJam.EnumValues
  parent: CodeJam
  isExternal: false
  name: EnumValues
  nameWithType: EnumValues
  fullName: CodeJam.EnumValues
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: CodeJam.EnumHelper.GetEnumValue*
  commentId: Overload:CodeJam.EnumHelper.GetEnumValue
  isExternal: false
  name: GetEnumValue
  nameWithType: EnumHelper.GetEnumValue
  fullName: CodeJam.EnumHelper.GetEnumValue
- uid: CodeJam.EnumValue
  commentId: T:CodeJam.EnumValue
  parent: CodeJam
  isExternal: false
  name: EnumValue
  nameWithType: EnumValue
  fullName: CodeJam.EnumValue
- uid: CodeJam.EnumHelper.GetName*
  commentId: Overload:CodeJam.EnumHelper.GetName
  isExternal: false
  name: GetName
  nameWithType: EnumHelper.GetName
  fullName: CodeJam.EnumHelper.GetName
- uid: System.ComponentModel.DataAnnotations.DisplayAttribute
  commentId: T:System.ComponentModel.DataAnnotations.DisplayAttribute
- uid: CodeJam.EnumHelper.GetDisplayName*
  commentId: Overload:CodeJam.EnumHelper.GetDisplayName
  isExternal: false
  name: GetDisplayName
  nameWithType: EnumHelper.GetDisplayName
  fullName: CodeJam.EnumHelper.GetDisplayName
- uid: CodeJam.EnumHelper.GetDescription*
  commentId: Overload:CodeJam.EnumHelper.GetDescription
  isExternal: false
  name: GetDescription
  nameWithType: EnumHelper.GetDescription
  fullName: CodeJam.EnumHelper.GetDescription
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: CodeJam.EnumHelper.GetField*
  commentId: Overload:CodeJam.EnumHelper.GetField
  isExternal: false
  name: GetField
  nameWithType: EnumHelper.GetField
  fullName: CodeJam.EnumHelper.GetField
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
