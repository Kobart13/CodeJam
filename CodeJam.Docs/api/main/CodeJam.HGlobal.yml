### YamlMime:ManagedReference
items:
- uid: CodeJam.HGlobal
  commentId: T:CodeJam.HGlobal
  id: HGlobal
  parent: CodeJam
  children:
  - CodeJam.HGlobal.Create(System.Int32)
  - CodeJam.HGlobal.Create``1
  - CodeJam.HGlobal.Create``1(System.Int32)
  langs:
  - csharp
  - vb
  name: HGlobal
  nameWithType: HGlobal
  fullName: CodeJam.HGlobal
  type: Class
  source:
    remote:
      path: Main/src/Utilities/HGlobal.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HGlobal
    path: ../Main/src/Utilities/HGlobal.cs
    startLine: 7
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nHGlobal wrapper.\n"
  example: []
  syntax:
    content: public static class HGlobal
    content.vb: Public Module HGlobal
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.HGlobal.Create(System.Int32)
  commentId: M:CodeJam.HGlobal.Create(System.Int32)
  id: Create(System.Int32)
  parent: CodeJam.HGlobal
  langs:
  - csharp
  - vb
  name: Create(Int32)
  nameWithType: HGlobal.Create(Int32)
  fullName: CodeJam.HGlobal.Create(System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Utilities/HGlobal.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Utilities/HGlobal.cs
    startLine: 15
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCreate a new HGlobal with given size.\n"
  example: []
  syntax:
    content: public static HGlobalScope Create(int cb)
    parameters:
    - id: cb
      type: System.Int32
      description: The required number of bytes in memory.
    return:
      type: CodeJam.HGlobalScope
      description: <xref href="CodeJam.HGlobalScope" data-throw-if-not-resolved="false"></xref> instance
    content.vb: Public Shared Function Create(cb As Integer) As HGlobalScope
  overload: CodeJam.HGlobal.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.HGlobal.Create``1
  commentId: M:CodeJam.HGlobal.Create``1
  id: Create``1
  parent: CodeJam.HGlobal
  langs:
  - csharp
  - vb
  name: Create<T>()
  nameWithType: HGlobal.Create<T>()
  fullName: CodeJam.HGlobal.Create<T>()
  type: Method
  source:
    remote:
      path: Main/src/Utilities/HGlobal.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Utilities/HGlobal.cs
    startLine: 21
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCreate a new HGlobal with sizeof(<typeparam name=\"T\"></typeparam>).\n"
  example: []
  syntax:
    content: 'public static HGlobalScope<T> Create<T>()where T : struct'
    typeParameters:
    - id: T
    return:
      type: CodeJam.HGlobalScope{{T}}
      description: <xref href="CodeJam.HGlobalScope%601" data-throw-if-not-resolved="false"></xref> instance
    content.vb: Public Shared Function Create(Of T As Structure) As HGlobalScope(Of T)
  overload: CodeJam.HGlobal.Create*
  nameWithType.vb: HGlobal.Create(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.HGlobal.Create(Of T)()
  name.vb: Create(Of T)()
- uid: CodeJam.HGlobal.Create``1(System.Int32)
  commentId: M:CodeJam.HGlobal.Create``1(System.Int32)
  id: Create``1(System.Int32)
  parent: CodeJam.HGlobal
  langs:
  - csharp
  - vb
  name: Create<T>(Int32)
  nameWithType: HGlobal.Create<T>(Int32)
  fullName: CodeJam.HGlobal.Create<T>(System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Utilities/HGlobal.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Utilities/HGlobal.cs
    startLine: 28
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCreate a new HGlobal with given size.\n"
  example: []
  syntax:
    content: 'public static HGlobalScope<T> Create<T>(int cb)where T : struct'
    parameters:
    - id: cb
      type: System.Int32
      description: The required number of bytes in memory.
    typeParameters:
    - id: T
    return:
      type: CodeJam.HGlobalScope{{T}}
      description: <xref href="CodeJam.HGlobalScope%601" data-throw-if-not-resolved="false"></xref> instance
    content.vb: Public Shared Function Create(Of T As Structure)(cb As Integer) As HGlobalScope(Of T)
  overload: CodeJam.HGlobal.Create*
  nameWithType.vb: HGlobal.Create(Of T)(Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.HGlobal.Create(Of T)(System.Int32)
  name.vb: Create(Of T)(Int32)
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.HGlobalScope
  commentId: T:CodeJam.HGlobalScope
  parent: CodeJam
  isExternal: false
  name: HGlobalScope
  nameWithType: HGlobalScope
  fullName: CodeJam.HGlobalScope
- uid: CodeJam.HGlobal.Create*
  commentId: Overload:CodeJam.HGlobal.Create
  isExternal: false
  name: Create
  nameWithType: HGlobal.Create
  fullName: CodeJam.HGlobal.Create
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CodeJam.HGlobalScope`1
  commentId: T:CodeJam.HGlobalScope`1
  isExternal: false
  name: HGlobalScope<T>
  nameWithType: HGlobalScope<T>
  fullName: CodeJam.HGlobalScope<T>
  nameWithType.vb: HGlobalScope(Of T)
  fullName.vb: CodeJam.HGlobalScope(Of T)
  name.vb: HGlobalScope(Of T)
  spec.csharp:
  - uid: CodeJam.HGlobalScope`1
    name: HGlobalScope
    nameWithType: HGlobalScope
    fullName: CodeJam.HGlobalScope
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.HGlobalScope`1
    name: HGlobalScope
    nameWithType: HGlobalScope
    fullName: CodeJam.HGlobalScope
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.HGlobalScope{{T}}
  commentId: T:CodeJam.HGlobalScope{``0}
  parent: CodeJam
  definition: CodeJam.HGlobalScope`1
  name: HGlobalScope<T>
  nameWithType: HGlobalScope<T>
  fullName: CodeJam.HGlobalScope<T>
  nameWithType.vb: HGlobalScope(Of T)
  fullName.vb: CodeJam.HGlobalScope(Of T)
  name.vb: HGlobalScope(Of T)
  spec.csharp:
  - uid: CodeJam.HGlobalScope`1
    name: HGlobalScope
    nameWithType: HGlobalScope
    fullName: CodeJam.HGlobalScope
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.HGlobalScope`1
    name: HGlobalScope
    nameWithType: HGlobalScope
    fullName: CodeJam.HGlobalScope
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
