### YamlMime:ManagedReference
items:
- uid: CodeJam.Expressions.ExpressionExtensions
  commentId: T:CodeJam.Expressions.ExpressionExtensions
  id: ExpressionExtensions
  parent: CodeJam.Expressions
  children:
  - CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  - CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - CodeJam.Expressions.ExpressionExtensions.GetConstructor(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetDebugView(System.Linq.Expressions.Expression)
  - CodeJam.Expressions.ExpressionExtensions.GetField(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetMemberInfo(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetMembersInfo(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetMethod(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetMethodName(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetProperty(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.GetPropertyName(System.Linq.Expressions.LambdaExpression)
  - CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
  - CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])
  - CodeJam.Expressions.ExpressionExtensions.Transform(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  - CodeJam.Expressions.ExpressionExtensions.Transform``1(``0,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  - CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression,System.Action{System.Linq.Expressions.Expression})
  - CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  langs:
  - csharp
  - vb
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: CodeJam.Expressions.ExpressionExtensions
  type: Class
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExpressionExtensions
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 15
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\n<xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> Extensions.\n"
  example: []
  syntax:
    content: public static class ExpressionExtensions
    content.vb: Public Module ExpressionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression,System.Action{System.Linq.Expressions.Expression})
  commentId: M:CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression,System.Action{System.Linq.Expressions.Expression})
  id: Visit(System.Linq.Expressions.Expression,System.Action{System.Linq.Expressions.Expression})
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Visit(Expression, Action<Expression>)
  nameWithType: ExpressionExtensions.Visit(Expression, Action<Expression>)
  fullName: CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression, System.Action<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Visit
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 34
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nVisits expression tree.\n"
  example: []
  syntax:
    content: public static void Visit(this Expression expr, Action<Expression> func)
    parameters:
    - id: expr
      type: System.Linq.Expressions.Expression
      description: <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to visit.
    - id: func
      type: System.Action{System.Linq.Expressions.Expression}
      description: Visit action.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Visit(expr As Expression, func As Action(Of Expression))
  overload: CodeJam.Expressions.ExpressionExtensions.Visit*
  nameWithType.vb: ExpressionExtensions.Visit(Expression, Action(Of Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression, System.Action(Of System.Linq.Expressions.Expression))
  name.vb: Visit(Expression, Action(Of Expression))
- uid: CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  commentId: M:CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  id: Visit(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Visit(Expression, Func<Expression, Boolean>)
  nameWithType: ExpressionExtensions.Visit(Expression, Func<Expression, Boolean>)
  fullName: CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression, System.Func<System.Linq.Expressions.Expression, System.Boolean>)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Visit
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 347
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nVisits expression tree.\n"
  example: []
  syntax:
    content: public static void Visit(this Expression expr, Func<Expression, bool> func)
    parameters:
    - id: expr
      type: System.Linq.Expressions.Expression
      description: <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to visit.
    - id: func
      type: System.Func{System.Linq.Expressions.Expression,System.Boolean}
      description: Visit function. Return true to stop.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Visit(expr As Expression, func As Func(Of Expression, Boolean))
  overload: CodeJam.Expressions.ExpressionExtensions.Visit*
  nameWithType.vb: ExpressionExtensions.Visit(Expression, Func(Of Expression, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Expressions.ExpressionExtensions.Visit(System.Linq.Expressions.Expression, System.Func(Of System.Linq.Expressions.Expression, System.Boolean))
  name.vb: Visit(Expression, Func(Of Expression, Boolean))
- uid: CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Find(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Find(Expression, Expression)
  nameWithType: ExpressionExtensions.Find(Expression, Expression)
  fullName: CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Find
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 674
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nFinds an expression in expression tree.\n"
  example: []
  syntax:
    content: public static Expression Find(this Expression expr, Expression exprToFind)
    parameters:
    - id: expr
      type: System.Linq.Expressions.Expression
      description: <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to VisitInternal.
    - id: exprToFind
      type: System.Linq.Expressions.Expression
      description: Expression to find.
    return:
      type: System.Linq.Expressions.Expression
      description: Found expression or null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Find(expr As Expression, exprToFind As Expression) As Expression
  overload: CodeJam.Expressions.ExpressionExtensions.Find*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  commentId: M:CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  id: Find(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Find(Expression, Func<Expression, Boolean>)
  nameWithType: ExpressionExtensions.Find(Expression, Func<Expression, Boolean>)
  fullName: CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression, System.Func<System.Linq.Expressions.Expression, System.Boolean>)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Find
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 688
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nFinds and expression in expression tree.\n"
  example: []
  syntax:
    content: public static Expression Find(this Expression expr, Func<Expression, bool> func)
    parameters:
    - id: expr
      type: System.Linq.Expressions.Expression
      description: <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to VisitInternal.
    - id: func
      type: System.Func{System.Linq.Expressions.Expression,System.Boolean}
      description: Find function. Return true if expression is found.
    return:
      type: System.Linq.Expressions.Expression
      description: Found expression or null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Find(expr As Expression, func As Func(Of Expression, Boolean)) As Expression
  overload: CodeJam.Expressions.ExpressionExtensions.Find*
  nameWithType.vb: ExpressionExtensions.Find(Expression, Func(Of Expression, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression, System.Func(Of System.Linq.Expressions.Expression, System.Boolean))
  name.vb: Find(Expression, Func(Of Expression, Boolean))
- uid: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
  id: ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: ReplaceParameters(LambdaExpression, Expression)
  nameWithType: ExpressionExtensions.ReplaceParameters(LambdaExpression, Expression)
  fullName: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ReplaceParameters
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 953
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReplaces lambda body parameter and returns modified body.\n"
  example: []
  syntax:
    content: public static Expression ReplaceParameters(this LambdaExpression lambda, Expression exprToReplaceParameter)
    parameters:
    - id: lambda
      type: System.Linq.Expressions.LambdaExpression
      description: Original lambda.
    - id: exprToReplaceParameter
      type: System.Linq.Expressions.Expression
      description: An expression to replace lambda pameter.
    return:
      type: System.Linq.Expressions.Expression
      description: Modified body.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReplaceParameters(lambda As LambdaExpression, exprToReplaceParameter As Expression) As Expression
  overload: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])
  commentId: M:CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])
  id: ReplaceParameters(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: ReplaceParameters(LambdaExpression, Expression[])
  nameWithType: ExpressionExtensions.ReplaceParameters(LambdaExpression, Expression[])
  fullName: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ReplaceParameters
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 972
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReplaces lambda body parameters and returns modified body.\n"
  example: []
  syntax:
    content: public static Expression ReplaceParameters(this LambdaExpression lambda, params Expression[] exprToReplaceParameter)
    parameters:
    - id: lambda
      type: System.Linq.Expressions.LambdaExpression
      description: Original lambda.
    - id: exprToReplaceParameter
      type: System.Linq.Expressions.Expression[]
      description: Expressions to replace lambda pameters.
    return:
      type: System.Linq.Expressions.Expression
      description: Modified body.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReplaceParameters(lambda As LambdaExpression, ParamArray exprToReplaceParameter As Expression()) As Expression
  overload: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters*
  nameWithType.vb: ExpressionExtensions.ReplaceParameters(LambdaExpression, Expression())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters(System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression())
  name.vb: ReplaceParameters(LambdaExpression, Expression())
- uid: CodeJam.Expressions.ExpressionExtensions.Transform``1(``0,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  commentId: M:CodeJam.Expressions.ExpressionExtensions.Transform``1(``0,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  id: Transform``1(``0,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Transform<T>(T, Func<Expression, Expression>)
  nameWithType: ExpressionExtensions.Transform<T>(T, Func<Expression, Expression>)
  fullName: CodeJam.Expressions.ExpressionExtensions.Transform<T>(T, System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Transform
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 1030
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nTranforms original expression.\n"
  example: []
  syntax:
    content: 'public static T Transform<T>(this T expr, Func<Expression, Expression> func)where T : LambdaExpression'
    parameters:
    - id: expr
      type: '{T}'
      description: Expression to transform.
    - id: func
      type: System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
      description: Transform function.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: Modified expression.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(Of T As LambdaExpression)(expr As T, func As Func(Of Expression, Expression)) As T
  overload: CodeJam.Expressions.ExpressionExtensions.Transform*
  nameWithType.vb: ExpressionExtensions.Transform(Of T)(T, Func(Of Expression, Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Expressions.ExpressionExtensions.Transform(Of T)(T, System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression))
  name.vb: Transform(Of T)(T, Func(Of Expression, Expression))
- uid: CodeJam.Expressions.ExpressionExtensions.Transform(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  commentId: M:CodeJam.Expressions.ExpressionExtensions.Transform(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  id: Transform(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Transform(Expression, Func<Expression, Expression>)
  nameWithType: ExpressionExtensions.Transform(Expression, Func<Expression, Expression>)
  fullName: CodeJam.Expressions.ExpressionExtensions.Transform(System.Linq.Expressions.Expression, System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Transform
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 1045
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nTranforms original expression.\n"
  example: []
  syntax:
    content: public static Expression Transform(this Expression expr, Func<Expression, Expression> func)
    parameters:
    - id: expr
      type: System.Linq.Expressions.Expression
      description: Expression to transform.
    - id: func
      type: System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
      description: Transform function.
    return:
      type: System.Linq.Expressions.Expression
      description: Modified expression.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(expr As Expression, func As Func(Of Expression, Expression)) As Expression
  overload: CodeJam.Expressions.ExpressionExtensions.Transform*
  nameWithType.vb: ExpressionExtensions.Transform(Expression, Func(Of Expression, Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Expressions.ExpressionExtensions.Transform(System.Linq.Expressions.Expression, System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression))
  name.vb: Transform(Expression, Func(Of Expression, Expression))
- uid: CodeJam.Expressions.ExpressionExtensions.GetDebugView(System.Linq.Expressions.Expression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetDebugView(System.Linq.Expressions.Expression)
  id: GetDebugView(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetDebugView(Expression)
  nameWithType: ExpressionExtensions.GetDebugView(Expression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetDebugView(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetDebugView
    path: ../Main/src/Expressions/ExpressionExtensions.cs
    startLine: 1339
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nGets the DebugView internal property value of provided expression.\n"
  example: []
  syntax:
    content: public static string GetDebugView(this Expression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: Expression to get DebugView.
    return:
      type: System.String
      description: DebugView value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDebugView(expression As Expression) As String
  overload: CodeJam.Expressions.ExpressionExtensions.GetDebugView*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetMemberInfo(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetMemberInfo(System.Linq.Expressions.LambdaExpression)
  id: GetMemberInfo(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetMemberInfo(LambdaExpression)
  nameWithType: ExpressionExtensions.GetMemberInfo(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMemberInfo(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMemberInfo
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 25
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nGets the <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static MemberInfo GetMemberInfo(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.Reflection.MemberInfo
      description: "\nThe <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMemberInfo(expression As LambdaExpression) As MemberInfo
  overload: CodeJam.Expressions.ExpressionExtensions.GetMemberInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetProperty(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetProperty(System.Linq.Expressions.LambdaExpression)
  id: GetProperty(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetProperty(LambdaExpression)
  nameWithType: ExpressionExtensions.GetProperty(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetProperty(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetProperty
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 53
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReturns the property.\n"
  example: []
  syntax:
    content: public static PropertyInfo GetProperty(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.Reflection.PropertyInfo
      description: "\nThe <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperty(expression As LambdaExpression) As PropertyInfo
  overload: CodeJam.Expressions.ExpressionExtensions.GetProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetField(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetField(System.Linq.Expressions.LambdaExpression)
  id: GetField(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetField(LambdaExpression)
  nameWithType: ExpressionExtensions.GetField(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetField(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetField
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 64
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReturns the field.\n"
  example: []
  syntax:
    content: public static FieldInfo GetField(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.Reflection.FieldInfo
      description: "\nThe <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetField(expression As LambdaExpression) As FieldInfo
  overload: CodeJam.Expressions.ExpressionExtensions.GetField*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetConstructor(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetConstructor(System.Linq.Expressions.LambdaExpression)
  id: GetConstructor(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetConstructor(LambdaExpression)
  nameWithType: ExpressionExtensions.GetConstructor(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetConstructor(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetConstructor
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 75
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReturns the constructor.\n"
  example: []
  syntax:
    content: public static ConstructorInfo GetConstructor(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.Reflection.ConstructorInfo
      description: "\nThe <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetConstructor(expression As LambdaExpression) As ConstructorInfo
  overload: CodeJam.Expressions.ExpressionExtensions.GetConstructor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetMethod(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetMethod(System.Linq.Expressions.LambdaExpression)
  id: GetMethod(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetMethod(LambdaExpression)
  nameWithType: ExpressionExtensions.GetMethod(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMethod(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMethod
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 86
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReturns the method.\n"
  example: []
  syntax:
    content: public static MethodInfo GetMethod(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.Reflection.MethodInfo
      description: "\nThe <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethod(expression As LambdaExpression) As MethodInfo
  overload: CodeJam.Expressions.ExpressionExtensions.GetMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetPropertyName(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetPropertyName(System.Linq.Expressions.LambdaExpression)
  id: GetPropertyName(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyName(LambdaExpression)
  nameWithType: ExpressionExtensions.GetPropertyName(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetPropertyName(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetPropertyName
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 104
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReturns a name of the property.\n"
  example: []
  syntax:
    content: public static string GetPropertyName(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.String
      description: "\nA name of the property.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyName(expression As LambdaExpression) As String
  overload: CodeJam.Expressions.ExpressionExtensions.GetPropertyName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName(System.Linq.Expressions.LambdaExpression)
  id: GetFullPropertyName(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetFullPropertyName(LambdaExpression)
  nameWithType: ExpressionExtensions.GetFullPropertyName(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetFullPropertyName
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 115
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReturns a composited name of the property.\n"
  example: []
  syntax:
    content: public static string GetFullPropertyName(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.String
      description: "\nA composited name of the property.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFullPropertyName(expression As LambdaExpression) As String
  overload: CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetMethodName(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetMethodName(System.Linq.Expressions.LambdaExpression)
  id: GetMethodName(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetMethodName(LambdaExpression)
  nameWithType: ExpressionExtensions.GetMethodName(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMethodName(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMethodName
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 126
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nReturns a name of the method.\n"
  example: []
  syntax:
    content: public static string GetMethodName(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.String
      description: "\nA name of the method.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethodName(expression As LambdaExpression) As String
  overload: CodeJam.Expressions.ExpressionExtensions.GetMethodName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Expressions.ExpressionExtensions.GetMembersInfo(System.Linq.Expressions.LambdaExpression)
  commentId: M:CodeJam.Expressions.ExpressionExtensions.GetMembersInfo(System.Linq.Expressions.LambdaExpression)
  id: GetMembersInfo(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: CodeJam.Expressions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetMembersInfo(LambdaExpression)
  nameWithType: ExpressionExtensions.GetMembersInfo(LambdaExpression)
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMembersInfo(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Main/src/Expressions/ExpressionExtensions.GetMembers.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMembersInfo
    path: ../Main/src/Expressions/ExpressionExtensions.GetMembers.cs
    startLine: 155
  assemblies:
  - CodeJam
  namespace: CodeJam.Expressions
  summary: "\nGets the <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static MemberInfo[] GetMembersInfo(this LambdaExpression expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: The expression to analyze.
    return:
      type: System.Reflection.MemberInfo[]
      description: "\nThe <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMembersInfo(expression As LambdaExpression) As MemberInfo()
  overload: CodeJam.Expressions.ExpressionExtensions.GetMembersInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: CodeJam.Expressions
  commentId: N:CodeJam.Expressions
  isExternal: false
  name: CodeJam.Expressions
  nameWithType: CodeJam.Expressions
  fullName: CodeJam.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Expressions.ExpressionExtensions.Visit*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.Visit
  isExternal: false
  name: Visit
  nameWithType: ExpressionExtensions.Visit
  fullName: CodeJam.Expressions.ExpressionExtensions.Visit
- uid: System.Action{System.Linq.Expressions.Expression}
  commentId: T:System.Action{System.Linq.Expressions.Expression}
  parent: System
  definition: System.Action`1
  name: Action<Expression>
  nameWithType: Action<Expression>
  fullName: System.Action<System.Linq.Expressions.Expression>
  nameWithType.vb: Action(Of Expression)
  fullName.vb: System.Action(Of System.Linq.Expressions.Expression)
  name.vb: Action(Of Expression)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Linq.Expressions.Expression,System.Boolean}
  commentId: T:System.Func{System.Linq.Expressions.Expression,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Expression, Boolean>
  nameWithType: Func<Expression, Boolean>
  fullName: System.Func<System.Linq.Expressions.Expression, System.Boolean>
  nameWithType.vb: Func(Of Expression, Boolean)
  fullName.vb: System.Func(Of System.Linq.Expressions.Expression, System.Boolean)
  name.vb: Func(Of Expression, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Expressions.ExpressionExtensions.Find*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.Find
  isExternal: false
  name: Find
  nameWithType: ExpressionExtensions.Find
  fullName: CodeJam.Expressions.ExpressionExtensions.Find
- uid: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.ReplaceParameters
  isExternal: false
  name: ReplaceParameters
  nameWithType: ExpressionExtensions.ReplaceParameters
  fullName: CodeJam.Expressions.ExpressionExtensions.ReplaceParameters
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression[]
  name: Expression[]
  nameWithType: Expression[]
  fullName: System.Linq.Expressions.Expression[]
  nameWithType.vb: Expression()
  fullName.vb: System.Linq.Expressions.Expression()
  name.vb: Expression()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.Expressions.ExpressionExtensions.Transform*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.Transform
  isExternal: false
  name: Transform
  nameWithType: ExpressionExtensions.Transform
  fullName: CodeJam.Expressions.ExpressionExtensions.Transform
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
  commentId: T:System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
  parent: System
  definition: System.Func`2
  name: Func<Expression, Expression>
  nameWithType: Func<Expression, Expression>
  fullName: System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>
  nameWithType.vb: Func(Of Expression, Expression)
  fullName.vb: System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  name.vb: Func(Of Expression, Expression)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Expressions.ExpressionExtensions.GetDebugView*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetDebugView
  isExternal: false
  name: GetDebugView
  nameWithType: ExpressionExtensions.GetDebugView
  fullName: CodeJam.Expressions.ExpressionExtensions.GetDebugView
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: CodeJam.Expressions.ExpressionExtensions.GetMemberInfo*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetMemberInfo
  isExternal: false
  name: GetMemberInfo
  nameWithType: ExpressionExtensions.GetMemberInfo
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMemberInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: CodeJam.Expressions.ExpressionExtensions.GetProperty*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetProperty
  isExternal: false
  name: GetProperty
  nameWithType: ExpressionExtensions.GetProperty
  fullName: CodeJam.Expressions.ExpressionExtensions.GetProperty
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: CodeJam.Expressions.ExpressionExtensions.GetField*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetField
  isExternal: false
  name: GetField
  nameWithType: ExpressionExtensions.GetField
  fullName: CodeJam.Expressions.ExpressionExtensions.GetField
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: CodeJam.Expressions.ExpressionExtensions.GetConstructor*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetConstructor
  isExternal: false
  name: GetConstructor
  nameWithType: ExpressionExtensions.GetConstructor
  fullName: CodeJam.Expressions.ExpressionExtensions.GetConstructor
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: CodeJam.Expressions.ExpressionExtensions.GetMethod*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetMethod
  isExternal: false
  name: GetMethod
  nameWithType: ExpressionExtensions.GetMethod
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMethod
- uid: CodeJam.Expressions.ExpressionExtensions.GetPropertyName*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetPropertyName
  isExternal: false
  name: GetPropertyName
  nameWithType: ExpressionExtensions.GetPropertyName
  fullName: CodeJam.Expressions.ExpressionExtensions.GetPropertyName
- uid: CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName
  isExternal: false
  name: GetFullPropertyName
  nameWithType: ExpressionExtensions.GetFullPropertyName
  fullName: CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName
- uid: CodeJam.Expressions.ExpressionExtensions.GetMethodName*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetMethodName
  isExternal: false
  name: GetMethodName
  nameWithType: ExpressionExtensions.GetMethodName
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMethodName
- uid: CodeJam.Expressions.ExpressionExtensions.GetMembersInfo*
  commentId: Overload:CodeJam.Expressions.ExpressionExtensions.GetMembersInfo
  isExternal: false
  name: GetMembersInfo
  nameWithType: ExpressionExtensions.GetMembersInfo
  fullName: CodeJam.Expressions.ExpressionExtensions.GetMembersInfo
- uid: System.Reflection.MemberInfo[]
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  nameWithType.vb: MemberInfo()
  fullName.vb: System.Reflection.MemberInfo()
  name.vb: MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
