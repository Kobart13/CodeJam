### YamlMime:ManagedReference
items:
- uid: CodeJam.Ranges.CompositeRange`1
  commentId: T:CodeJam.Ranges.CompositeRange`1
  id: CompositeRange`1
  parent: CodeJam.Ranges
  children:
  - CodeJam.Ranges.CompositeRange`1.#ctor(CodeJam.Ranges.Range{`0})
  - CodeJam.Ranges.CompositeRange`1.#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges
  - CodeJam.Ranges.CompositeRange`1.ContainingRange
  - CodeJam.Ranges.CompositeRange`1.Empty
  - CodeJam.Ranges.CompositeRange`1.Equals(CodeJam.Ranges.CompositeRange{`0})
  - CodeJam.Ranges.CompositeRange`1.Equals(System.Object)
  - CodeJam.Ranges.CompositeRange`1.GetHashCode
  - CodeJam.Ranges.CompositeRange`1.Infinite
  - CodeJam.Ranges.CompositeRange`1.IsEmpty
  - CodeJam.Ranges.CompositeRange`1.IsMerged
  - CodeJam.Ranges.CompositeRange`1.IsNotEmpty
  - CodeJam.Ranges.CompositeRange`1.Merge
  - CodeJam.Ranges.CompositeRange`1.op_Equality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  - CodeJam.Ranges.CompositeRange`1.op_Inequality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  - CodeJam.Ranges.CompositeRange`1.SubRanges
  - CodeJam.Ranges.CompositeRange`1.ToString
  - CodeJam.Ranges.CompositeRange`1.ToString(System.IFormatProvider)
  - CodeJam.Ranges.CompositeRange`1.ToString(System.String)
  - CodeJam.Ranges.CompositeRange`1.ToString(System.String,System.IFormatProvider)
  langs:
  - csharp
  - vb
  name: CompositeRange<T>
  nameWithType: CompositeRange<T>
  fullName: CodeJam.Ranges.CompositeRange<T>
  type: Struct
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CompositeRange
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
    startLine: 11
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Describes a composite range that contains some subranges.
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct CompositeRange<T> : IEquatable<CompositeRange<T>>, IFormattable, ICompositeRange<T>
    typeParameters:
    - id: T
      description: "\nThe type of the value. Should implement <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <Serializable>

      Public Structure CompositeRange(Of T)
          Implements IEquatable(Of CompositeRange(Of T)), IFormattable, ICompositeRange(Of T)
  implements:
  - System.IEquatable{CodeJam.Ranges.CompositeRange`1}
  - System.IFormattable
  - CodeJam.Ranges.ICompositeRange{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - CodeJam.Ranges.CompositeRange`1.CodeJam.NullableHelper.AsNullable``1
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2({TKey2})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(System.Func{{T},{T}},System.Func{{T},{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(System.Func{{T},{T}},System.Func{{T},{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{{T},{T2}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{{T},{T2}},System.Func{{T},{T2}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1({T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1({T},{T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.Range{{T},{TKey2}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1({T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1({T},{T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.Range{{T},{TKey2}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``2({TCompositeRange})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1({T},{T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{{T},{TKey2}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2({TCompositeRange})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1({T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1({T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``1({T},{T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.Range{{T},{TKey2}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``2({TCompositeRange})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1({T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1({T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.RangeBoundaryTo{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``1({T},{T})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.Range{{T},{TKey2}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``2({TCompositeRange})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Strings.StringExtensions.ToInvariantString``1
  - CodeJam.Ranges.CompositeRange`1.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: CompositeRange(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T)
  name.vb: CompositeRange(Of T)
- uid: CodeJam.Ranges.CompositeRange`1.op_Equality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  commentId: M:CodeJam.Ranges.CompositeRange`1.op_Equality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  id: op_Equality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: Equality(CompositeRange<T>, CompositeRange<T>)
  nameWithType: CompositeRange<T>.Equality(CompositeRange<T>, CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRange<T>.Equality(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.CompositeRange<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Equality
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 68
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator ==.
  example: []
  syntax:
    content: public static bool operator ==(CompositeRange<T> range1, CompositeRange<T> range2)
    parameters:
    - id: range1
      type: CodeJam.Ranges.CompositeRange`1
      description: The range1.
    - id: range2
      type: CodeJam.Ranges.CompositeRange`1
      description: The range2.
    return:
      type: System.Boolean
      description: <code>True</code>, if ranges are equal.
    content.vb: Public Shared Operator =(range1 As CompositeRange(Of T), range2 As CompositeRange(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRange`1.op_Equality*
  nameWithType.vb: CompositeRange(Of T).Equality(CompositeRange(Of T), CompositeRange(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Equality(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.CompositeRange(Of T))
  name.vb: Equality(CompositeRange(Of T), CompositeRange(Of T))
- uid: CodeJam.Ranges.CompositeRange`1.op_Inequality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  commentId: M:CodeJam.Ranges.CompositeRange`1.op_Inequality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  id: op_Inequality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: Inequality(CompositeRange<T>, CompositeRange<T>)
  nameWithType: CompositeRange<T>.Inequality(CompositeRange<T>, CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRange<T>.Inequality(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.CompositeRange<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Inequality
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 75
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator !=.
  example: []
  syntax:
    content: public static bool operator !=(CompositeRange<T> range1, CompositeRange<T> range2)
    parameters:
    - id: range1
      type: CodeJam.Ranges.CompositeRange`1
      description: The range1.
    - id: range2
      type: CodeJam.Ranges.CompositeRange`1
      description: The range2.
    return:
      type: System.Boolean
      description: <code>True</code>, if ranges are not equal.
    content.vb: Public Shared Operator <>(range1 As CompositeRange(Of T), range2 As CompositeRange(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRange`1.op_Inequality*
  nameWithType.vb: CompositeRange(Of T).Inequality(CompositeRange(Of T), CompositeRange(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Inequality(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.CompositeRange(Of T))
  name.vb: Inequality(CompositeRange(Of T), CompositeRange(Of T))
- uid: CodeJam.Ranges.CompositeRange`1.Empty
  commentId: F:CodeJam.Ranges.CompositeRange`1.Empty
  id: Empty
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: CompositeRange<T>.Empty
  fullName: CodeJam.Ranges.CompositeRange<T>.Empty
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Empty
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 139
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Empty range, ∅
  example: []
  syntax:
    content: public static readonly CompositeRange<T> Empty
    return:
      type: CodeJam.Ranges.CompositeRange`1
    content.vb: Public Shared ReadOnly Empty As CompositeRange(Of T)
  nameWithType.vb: CompositeRange(Of T).Empty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Empty
- uid: CodeJam.Ranges.CompositeRange`1.Infinite
  commentId: F:CodeJam.Ranges.CompositeRange`1.Infinite
  id: Infinite
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: Infinite
  nameWithType: CompositeRange<T>.Infinite
  fullName: CodeJam.Ranges.CompositeRange<T>.Infinite
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Infinite
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 142
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Infinite range, (-∞..+∞)
  example: []
  syntax:
    content: public static readonly CompositeRange<T> Infinite
    return:
      type: CodeJam.Ranges.CompositeRange`1
    content.vb: Public Shared ReadOnly Infinite As CompositeRange(Of T)
  nameWithType.vb: CompositeRange(Of T).Infinite
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Infinite
- uid: CodeJam.Ranges.CompositeRange`1.#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0}})
  commentId: M:CodeJam.Ranges.CompositeRange`1.#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0}})
  id: '#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0}})'
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: CompositeRange(IEnumerable<Range<T>>)
  nameWithType: CompositeRange<T>.CompositeRange(IEnumerable<Range<T>>)
  fullName: CodeJam.Ranges.CompositeRange<T>.CompositeRange(System.Collections.Generic.IEnumerable<CodeJam.Ranges.Range<T>>)
  type: Constructor
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 158
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates instance of <xref href="CodeJam.Ranges.CompositeRange%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CompositeRange(IEnumerable<Range<T>> ranges)
    parameters:
    - id: ranges
      type: System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{{T}}}
      description: Contained ranges.
    content.vb: Public Sub New(ranges As IEnumerable(Of Range(Of T)))
  overload: CodeJam.Ranges.CompositeRange`1.#ctor*
  nameWithType.vb: CompositeRange(Of T).CompositeRange(IEnumerable(Of Range(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).CompositeRange(System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.Range(Of T)))
  name.vb: CompositeRange(IEnumerable(Of Range(Of T)))
- uid: CodeJam.Ranges.CompositeRange`1.#ctor(CodeJam.Ranges.Range{`0})
  commentId: M:CodeJam.Ranges.CompositeRange`1.#ctor(CodeJam.Ranges.Range{`0})
  id: '#ctor(CodeJam.Ranges.Range{`0})'
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: CompositeRange(Range<T>)
  nameWithType: CompositeRange<T>.CompositeRange(Range<T>)
  fullName: CodeJam.Ranges.CompositeRange<T>.CompositeRange(CodeJam.Ranges.Range<T>)
  type: Constructor
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 163
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates instance of <xref href="CodeJam.Ranges.CompositeRange%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CompositeRange(Range<T> range)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: Contained range.
    content.vb: Public Sub New(range As Range(Of T))
  overload: CodeJam.Ranges.CompositeRange`1.#ctor*
  nameWithType.vb: CompositeRange(Of T).CompositeRange(Range(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).CompositeRange(CodeJam.Ranges.Range(Of T))
  name.vb: CompositeRange(Range(Of T))
- uid: CodeJam.Ranges.CompositeRange`1.IsMerged
  commentId: P:CodeJam.Ranges.CompositeRange`1.IsMerged
  id: IsMerged
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: IsMerged
  nameWithType: CompositeRange<T>.IsMerged
  fullName: CodeJam.Ranges.CompositeRange<T>.IsMerged
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsMerged
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 224
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The composite range cannot be simplified anymore. Subranges do not intersect and start one exactly after another.
  example: []
  syntax:
    content: public bool IsMerged { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if all subranges are merged already; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsMerged As Boolean
  overload: CodeJam.Ranges.CompositeRange`1.IsMerged*
  nameWithType.vb: CompositeRange(Of T).IsMerged
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).IsMerged
- uid: CodeJam.Ranges.CompositeRange`1.IsEmpty
  commentId: P:CodeJam.Ranges.CompositeRange`1.IsEmpty
  id: IsEmpty
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: CompositeRange<T>.IsEmpty
  fullName: CodeJam.Ranges.CompositeRange<T>.IsEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsEmpty
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 228
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The composite range is empty, ∅.
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the range is empty; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: CodeJam.Ranges.CompositeRange`1.IsEmpty*
  implements:
  - CodeJam.Ranges.ICompositeRange{{T}}.IsEmpty
  nameWithType.vb: CompositeRange(Of T).IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).IsEmpty
- uid: CodeJam.Ranges.CompositeRange`1.IsNotEmpty
  commentId: P:CodeJam.Ranges.CompositeRange`1.IsNotEmpty
  id: IsNotEmpty
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: IsNotEmpty
  nameWithType: CompositeRange<T>.IsNotEmpty
  fullName: CodeJam.Ranges.CompositeRange<T>.IsNotEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNotEmpty
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 232
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The composite range is NOT empty, ≠ ∅
  example: []
  syntax:
    content: public bool IsNotEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the range is not empty; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsNotEmpty As Boolean
  overload: CodeJam.Ranges.CompositeRange`1.IsNotEmpty*
  implements:
  - CodeJam.Ranges.ICompositeRange{{T}}.IsNotEmpty
  nameWithType.vb: CompositeRange(Of T).IsNotEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).IsNotEmpty
- uid: CodeJam.Ranges.CompositeRange`1.SubRanges
  commentId: P:CodeJam.Ranges.CompositeRange`1.SubRanges
  id: SubRanges
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: SubRanges
  nameWithType: CompositeRange<T>.SubRanges
  fullName: CodeJam.Ranges.CompositeRange<T>.SubRanges
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SubRanges
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 236
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Collection of subranges.
  example: []
  syntax:
    content: public ReadOnlyCollection<Range<T>> SubRanges { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{CodeJam.Ranges.Range{{T}}}
      description: The collection of subranges.
    content.vb: Public ReadOnly Property SubRanges As ReadOnlyCollection(Of Range(Of T))
  overload: CodeJam.Ranges.CompositeRange`1.SubRanges*
  nameWithType.vb: CompositeRange(Of T).SubRanges
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).SubRanges
- uid: CodeJam.Ranges.CompositeRange`1.ContainingRange
  commentId: P:CodeJam.Ranges.CompositeRange`1.ContainingRange
  id: ContainingRange
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: ContainingRange
  nameWithType: CompositeRange<T>.ContainingRange
  fullName: CodeJam.Ranges.CompositeRange<T>.ContainingRange
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ContainingRange
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 242
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Range that contains all subranges.
  example: []
  syntax:
    content: public Range<T> ContainingRange { get; }
    parameters: []
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: The containing range.
    content.vb: Public ReadOnly Property ContainingRange As Range(Of T)
  overload: CodeJam.Ranges.CompositeRange`1.ContainingRange*
  implements:
  - CodeJam.Ranges.ICompositeRange{{T}}.ContainingRange
  nameWithType.vb: CompositeRange(Of T).ContainingRange
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).ContainingRange
- uid: CodeJam.Ranges.CompositeRange`1.ToString
  commentId: M:CodeJam.Ranges.CompositeRange`1.ToString
  id: ToString
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CompositeRange<T>.ToString()
  fullName: CodeJam.Ranges.CompositeRange<T>.ToString()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 250
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns string representation of the range.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: CodeJam.Ranges.CompositeRange`1.ToString*
  nameWithType.vb: CompositeRange(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).ToString()
- uid: CodeJam.Ranges.CompositeRange`1.ToString(System.String)
  commentId: M:CodeJam.Ranges.CompositeRange`1.ToString(System.String)
  id: ToString(System.String)
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: ToString(String)
  nameWithType: CompositeRange<T>.ToString(String)
  fullName: CodeJam.Ranges.CompositeRange<T>.ToString(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 274
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(string format)
    parameters:
    - id: format
      type: System.String
      description: The format string.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(format As String) As String
  overload: CodeJam.Ranges.CompositeRange`1.ToString*
  nameWithType.vb: CompositeRange(Of T).ToString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).ToString(System.String)
- uid: CodeJam.Ranges.CompositeRange`1.ToString(System.IFormatProvider)
  commentId: M:CodeJam.Ranges.CompositeRange`1.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: CompositeRange<T>.ToString(IFormatProvider)
  fullName: CodeJam.Ranges.CompositeRange<T>.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 283
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(IFormatProvider formatProvider)
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(formatProvider As IFormatProvider) As String
  overload: CodeJam.Ranges.CompositeRange`1.ToString*
  nameWithType.vb: CompositeRange(Of T).ToString(IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).ToString(System.IFormatProvider)
- uid: CodeJam.Ranges.CompositeRange`1.ToString(System.String,System.IFormatProvider)
  commentId: M:CodeJam.Ranges.CompositeRange`1.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: CompositeRange<T>.ToString(String, IFormatProvider)
  fullName: CodeJam.Ranges.CompositeRange<T>.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.cs
    startLine: 293
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
      description: The format string.
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: CodeJam.Ranges.CompositeRange`1.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: CompositeRange(Of T).ToString(String, IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).ToString(System.String, System.IFormatProvider)
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges
  commentId: M:CodeJam.Ranges.CompositeRange`1.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges
  id: CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges
  isEii: true
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: ICompositeRange<T>.GetMergedRanges()
  nameWithType: CompositeRange<T>.ICompositeRange<T>.GetMergedRanges()
  fullName: CodeJam.Ranges.CompositeRange<T>.CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a sequence of merged subranges. Should be used for operations over the ranges.
  example: []
  syntax:
    content: IEnumerable<Range<T>> ICompositeRange<T>.GetMergedRanges()
    return:
      type: System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{{T}}}
      description: A sequence of merged subranges
    content.vb: Function CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges As IEnumerable(Of Range(Of T)) Implements ICompositeRange(Of T).GetMergedRanges
  overload: CodeJam.Ranges.CompositeRange`1.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges*
  implements:
  - CodeJam.Ranges.ICompositeRange{{T}}.GetMergedRanges
  nameWithType.vb: CompositeRange(Of T).CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges()
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges()
  name.vb: CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges()
- uid: CodeJam.Ranges.CompositeRange`1.Merge
  commentId: M:CodeJam.Ranges.CompositeRange`1.Merge
  id: Merge
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: Merge()
  nameWithType: CompositeRange<T>.Merge()
  fullName: CodeJam.Ranges.CompositeRange<T>.Merge()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Merge
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
    startLine: 62
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns simplified composite range. Adjacent ranges with same keys will be merged.
  example: []
  syntax:
    content: public CompositeRange<T> Merge()
    return:
      type: CodeJam.Ranges.CompositeRange`1
      description: Simplified composite range.
    content.vb: Public Function Merge As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRange`1.Merge*
  nameWithType.vb: CompositeRange(Of T).Merge()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Merge()
- uid: CodeJam.Ranges.CompositeRange`1.Equals(CodeJam.Ranges.CompositeRange{`0})
  commentId: M:CodeJam.Ranges.CompositeRange`1.Equals(CodeJam.Ranges.CompositeRange{`0})
  id: Equals(CodeJam.Ranges.CompositeRange{`0})
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: Equals(CompositeRange<T>)
  nameWithType: CompositeRange<T>.Equals(CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRange<T>.Equals(CodeJam.Ranges.CompositeRange<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
    startLine: 81
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Indicates whether the current range is equal to another.
  example: []
  syntax:
    content: public bool Equals(CompositeRange<T> other)
    parameters:
    - id: other
      type: CodeJam.Ranges.CompositeRange`1
      description: A range to compare with this.
    return:
      type: System.Boolean
      description: "\n<code>True</code> if the current range is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter;\notherwise, false.\n"
    content.vb: Public Function Equals(other As CompositeRange(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRange`1.Equals*
  implements:
  - System.IEquatable{CodeJam.Ranges.CompositeRange`1}.Equals(CodeJam.Ranges.CompositeRange{{T}})
  nameWithType.vb: CompositeRange(Of T).Equals(CompositeRange(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Equals(CodeJam.Ranges.CompositeRange(Of T))
  name.vb: Equals(CompositeRange(Of T))
- uid: CodeJam.Ranges.CompositeRange`1.Equals(System.Object)
  commentId: M:CodeJam.Ranges.CompositeRange`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: CompositeRange<T>.Equals(Object)
  fullName: CodeJam.Ranges.CompositeRange<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
    startLine: 110
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Indicates whether the current range and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with this. '
    return:
      type: System.Boolean
      description: "\n<code>True</code> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and the current range are the same type\nand represent the same value; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: CodeJam.Ranges.CompositeRange`1.Equals*
  nameWithType.vb: CompositeRange(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Equals(System.Object)
- uid: CodeJam.Ranges.CompositeRange`1.GetHashCode
  commentId: M:CodeJam.Ranges.CompositeRange`1.GetHashCode
  id: GetHashCode
  parent: CodeJam.Ranges.CompositeRange`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: CompositeRange<T>.GetHashCode()
  fullName: CodeJam.Ranges.CompositeRange<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Ranges/[Ranges]/CompositeRange`1.NonGenerated.cs
    startLine: 115
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a hash code for the current range.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: CodeJam.Ranges.CompositeRange`1.GetHashCode*
  nameWithType.vb: CompositeRange(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).GetHashCode()
references:
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: System.IEquatable{CodeJam.Ranges.CompositeRange`1}
  commentId: T:System.IEquatable{CodeJam.Ranges.CompositeRange`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<CompositeRange<T>>
  nameWithType: IEquatable<CompositeRange<T>>
  fullName: System.IEquatable<CodeJam.Ranges.CompositeRange<T>>
  nameWithType.vb: IEquatable(Of CompositeRange(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Ranges.CompositeRange(Of T))
  name.vb: IEquatable(Of CompositeRange(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: CodeJam.Ranges.ICompositeRange{{T}}
  commentId: T:CodeJam.Ranges.ICompositeRange{`0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.ICompositeRange`1
  name: ICompositeRange<T>
  nameWithType: ICompositeRange<T>
  fullName: CodeJam.Ranges.ICompositeRange<T>
  nameWithType.vb: ICompositeRange(Of T)
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T)
  name.vb: ICompositeRange(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.ICompositeRange`1
    name: ICompositeRange
    nameWithType: ICompositeRange
    fullName: CodeJam.Ranges.ICompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.ICompositeRange`1
    name: ICompositeRange
    nameWithType: ICompositeRange
    fullName: CodeJam.Ranges.ICompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.NullableHelper.AsNullable``1
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  parent: CodeJam.NullableHelper
  definition: CodeJam.NullableHelper.AsNullable``1(``0)
  name: AsNullable<CompositeRange<T>>()
  nameWithType: NullableHelper.AsNullable<CompositeRange<T>>()
  fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.CompositeRange<T>>()
  nameWithType.vb: NullableHelper.AsNullable(Of CompositeRange(Of T))()
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.CompositeRange(Of T))()
  name.vb: AsNullable(Of CompositeRange(Of T))()
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable<CompositeRange<T>>
    nameWithType: NullableHelper.AsNullable<CompositeRange<T>>
    fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable(Of CompositeRange(Of T))
    nameWithType: NullableHelper.AsNullable(Of CompositeRange(Of T))
    fullName: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2({TKey2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  name: WithKeys<T, TKey2>(TKey2)
  nameWithType: CompositeRangeExtensions.WithKeys<T, TKey2>(TKey2)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys<T, TKey2>(TKey2)
  nameWithType.vb: CompositeRangeExtensions.WithKeys(Of T, TKey2)(TKey2)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithKeys(Of T, TKey2)(TKey2)
  name.vb: WithKeys(Of T, TKey2)(TKey2)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(``1)
    name: WithKeys<T, TKey2>
    nameWithType: CompositeRangeExtensions.WithKeys<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(``1)
    name: WithKeys(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.WithKeys(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  name: GetComplementation<T>()
  nameWithType: CompositeRangeExtensions.GetComplementation<T>()
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T>()
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T)()
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T)()
  name.vb: GetComplementation(Of T)()
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1
    name: GetComplementation<T>
    nameWithType: CompositeRangeExtensions.GetComplementation<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1
    name: GetComplementation(Of T)
    nameWithType: CompositeRangeExtensions.GetComplementation(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(System.Func{{T},{T}},System.Func{{T},{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  name: MakeInclusive<T>(Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeInclusive<T>(Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive<T>(System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: CompositeRangeExtensions.MakeInclusive(Of T)(Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive(Of T)(System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T)(Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive<T>
    nameWithType: CompositeRangeExtensions.MakeInclusive<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive(Of T)
    nameWithType: CompositeRangeExtensions.MakeInclusive(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(System.Func{{T},{T}},System.Func{{T},{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  name: MakeExclusive<T>(Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeExclusive<T>(Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive<T>(System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: CompositeRangeExtensions.MakeExclusive(Of T)(Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive(Of T)(System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T)(Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive<T>
    nameWithType: CompositeRangeExtensions.MakeExclusive<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive(Of T)
    nameWithType: CompositeRangeExtensions.MakeExclusive(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{{T},{T2}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  name: WithValues<T, T2>(Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, T2>(Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>(System.Func<T, T2>)
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, T2)(Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)(System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{``0,``1})
    name: WithValues<T, T2>
    nameWithType: CompositeRangeExtensions.WithValues<T, T2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{``0,``1})
    name: WithValues(Of T, T2)
    nameWithType: CompositeRangeExtensions.WithValues(Of T, T2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{{T},{T2}},System.Func{{T},{T2}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  name: WithValues<T, T2>(Func<T, T2>, Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, T2>(Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>(System.Func<T, T2>, System.Func<T, T2>)
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, T2)(Func(Of T, T2), Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)(System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(Func(Of T, T2), Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues<T, T2>
    nameWithType: CompositeRangeExtensions.WithValues<T, T2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues(Of T, T2)
    nameWithType: CompositeRangeExtensions.WithValues(Of T, T2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  name: GetIntersections<T>()
  nameWithType: CompositeRangeExtensions.GetIntersections<T>()
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections<T>()
  nameWithType.vb: CompositeRangeExtensions.GetIntersections(Of T)()
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections(Of T)()
  name.vb: GetIntersections(Of T)()
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1
    name: GetIntersections<T>
    nameWithType: CompositeRangeExtensions.GetIntersections<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1
    name: GetIntersections(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersections(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1({T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  name: GetIntersection<T>(T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(T)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(T)
  name.vb: GetIntersection(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(``0)
    name: GetIntersection<T>
    nameWithType: CompositeRangeExtensions.GetIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(``0)
    name: GetIntersection(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1({T},{T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  name: GetIntersection<T>(T, T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(T, T)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(T, T)
  name.vb: GetIntersection(Of T)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(``0,``0)
    name: GetIntersection<T>
    nameWithType: CompositeRangeExtensions.GetIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(``0,``0)
    name: GetIntersection(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  name: GetIntersection<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: GetIntersection(Of T)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.Range{``0})
    name: GetIntersection<T>
    nameWithType: CompositeRangeExtensions.GetIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.Range{``0})
    name: GetIntersection(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.Range{{T},{TKey2}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  name: GetIntersection<T, TKey2>(Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey2>(Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey2>(CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T, TKey2)(Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey2)(CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: GetIntersection(Of T, TKey2)(Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.Range{``0,``1})
    name: GetIntersection<T, TKey2>
    nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.Range{``0,``1})
    name: GetIntersection(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1({T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  name: Contains<T>(T)
  nameWithType: CompositeRangeExtensions.Contains<T>(T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(T)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(T)
  name.vb: Contains(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(``0)
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(``0)
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: Contains<T>(RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: Contains<T>(RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1({T},{T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  name: Contains<T>(T, T)
  nameWithType: CompositeRangeExtensions.Contains<T>(T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(T, T)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(T, T)
  name.vb: Contains(Of T)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(``0,``0)
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(``0,``0)
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  name: Contains<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.Range{``0})
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.Range{``0})
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.Range{{T},{TKey2}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey2>(Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey2>(Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey2>(CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey2)(Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey2)(CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Contains(Of T, TKey2)(Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey2>
    nameWithType: CompositeRangeExtensions.Contains<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.Contains(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Contains``2({TCompositeRange})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  name: Contains<T, TCompositeRange>(TCompositeRange)
  nameWithType: CompositeRangeExtensions.Contains<T, TCompositeRange>(TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TCompositeRange>(TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TCompositeRange)(TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TCompositeRange)(TCompositeRange)
  name.vb: Contains(Of T, TCompositeRange)(TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(``1)
    name: Contains<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.Contains<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(``1)
    name: Contains(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.Contains(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1({T},{T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  name: HasIntersection<T>(T, T)
  nameWithType: CompositeRangeExtensions.HasIntersection<T>(T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>(T, T)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T)(T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)(T, T)
  name.vb: HasIntersection(Of T)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(``0,``0)
    name: HasIntersection<T>
    nameWithType: CompositeRangeExtensions.HasIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(``0,``0)
    name: HasIntersection(Of T)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  name: HasIntersection<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T)(Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: HasIntersection(Of T)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{``0})
    name: HasIntersection<T>
    nameWithType: CompositeRangeExtensions.HasIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{``0})
    name: HasIntersection(Of T)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{{T},{TKey2}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  name: HasIntersection<T, TKey2>(Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey2>(Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey2>(CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TKey2)(Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey2)(CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: HasIntersection(Of T, TKey2)(Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1})
    name: HasIntersection<T, TKey2>
    nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1})
    name: HasIntersection(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2({TCompositeRange})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  name: HasIntersection<T, TCompositeRange>(TCompositeRange)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TCompositeRange>(TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TCompositeRange>(TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)(TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)(TCompositeRange)
  name.vb: HasIntersection(Of T, TCompositeRange)(TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(``1)
    name: HasIntersection<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.HasIntersection<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(``1)
    name: HasIntersection(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  name: Union<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.Union<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Union(Of T)(Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: Union(Of T)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.Range{``0})
    name: Union<T>
    nameWithType: CompositeRangeExtensions.Union<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.Range{``0})
    name: Union(Of T)
    nameWithType: CompositeRangeExtensions.Union(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  name: Union<T>(CompositeRange<T>)
  nameWithType: CompositeRangeExtensions.Union<T>(CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>(CodeJam.Ranges.CompositeRange<T>)
  nameWithType.vb: CompositeRangeExtensions.Union(Of T)(CompositeRange(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)(CodeJam.Ranges.CompositeRange(Of T))
  name.vb: Union(Of T)(CompositeRange(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0})
    name: Union<T>
    nameWithType: CompositeRangeExtensions.Union<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0})
    name: Union(Of T)
    nameWithType: CompositeRangeExtensions.Union(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1({T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  name: ExtendFrom<T>(T)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T>(T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>(T)
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T)(T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)(T)
  name.vb: ExtendFrom(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(``0)
    name: ExtendFrom<T>
    nameWithType: CompositeRangeExtensions.ExtendFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(``0)
    name: ExtendFrom(Of T)
    nameWithType: CompositeRangeExtensions.ExtendFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: ExtendFrom<T>(RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom<T>
    nameWithType: CompositeRangeExtensions.ExtendFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom(Of T)
    nameWithType: CompositeRangeExtensions.ExtendFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1({T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  name: ExtendTo<T>(T)
  nameWithType: CompositeRangeExtensions.ExtendTo<T>(T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>(T)
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T)(T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)(T)
  name.vb: ExtendTo(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(``0)
    name: ExtendTo<T>
    nameWithType: CompositeRangeExtensions.ExtendTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(``0)
    name: ExtendTo(Of T)
    nameWithType: CompositeRangeExtensions.ExtendTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: ExtendTo<T>(RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.ExtendTo<T>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo<T>
    nameWithType: CompositeRangeExtensions.ExtendTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo(Of T)
    nameWithType: CompositeRangeExtensions.ExtendTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``1({T},{T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  name: Intersect<T>(T, T)
  nameWithType: CompositeRangeExtensions.Intersect<T>(T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>(T, T)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T)(T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)(T, T)
  name.vb: Intersect(Of T)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(``0,``0)
    name: Intersect<T>
    nameWithType: CompositeRangeExtensions.Intersect<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(``0,``0)
    name: Intersect(Of T)
    nameWithType: CompositeRangeExtensions.Intersect(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  name: Intersect<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.Intersect<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T)(Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: Intersect(Of T)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.Range{``0})
    name: Intersect<T>
    nameWithType: CompositeRangeExtensions.Intersect<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.Range{``0})
    name: Intersect(Of T)
    nameWithType: CompositeRangeExtensions.Intersect(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.Range{{T},{TKey2}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  name: Intersect<T, TKey2>(Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Intersect<T, TKey2>(Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey2>(CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TKey2)(Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey2)(CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Intersect(Of T, TKey2)(Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1})
    name: Intersect<T, TKey2>
    nameWithType: CompositeRangeExtensions.Intersect<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1})
    name: Intersect(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.Intersect(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Intersect``2({TCompositeRange})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  name: Intersect<T, TCompositeRange>(TCompositeRange)
  nameWithType: CompositeRangeExtensions.Intersect<T, TCompositeRange>(TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TCompositeRange>(TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TCompositeRange)(TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TCompositeRange)(TCompositeRange)
  name.vb: Intersect(Of T, TCompositeRange)(TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(``1)
    name: Intersect<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.Intersect<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(``1)
    name: Intersect(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.Intersect(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1({T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  name: TrimFrom<T>(T)
  nameWithType: CompositeRangeExtensions.TrimFrom<T>(T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>(T)
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T)(T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)(T)
  name.vb: TrimFrom(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(``0)
    name: TrimFrom<T>
    nameWithType: CompositeRangeExtensions.TrimFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(``0)
    name: TrimFrom(Of T)
    nameWithType: CompositeRangeExtensions.TrimFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  name: TrimFrom<T>(RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.TrimFrom<T>(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T)(RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T)(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom<T>
    nameWithType: CompositeRangeExtensions.TrimFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom(Of T)
    nameWithType: CompositeRangeExtensions.TrimFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1({T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  name: TrimTo<T>(T)
  nameWithType: CompositeRangeExtensions.TrimTo<T>(T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>(T)
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T)(T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)(T)
  name.vb: TrimTo(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(``0)
    name: TrimTo<T>
    nameWithType: CompositeRangeExtensions.TrimTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(``0)
    name: TrimTo(Of T)
    nameWithType: CompositeRangeExtensions.TrimTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  name: TrimTo<T>(RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.TrimTo<T>(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T)(RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T)(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo<T>
    nameWithType: CompositeRangeExtensions.TrimTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo(Of T)
    nameWithType: CompositeRangeExtensions.TrimTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``1({T},{T})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  name: Except<T>(T, T)
  nameWithType: CompositeRangeExtensions.Except<T>(T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>(T, T)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T)(T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)(T, T)
  name.vb: Except(Of T)(T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(``0,``0)
    name: Except<T>
    nameWithType: CompositeRangeExtensions.Except<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(``0,``0)
    name: Except(Of T)
    nameWithType: CompositeRangeExtensions.Except(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  name: Except<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.Except<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T)(Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: Except(Of T)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.Range{``0})
    name: Except<T>
    nameWithType: CompositeRangeExtensions.Except<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.Range{``0})
    name: Except(Of T)
    nameWithType: CompositeRangeExtensions.Except(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.Range{{T},{TKey2}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  name: Except<T, TKey2>(Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Except<T, TKey2>(Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey2>(CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TKey2)(Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey2)(CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Except(Of T, TKey2)(Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.Range{``0,``1})
    name: Except<T, TKey2>
    nameWithType: CompositeRangeExtensions.Except<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.Range{``0,``1})
    name: Except(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.Except(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.CompositeRangeExtensions.Except``2({TCompositeRange})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  parent: CodeJam.Ranges.CompositeRangeExtensions
  definition: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  name: Except<T, TCompositeRange>(TCompositeRange)
  nameWithType: CompositeRangeExtensions.Except<T, TCompositeRange>(TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TCompositeRange>(TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TCompositeRange)(TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TCompositeRange)(TCompositeRange)
  name.vb: Except(Of T, TCompositeRange)(TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(``1)
    name: Except<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.Except<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(``1)
    name: Except(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.Except(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, CompositeRange<T>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, CompositeRange<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.CompositeRange<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, CompositeRange(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.CompositeRange(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, CompositeRange(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, CompositeRange<T>>
    nameWithType: RangeExtensions.Contains<T, CompositeRange<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, CompositeRange(Of T))
    nameWithType: RangeExtensions.Contains(Of T, CompositeRange(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, CompositeRange<T>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, CompositeRange<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.CompositeRange<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, CompositeRange(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.CompositeRange(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, CompositeRange(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, CompositeRange<T>>
    nameWithType: RangeExtensions.StartsAfter<T, CompositeRange<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, CompositeRange(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, CompositeRange(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, CompositeRange<T>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, CompositeRange<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.CompositeRange<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, CompositeRange(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.CompositeRange(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, CompositeRange(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, CompositeRange<T>>
    nameWithType: RangeExtensions.EndsBefore<T, CompositeRange<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, CompositeRange(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, CompositeRange(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, CompositeRange<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, CompositeRange<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.CompositeRange<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, CompositeRange(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.CompositeRange(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, CompositeRange(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, CompositeRange<T>>
    nameWithType: RangeExtensions.Contains<T, TKey, CompositeRange<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, CompositeRange(Of T))
    nameWithType: RangeExtensions.Contains(Of T, TKey, CompositeRange(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, CompositeRange<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, CompositeRange<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.CompositeRange<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, CompositeRange(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.CompositeRange(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, CompositeRange(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, CompositeRange<T>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, CompositeRange<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, CompositeRange(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, CompositeRange(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, CompositeRange<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, CompositeRange<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.CompositeRange<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, CompositeRange(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.CompositeRange(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, CompositeRange(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, CompositeRange<T>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, CompositeRange<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, CompositeRange(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, CompositeRange(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Strings.StringExtensions.ToInvariantString``1
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  name: ToInvariantString<CompositeRange<T>>()
  nameWithType: StringExtensions.ToInvariantString<CompositeRange<T>>()
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.CompositeRange<T>>()
  nameWithType.vb: StringExtensions.ToInvariantString(Of CompositeRange(Of T))()
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.CompositeRange(Of T))()
  name.vb: ToInvariantString(Of CompositeRange(Of T))()
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString<CompositeRange<T>>
    nameWithType: StringExtensions.ToInvariantString<CompositeRange<T>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString(Of CompositeRange(Of T))
    nameWithType: StringExtensions.ToInvariantString(Of CompositeRange(Of T))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  name: ToInvariantString<CompositeRange<T>>(String)
  nameWithType: StringExtensions.ToInvariantString<CompositeRange<T>>(String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.CompositeRange<T>>(System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of CompositeRange(Of T))(String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.CompositeRange(Of T))(System.String)
  name.vb: ToInvariantString(Of CompositeRange(Of T))(String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString<CompositeRange<T>>
    nameWithType: StringExtensions.ToInvariantString<CompositeRange<T>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.CompositeRange<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString(Of CompositeRange(Of T))
    nameWithType: StringExtensions.ToInvariantString(Of CompositeRange(Of T))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.CompositeRange(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.ICompositeRange`1
  commentId: T:CodeJam.Ranges.ICompositeRange`1
  isExternal: false
  name: ICompositeRange<T>
  nameWithType: ICompositeRange<T>
  fullName: CodeJam.Ranges.ICompositeRange<T>
  nameWithType.vb: ICompositeRange(Of T)
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T)
  name.vb: ICompositeRange(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.ICompositeRange`1
    name: ICompositeRange
    nameWithType: ICompositeRange
    fullName: CodeJam.Ranges.ICompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.ICompositeRange`1
    name: ICompositeRange
    nameWithType: ICompositeRange
    fullName: CodeJam.Ranges.ICompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.NullableHelper.AsNullable``1(``0)
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  isExternal: false
  name: AsNullable<T>(T)
  nameWithType: NullableHelper.AsNullable<T>(T)
  fullName: CodeJam.NullableHelper.AsNullable<T>(T)
  nameWithType.vb: NullableHelper.AsNullable(Of T)(T)
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of T)(T)
  name.vb: AsNullable(Of T)(T)
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable<T>
    nameWithType: NullableHelper.AsNullable<T>
    fullName: CodeJam.NullableHelper.AsNullable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable(Of T)
    nameWithType: NullableHelper.AsNullable(Of T)
    fullName: CodeJam.NullableHelper.AsNullable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper
  commentId: T:CodeJam.NullableHelper
  parent: CodeJam
  isExternal: false
  name: NullableHelper
  nameWithType: NullableHelper
  fullName: CodeJam.NullableHelper
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExternal: false
  name: WithKeys<T, TKey2>(CompositeRange<T>, TKey2)
  nameWithType: CompositeRangeExtensions.WithKeys<T, TKey2>(CompositeRange<T>, TKey2)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, TKey2)
  nameWithType.vb: CompositeRangeExtensions.WithKeys(Of T, TKey2)(CompositeRange(Of T), TKey2)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithKeys(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), TKey2)
  name.vb: WithKeys(Of T, TKey2)(CompositeRange(Of T), TKey2)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: WithKeys<T, TKey2>
    nameWithType: CompositeRangeExtensions.WithKeys<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: WithKeys(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.WithKeys(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions
  commentId: T:CodeJam.Ranges.CompositeRangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: CompositeRangeExtensions
  nameWithType: CompositeRangeExtensions
  fullName: CodeJam.Ranges.CompositeRangeExtensions
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  isExternal: false
  name: GetComplementation<T>(CompositeRange<T>)
  nameWithType: CompositeRangeExtensions.GetComplementation<T>(CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T>(CodeJam.Ranges.CompositeRange<T>)
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T)(CompositeRange(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T)(CodeJam.Ranges.CompositeRange(Of T))
  name.vb: GetComplementation(Of T)(CompositeRange(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
    name: GetComplementation<T>
    nameWithType: CompositeRangeExtensions.GetComplementation<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
    name: GetComplementation(Of T)
    nameWithType: CompositeRangeExtensions.GetComplementation(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  isExternal: true
  name: MakeInclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeInclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive<T>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: CompositeRangeExtensions.MakeInclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive(Of T)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive<T>
    nameWithType: CompositeRangeExtensions.MakeInclusive<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeInclusive(Of T)
    nameWithType: CompositeRangeExtensions.MakeInclusive(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  isExternal: true
  name: MakeExclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeExclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive<T>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T>, System.Func<T, T>)
  nameWithType.vb: CompositeRangeExtensions.MakeExclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive(Of T)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive<T>
    nameWithType: CompositeRangeExtensions.MakeExclusive<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
    name: MakeExclusive(Of T)
    nameWithType: CompositeRangeExtensions.MakeExclusive(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  isExternal: true
  name: WithValues<T, T2>(CompositeRange<T>, Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, T2>(CompositeRange<T>, Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T2>)
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
    name: WithValues<T, T2>
    nameWithType: CompositeRangeExtensions.WithValues<T, T2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
    name: WithValues(Of T, T2)
    nameWithType: CompositeRangeExtensions.WithValues(Of T, T2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  isExternal: true
  name: WithValues<T, T2>(CompositeRange<T>, Func<T, T2>, Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, T2>(CompositeRange<T>, Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T2>, System.Func<T, T2>)
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2), Func(Of T, T2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2), Func(Of T, T2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues<T, T2>
    nameWithType: CompositeRangeExtensions.WithValues<T, T2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
    name: WithValues(Of T, T2)
    nameWithType: CompositeRangeExtensions.WithValues(Of T, T2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  isExternal: false
  name: GetIntersections<T>(CompositeRange<T>)
  nameWithType: CompositeRangeExtensions.GetIntersections<T>(CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections<T>(CodeJam.Ranges.CompositeRange<T>)
  nameWithType.vb: CompositeRangeExtensions.GetIntersections(Of T)(CompositeRange(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections(Of T)(CodeJam.Ranges.CompositeRange(Of T))
  name.vb: GetIntersections(Of T)(CompositeRange(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
    name: GetIntersections<T>
    nameWithType: CompositeRangeExtensions.GetIntersections<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
    name: GetIntersections(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersections(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExternal: false
  name: GetIntersection<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(CodeJam.Ranges.CompositeRange<T>, T)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(CompositeRange(Of T), T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: GetIntersection(Of T)(CompositeRange(Of T), T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: GetIntersection<T>
    nameWithType: CompositeRangeExtensions.GetIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: GetIntersection(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExternal: false
  name: GetIntersection<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(CompositeRange(Of T), T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: GetIntersection(Of T)(CompositeRange(Of T), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: GetIntersection<T>
    nameWithType: CompositeRangeExtensions.GetIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: GetIntersection(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExternal: false
  name: GetIntersection<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(CompositeRange(Of T), Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: GetIntersection(Of T)(CompositeRange(Of T), Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: GetIntersection<T>
    nameWithType: CompositeRangeExtensions.GetIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: GetIntersection(Of T)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: GetIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: GetIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: GetIntersection<T, TKey2>
    nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: GetIntersection(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.GetIntersection(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExternal: false
  name: Contains<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, T)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: Contains(Of T)(CompositeRange(Of T), T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: Contains<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: Contains<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExternal: false
  name: Contains<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: Contains(Of T)(CompositeRange(Of T), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T)(CompositeRange(Of T), Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Contains<T>
    nameWithType: CompositeRangeExtensions.Contains<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Contains(Of T)
    nameWithType: CompositeRangeExtensions.Contains(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Contains(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey2>
    nameWithType: CompositeRangeExtensions.Contains<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.Contains(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExternal: false
  name: Contains<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Contains<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: Contains(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: Contains<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.Contains<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: Contains(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.Contains(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExternal: false
  name: HasIntersection<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.HasIntersection<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T)(CompositeRange(Of T), T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: HasIntersection(Of T)(CompositeRange(Of T), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: HasIntersection<T>
    nameWithType: CompositeRangeExtensions.HasIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: HasIntersection(Of T)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExternal: false
  name: HasIntersection<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T)(CompositeRange(Of T), Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: HasIntersection(Of T)(CompositeRange(Of T), Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: HasIntersection<T>
    nameWithType: CompositeRangeExtensions.HasIntersection<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: HasIntersection(Of T)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: HasIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: HasIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: HasIntersection<T, TKey2>
    nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: HasIntersection(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExternal: false
  name: HasIntersection<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: HasIntersection(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: HasIntersection<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.HasIntersection<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: HasIntersection(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Union<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Union<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Union(Of T)(CompositeRange(Of T), Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Union(Of T)(CompositeRange(Of T), Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Union<T>
    nameWithType: CompositeRangeExtensions.Union<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Union(Of T)
    nameWithType: CompositeRangeExtensions.Union(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  isExternal: false
  name: Union<T>(CompositeRange<T>, CompositeRange<T>)
  nameWithType: CompositeRangeExtensions.Union<T>(CompositeRange<T>, CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.CompositeRange<T>)
  nameWithType.vb: CompositeRangeExtensions.Union(Of T)(CompositeRange(Of T), CompositeRange(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.CompositeRange(Of T))
  name.vb: Union(Of T)(CompositeRange(Of T), CompositeRange(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
    name: Union<T>
    nameWithType: CompositeRangeExtensions.Union<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
    name: Union(Of T)
    nameWithType: CompositeRangeExtensions.Union(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExternal: false
  name: ExtendFrom<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>(CodeJam.Ranges.CompositeRange<T>, T)
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T)(CompositeRange(Of T), T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: ExtendFrom(Of T)(CompositeRange(Of T), T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: ExtendFrom<T>
    nameWithType: CompositeRangeExtensions.ExtendFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: ExtendFrom(Of T)
    nameWithType: CompositeRangeExtensions.ExtendFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: ExtendFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom<T>
    nameWithType: CompositeRangeExtensions.ExtendFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: ExtendFrom(Of T)
    nameWithType: CompositeRangeExtensions.ExtendFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExternal: false
  name: ExtendTo<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.ExtendTo<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>(CodeJam.Ranges.CompositeRange<T>, T)
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T)(CompositeRange(Of T), T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: ExtendTo(Of T)(CompositeRange(Of T), T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: ExtendTo<T>
    nameWithType: CompositeRangeExtensions.ExtendTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: ExtendTo(Of T)
    nameWithType: CompositeRangeExtensions.ExtendTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: ExtendTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.ExtendTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo<T>
    nameWithType: CompositeRangeExtensions.ExtendTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: ExtendTo(Of T)
    nameWithType: CompositeRangeExtensions.ExtendTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExternal: false
  name: Intersect<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.Intersect<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T)(CompositeRange(Of T), T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: Intersect(Of T)(CompositeRange(Of T), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: Intersect<T>
    nameWithType: CompositeRangeExtensions.Intersect<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: Intersect(Of T)
    nameWithType: CompositeRangeExtensions.Intersect(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Intersect<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Intersect<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T)(CompositeRange(Of T), Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Intersect(Of T)(CompositeRange(Of T), Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Intersect<T>
    nameWithType: CompositeRangeExtensions.Intersect<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Intersect(Of T)
    nameWithType: CompositeRangeExtensions.Intersect(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Intersect<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Intersect<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Intersect(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: Intersect<T, TKey2>
    nameWithType: CompositeRangeExtensions.Intersect<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: Intersect(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.Intersect(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExternal: false
  name: Intersect<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Intersect<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: Intersect(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: Intersect<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.Intersect<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: Intersect(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.Intersect(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExternal: false
  name: TrimFrom<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.TrimFrom<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>(CodeJam.Ranges.CompositeRange<T>, T)
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T)(CompositeRange(Of T), T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: TrimFrom(Of T)(CompositeRange(Of T), T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: TrimFrom<T>
    nameWithType: CompositeRangeExtensions.TrimFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: TrimFrom(Of T)
    nameWithType: CompositeRangeExtensions.TrimFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExternal: false
  name: TrimFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.TrimFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom<T>
    nameWithType: CompositeRangeExtensions.TrimFrom<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
    name: TrimFrom(Of T)
    nameWithType: CompositeRangeExtensions.TrimFrom(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExternal: false
  name: TrimTo<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.TrimTo<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>(CodeJam.Ranges.CompositeRange<T>, T)
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T)(CompositeRange(Of T), T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: TrimTo(Of T)(CompositeRange(Of T), T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: TrimTo<T>
    nameWithType: CompositeRangeExtensions.TrimTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
    name: TrimTo(Of T)
    nameWithType: CompositeRangeExtensions.TrimTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExternal: false
  name: TrimTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.TrimTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo<T>
    nameWithType: CompositeRangeExtensions.TrimTo<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
    name: TrimTo(Of T)
    nameWithType: CompositeRangeExtensions.TrimTo(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExternal: false
  name: Except<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.Except<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T)(CompositeRange(Of T), T, T)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: Except(Of T)(CompositeRange(Of T), T, T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: Except<T>
    nameWithType: CompositeRangeExtensions.Except<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
    name: Except(Of T)
    nameWithType: CompositeRangeExtensions.Except(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Except<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Except<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T)(CompositeRange(Of T), Range(Of T))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Except(Of T)(CompositeRange(Of T), Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Except<T>
    nameWithType: CompositeRangeExtensions.Except<T>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
    name: Except(Of T)
    nameWithType: CompositeRangeExtensions.Except(Of T)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Except<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Except<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Except(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: Except<T, TKey2>
    nameWithType: CompositeRangeExtensions.Except<T, TKey2>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
    name: Except(Of T, TKey2)
    nameWithType: CompositeRangeExtensions.Except(Of T, TKey2)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExternal: false
  name: Except<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Except<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: Except(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: Except<T, TCompositeRange>
    nameWithType: CompositeRangeExtensions.Except<T, TCompositeRange>
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TCompositeRange>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
    name: Except(Of T, TCompositeRange)
    nameWithType: CompositeRangeExtensions.Except(Of T, TCompositeRange)
    fullName: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TCompositeRange)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCompositeRange
    nameWithType: TCompositeRange
    fullName: TCompositeRange
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  isExternal: false
  name: ToInvariantString<T>(T)
  nameWithType: StringExtensions.ToInvariantString<T>(T)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T)
  name.vb: ToInvariantString(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions
  commentId: T:CodeJam.Strings.StringExtensions
  parent: CodeJam.Strings
  isExternal: false
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: CodeJam.Strings.StringExtensions
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  isExternal: true
  name: ToInvariantString<T>(T, String)
  nameWithType: StringExtensions.ToInvariantString<T>(T, String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T, System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T, String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T, System.String)
  name.vb: ToInvariantString(Of T)(T, String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.Strings
  commentId: N:CodeJam.Strings
  isExternal: false
  name: CodeJam.Strings
  nameWithType: CodeJam.Strings
  fullName: CodeJam.Strings
- uid: CodeJam.Ranges.CompositeRange`1.op_Equality*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.op_Equality
  isExternal: false
  name: Equality
  nameWithType: CompositeRange<T>.Equality
  fullName: CodeJam.Ranges.CompositeRange<T>.Equality
  nameWithType.vb: CompositeRange(Of T).Equality
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Equality
- uid: CodeJam.Ranges.CompositeRange`1
  commentId: T:CodeJam.Ranges.CompositeRange`1
  parent: CodeJam.Ranges
  isExternal: false
  name: CompositeRange<T>
  nameWithType: CompositeRange<T>
  fullName: CodeJam.Ranges.CompositeRange<T>
  nameWithType.vb: CompositeRange(Of T)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T)
  name.vb: CompositeRange(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Ranges.CompositeRange`1.op_Inequality*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: CompositeRange<T>.Inequality
  fullName: CodeJam.Ranges.CompositeRange<T>.Inequality
  nameWithType.vb: CompositeRange(Of T).Inequality
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Inequality
- uid: CodeJam.Ranges.CompositeRange`1.#ctor*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.#ctor
  isExternal: false
  name: CompositeRange
  nameWithType: CompositeRange<T>.CompositeRange
  fullName: CodeJam.Ranges.CompositeRange<T>.CompositeRange
  nameWithType.vb: CompositeRange(Of T).CompositeRange
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).CompositeRange
- uid: System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Range<T>>
  nameWithType: IEnumerable<Range<T>>
  fullName: System.Collections.Generic.IEnumerable<CodeJam.Ranges.Range<T>>
  nameWithType.vb: IEnumerable(Of Range(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.Range(Of T))
  name.vb: IEnumerable(Of Range(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Ranges.Range{{T}}
  commentId: T:CodeJam.Ranges.Range{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`1
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`1
  commentId: T:CodeJam.Ranges.Range`1
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.IsMerged*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.IsMerged
  isExternal: false
  name: IsMerged
  nameWithType: CompositeRange<T>.IsMerged
  fullName: CodeJam.Ranges.CompositeRange<T>.IsMerged
  nameWithType.vb: CompositeRange(Of T).IsMerged
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).IsMerged
- uid: CodeJam.Ranges.CompositeRange`1.IsEmpty*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: CompositeRange<T>.IsEmpty
  fullName: CodeJam.Ranges.CompositeRange<T>.IsEmpty
  nameWithType.vb: CompositeRange(Of T).IsEmpty
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).IsEmpty
- uid: CodeJam.Ranges.ICompositeRange{{T}}.IsEmpty
  commentId: P:CodeJam.Ranges.ICompositeRange{`0}.IsEmpty
  parent: CodeJam.Ranges.ICompositeRange{{T}}
  definition: CodeJam.Ranges.ICompositeRange`1.IsEmpty
  name: IsEmpty
  nameWithType: ICompositeRange<T>.IsEmpty
  fullName: CodeJam.Ranges.ICompositeRange<T>.IsEmpty
  nameWithType.vb: ICompositeRange(Of T).IsEmpty
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).IsEmpty
- uid: CodeJam.Ranges.ICompositeRange`1.IsEmpty
  commentId: P:CodeJam.Ranges.ICompositeRange`1.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: ICompositeRange<T>.IsEmpty
  fullName: CodeJam.Ranges.ICompositeRange<T>.IsEmpty
  nameWithType.vb: ICompositeRange(Of T).IsEmpty
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).IsEmpty
- uid: CodeJam.Ranges.CompositeRange`1.IsNotEmpty*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: CompositeRange<T>.IsNotEmpty
  fullName: CodeJam.Ranges.CompositeRange<T>.IsNotEmpty
  nameWithType.vb: CompositeRange(Of T).IsNotEmpty
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).IsNotEmpty
- uid: CodeJam.Ranges.ICompositeRange{{T}}.IsNotEmpty
  commentId: P:CodeJam.Ranges.ICompositeRange{`0}.IsNotEmpty
  parent: CodeJam.Ranges.ICompositeRange{{T}}
  definition: CodeJam.Ranges.ICompositeRange`1.IsNotEmpty
  name: IsNotEmpty
  nameWithType: ICompositeRange<T>.IsNotEmpty
  fullName: CodeJam.Ranges.ICompositeRange<T>.IsNotEmpty
  nameWithType.vb: ICompositeRange(Of T).IsNotEmpty
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).IsNotEmpty
- uid: CodeJam.Ranges.ICompositeRange`1.IsNotEmpty
  commentId: P:CodeJam.Ranges.ICompositeRange`1.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: ICompositeRange<T>.IsNotEmpty
  fullName: CodeJam.Ranges.ICompositeRange<T>.IsNotEmpty
  nameWithType.vb: ICompositeRange(Of T).IsNotEmpty
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).IsNotEmpty
- uid: CodeJam.Ranges.CompositeRange`1.SubRanges*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.SubRanges
  isExternal: false
  name: SubRanges
  nameWithType: CompositeRange<T>.SubRanges
  fullName: CodeJam.Ranges.CompositeRange<T>.SubRanges
  nameWithType.vb: CompositeRange(Of T).SubRanges
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).SubRanges
- uid: System.Collections.ObjectModel.ReadOnlyCollection{CodeJam.Ranges.Range{{T}}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{CodeJam.Ranges.Range{`0}}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Range<T>>
  nameWithType: ReadOnlyCollection<Range<T>>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<CodeJam.Ranges.Range<T>>
  nameWithType.vb: ReadOnlyCollection(Of Range(Of T))
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of CodeJam.Ranges.Range(Of T))
  name.vb: ReadOnlyCollection(Of Range(Of T))
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: CodeJam.Ranges.CompositeRange`1.ContainingRange*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.ContainingRange
  isExternal: false
  name: ContainingRange
  nameWithType: CompositeRange<T>.ContainingRange
  fullName: CodeJam.Ranges.CompositeRange<T>.ContainingRange
  nameWithType.vb: CompositeRange(Of T).ContainingRange
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).ContainingRange
- uid: CodeJam.Ranges.ICompositeRange{{T}}.ContainingRange
  commentId: P:CodeJam.Ranges.ICompositeRange{`0}.ContainingRange
  parent: CodeJam.Ranges.ICompositeRange{{T}}
  definition: CodeJam.Ranges.ICompositeRange`1.ContainingRange
  name: ContainingRange
  nameWithType: ICompositeRange<T>.ContainingRange
  fullName: CodeJam.Ranges.ICompositeRange<T>.ContainingRange
  nameWithType.vb: ICompositeRange(Of T).ContainingRange
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).ContainingRange
- uid: CodeJam.Ranges.ICompositeRange`1.ContainingRange
  commentId: P:CodeJam.Ranges.ICompositeRange`1.ContainingRange
  isExternal: false
  name: ContainingRange
  nameWithType: ICompositeRange<T>.ContainingRange
  fullName: CodeJam.Ranges.ICompositeRange<T>.ContainingRange
  nameWithType.vb: ICompositeRange(Of T).ContainingRange
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).ContainingRange
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.ToString*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.ToString
  isExternal: false
  name: ToString
  nameWithType: CompositeRange<T>.ToString
  fullName: CodeJam.Ranges.CompositeRange<T>.ToString
  nameWithType.vb: CompositeRange(Of T).ToString
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges
  isExternal: false
  name: ICompositeRange<T>.GetMergedRanges
  nameWithType: CompositeRange<T>.ICompositeRange<T>.GetMergedRanges
  fullName: CodeJam.Ranges.CompositeRange<T>.CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges
  nameWithType.vb: CompositeRange(Of T).CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges
  name.vb: CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges
- uid: CodeJam.Ranges.ICompositeRange{{T}}.GetMergedRanges
  commentId: M:CodeJam.Ranges.ICompositeRange{`0}.GetMergedRanges
  parent: CodeJam.Ranges.ICompositeRange{{T}}
  definition: CodeJam.Ranges.ICompositeRange`1.GetMergedRanges
  name: GetMergedRanges()
  nameWithType: ICompositeRange<T>.GetMergedRanges()
  fullName: CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges()
  nameWithType.vb: ICompositeRange(Of T).GetMergedRanges()
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).GetMergedRanges()
  spec.csharp:
  - uid: CodeJam.Ranges.ICompositeRange`1.GetMergedRanges
    name: GetMergedRanges
    nameWithType: ICompositeRange<T>.GetMergedRanges
    fullName: CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.ICompositeRange`1.GetMergedRanges
    name: GetMergedRanges
    nameWithType: ICompositeRange(Of T).GetMergedRanges
    fullName: CodeJam.Ranges.ICompositeRange(Of T).GetMergedRanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.ICompositeRange`1.GetMergedRanges
  commentId: M:CodeJam.Ranges.ICompositeRange`1.GetMergedRanges
  isExternal: false
  name: GetMergedRanges()
  nameWithType: ICompositeRange<T>.GetMergedRanges()
  fullName: CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges()
  nameWithType.vb: ICompositeRange(Of T).GetMergedRanges()
  fullName.vb: CodeJam.Ranges.ICompositeRange(Of T).GetMergedRanges()
  spec.csharp:
  - uid: CodeJam.Ranges.ICompositeRange`1.GetMergedRanges
    name: GetMergedRanges
    nameWithType: ICompositeRange<T>.GetMergedRanges
    fullName: CodeJam.Ranges.ICompositeRange<T>.GetMergedRanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.ICompositeRange`1.GetMergedRanges
    name: GetMergedRanges
    nameWithType: ICompositeRange(Of T).GetMergedRanges
    fullName: CodeJam.Ranges.ICompositeRange(Of T).GetMergedRanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.Merge*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.Merge
  isExternal: false
  name: Merge
  nameWithType: CompositeRange<T>.Merge
  fullName: CodeJam.Ranges.CompositeRange<T>.Merge
  nameWithType.vb: CompositeRange(Of T).Merge
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Merge
- uid: CodeJam.Ranges.CompositeRange`1.Equals*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.Equals
  isExternal: false
  name: Equals
  nameWithType: CompositeRange<T>.Equals
  fullName: CodeJam.Ranges.CompositeRange<T>.Equals
  nameWithType.vb: CompositeRange(Of T).Equals
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).Equals
- uid: System.IEquatable{CodeJam.Ranges.CompositeRange`1}.Equals(CodeJam.Ranges.CompositeRange{{T}})
  commentId: M:System.IEquatable{CodeJam.Ranges.CompositeRange`1}.Equals(CodeJam.Ranges.CompositeRange{`0})
  parent: System.IEquatable{CodeJam.Ranges.CompositeRange`1}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(CompositeRange<T>)
  nameWithType: IEquatable<CompositeRange<T>>.Equals(CompositeRange<T>)
  fullName: System.IEquatable<CodeJam.Ranges.CompositeRange<T>>.Equals(CodeJam.Ranges.CompositeRange<T>)
  nameWithType.vb: IEquatable(Of CompositeRange(Of T)).Equals(CompositeRange(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Ranges.CompositeRange(Of T)).Equals(CodeJam.Ranges.CompositeRange(Of T))
  name.vb: Equals(CompositeRange(Of T))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<CompositeRange<T>>.Equals
    fullName: System.IEquatable<CodeJam.Ranges.CompositeRange<T>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of CompositeRange(Of T)).Equals
    fullName: System.IEquatable(Of CodeJam.Ranges.CompositeRange(Of T)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`1.GetHashCode*
  commentId: Overload:CodeJam.Ranges.CompositeRange`1.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: CompositeRange<T>.GetHashCode
  fullName: CodeJam.Ranges.CompositeRange<T>.GetHashCode
  nameWithType.vb: CompositeRange(Of T).GetHashCode
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
