### YamlMime:ManagedReference
items:
- uid: CodeJam.Collections.IndexedItem`1
  commentId: T:CodeJam.Collections.IndexedItem`1
  id: IndexedItem`1
  parent: CodeJam.Collections
  children:
  - CodeJam.Collections.IndexedItem`1.#ctor(`0,System.Int32,System.Boolean,System.Boolean)
  - CodeJam.Collections.IndexedItem`1.Equals(CodeJam.Collections.IndexedItem{`0})
  - CodeJam.Collections.IndexedItem`1.Equals(System.Object)
  - CodeJam.Collections.IndexedItem`1.GetHashCode
  - CodeJam.Collections.IndexedItem`1.Index
  - CodeJam.Collections.IndexedItem`1.IsFirst
  - CodeJam.Collections.IndexedItem`1.IsLast
  - CodeJam.Collections.IndexedItem`1.Item
  - CodeJam.Collections.IndexedItem`1.op_Equality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  - CodeJam.Collections.IndexedItem`1.op_Inequality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  langs:
  - csharp
  - vb
  name: IndexedItem<T>
  nameWithType: IndexedItem<T>
  fullName: CodeJam.Collections.IndexedItem<T>
  type: Struct
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IndexedItem
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 10
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nRepresents an element associated with its index in a sequence.\n"
  example: []
  syntax:
    content: 'public struct IndexedItem<T> : IEquatable<IndexedItem<T>>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Structure IndexedItem(Of T)
          Implements IEquatable(Of IndexedItem(Of T))
  implements:
  - System.IEquatable{CodeJam.Collections.IndexedItem`1}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - CodeJam.Collections.IndexedItem`1.CodeJam.NullableHelper.AsNullable``1
  - CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  nameWithType.vb: IndexedItem(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: CodeJam.Collections.IndexedItem(Of T)
  name.vb: IndexedItem(Of T)
- uid: CodeJam.Collections.IndexedItem`1.Item
  commentId: P:CodeJam.Collections.IndexedItem`1.Item
  id: Item
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: Item
  nameWithType: IndexedItem<T>.Item
  fullName: CodeJam.Collections.IndexedItem<T>.Item
  type: Property
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Item
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 19
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nGets the value of the element.\n"
  example: []
  syntax:
    content: public T Item { get; }
    parameters: []
    return:
      type: '{T}'
      description: "\nThe value of the element.\n"
    content.vb: Public ReadOnly Property Item As T
  overload: CodeJam.Collections.IndexedItem`1.Item*
  nameWithType.vb: IndexedItem(Of T).Item
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Item
- uid: CodeJam.Collections.IndexedItem`1.Index
  commentId: P:CodeJam.Collections.IndexedItem`1.Index
  id: Index
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: IndexedItem<T>.Index
  fullName: CodeJam.Collections.IndexedItem<T>.Index
  type: Property
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Index
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 27
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nGets the index of the element in a sequence.\n"
  example: []
  syntax:
    content: public int Index { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe index of the element in a sequence.\n"
    content.vb: Public ReadOnly Property Index As Integer
  overload: CodeJam.Collections.IndexedItem`1.Index*
  nameWithType.vb: IndexedItem(Of T).Index
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Index
- uid: CodeJam.Collections.IndexedItem`1.IsFirst
  commentId: P:CodeJam.Collections.IndexedItem`1.IsFirst
  id: IsFirst
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: IsFirst
  nameWithType: IndexedItem<T>.IsFirst
  fullName: CodeJam.Collections.IndexedItem<T>.IsFirst
  type: Property
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsFirst
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 35
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nDetermines if the value is first in a sequence.\n"
  example: []
  syntax:
    content: public bool IsFirst { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is first; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsFirst As Boolean
  overload: CodeJam.Collections.IndexedItem`1.IsFirst*
  nameWithType.vb: IndexedItem(Of T).IsFirst
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).IsFirst
- uid: CodeJam.Collections.IndexedItem`1.IsLast
  commentId: P:CodeJam.Collections.IndexedItem`1.IsLast
  id: IsLast
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: IsLast
  nameWithType: IndexedItem<T>.IsLast
  fullName: CodeJam.Collections.IndexedItem<T>.IsLast
  type: Property
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLast
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 43
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nDetermines if the value is last in a sequence.\n"
  example: []
  syntax:
    content: public bool IsLast { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is last; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsLast As Boolean
  overload: CodeJam.Collections.IndexedItem`1.IsLast*
  nameWithType.vb: IndexedItem(Of T).IsLast
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).IsLast
- uid: CodeJam.Collections.IndexedItem`1.#ctor(`0,System.Int32,System.Boolean,System.Boolean)
  commentId: M:CodeJam.Collections.IndexedItem`1.#ctor(`0,System.Int32,System.Boolean,System.Boolean)
  id: '#ctor(`0,System.Int32,System.Boolean,System.Boolean)'
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: IndexedItem(T, Int32, Boolean, Boolean)
  nameWithType: IndexedItem<T>.IndexedItem(T, Int32, Boolean, Boolean)
  fullName: CodeJam.Collections.IndexedItem<T>.IndexedItem(T, System.Int32, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 52
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInitializes a new instance of the <xref href=\"CodeJam.Collections.IndexedItem%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IndexedItem(T item, int index, bool isFirst, bool isLast)
    parameters:
    - id: item
      type: '{T}'
      description: The value of the element.
    - id: index
      type: System.Int32
      description: The index of the element in a sequence.
    - id: isFirst
      type: System.Boolean
      description: A value indicating whether this instance is first.
    - id: isLast
      type: System.Boolean
      description: A value indicating whether this instance is last.
    content.vb: Public Sub New(item As T, index As Integer, isFirst As Boolean, isLast As Boolean)
  overload: CodeJam.Collections.IndexedItem`1.#ctor*
  nameWithType.vb: IndexedItem(Of T).IndexedItem(T, Int32, Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).IndexedItem(T, System.Int32, System.Boolean, System.Boolean)
- uid: CodeJam.Collections.IndexedItem`1.Equals(CodeJam.Collections.IndexedItem{`0})
  commentId: M:CodeJam.Collections.IndexedItem`1.Equals(CodeJam.Collections.IndexedItem{`0})
  id: Equals(CodeJam.Collections.IndexedItem{`0})
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: Equals(IndexedItem<T>)
  nameWithType: IndexedItem<T>.Equals(IndexedItem<T>)
  fullName: CodeJam.Collections.IndexedItem<T>.Equals(CodeJam.Collections.IndexedItem<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 66
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(IndexedItem<T> other)
    parameters:
    - id: other
      type: CodeJam.Collections.IndexedItem`1
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\ntrue if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter; otherwise, false.\n"
    content.vb: Public Function Equals(other As IndexedItem(Of T)) As Boolean
  overload: CodeJam.Collections.IndexedItem`1.Equals*
  implements:
  - System.IEquatable{CodeJam.Collections.IndexedItem`1}.Equals(CodeJam.Collections.IndexedItem{{T}})
  nameWithType.vb: IndexedItem(Of T).Equals(IndexedItem(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Equals(CodeJam.Collections.IndexedItem(Of T))
  name.vb: Equals(IndexedItem(Of T))
- uid: CodeJam.Collections.IndexedItem`1.Equals(System.Object)
  commentId: M:CodeJam.Collections.IndexedItem`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: IndexedItem<T>.Equals(Object)
  fullName: CodeJam.Collections.IndexedItem<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 73
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with the current instance. '
    return:
      type: System.Boolean
      description: "\ntrue if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and this instance are the same type and represent the same value; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: CodeJam.Collections.IndexedItem`1.Equals*
  nameWithType.vb: IndexedItem(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Equals(System.Object)
- uid: CodeJam.Collections.IndexedItem`1.GetHashCode
  commentId: M:CodeJam.Collections.IndexedItem`1.GetHashCode
  id: GetHashCode
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: IndexedItem<T>.GetHashCode()
  fullName: CodeJam.Collections.IndexedItem<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 81
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: CodeJam.Collections.IndexedItem`1.GetHashCode*
  nameWithType.vb: IndexedItem(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).GetHashCode()
- uid: CodeJam.Collections.IndexedItem`1.op_Equality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  commentId: M:CodeJam.Collections.IndexedItem`1.op_Equality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  id: op_Equality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: Equality(IndexedItem<T>, IndexedItem<T>)
  nameWithType: IndexedItem<T>.Equality(IndexedItem<T>, IndexedItem<T>)
  fullName: CodeJam.Collections.IndexedItem<T>.Equality(CodeJam.Collections.IndexedItem<T>, CodeJam.Collections.IndexedItem<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Equality
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 89
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nOperator ==\n"
  example: []
  syntax:
    content: public static bool operator ==(IndexedItem<T> left, IndexedItem<T> right)
    parameters:
    - id: left
      type: CodeJam.Collections.IndexedItem`1
      description: Left operand
    - id: right
      type: CodeJam.Collections.IndexedItem`1
      description: Right operand
    return:
      type: System.Boolean
      description: True? if operands equals
    content.vb: Public Shared Operator =(left As IndexedItem(Of T), right As IndexedItem(Of T)) As Boolean
  overload: CodeJam.Collections.IndexedItem`1.op_Equality*
  nameWithType.vb: IndexedItem(Of T).Equality(IndexedItem(Of T), IndexedItem(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Equality(CodeJam.Collections.IndexedItem(Of T), CodeJam.Collections.IndexedItem(Of T))
  name.vb: Equality(IndexedItem(Of T), IndexedItem(Of T))
- uid: CodeJam.Collections.IndexedItem`1.op_Inequality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  commentId: M:CodeJam.Collections.IndexedItem`1.op_Inequality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  id: op_Inequality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})
  parent: CodeJam.Collections.IndexedItem`1
  langs:
  - csharp
  - vb
  name: Inequality(IndexedItem<T>, IndexedItem<T>)
  nameWithType: IndexedItem<T>.Inequality(IndexedItem<T>, IndexedItem<T>)
  fullName: CodeJam.Collections.IndexedItem<T>.Inequality(CodeJam.Collections.IndexedItem<T>, CodeJam.Collections.IndexedItem<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Collections/Enumerable/IndexedItem.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Inequality
    path: ../Main/src/Collections/Enumerable/IndexedItem.cs
    startLine: 97
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nOperator !=\n"
  example: []
  syntax:
    content: public static bool operator !=(IndexedItem<T> left, IndexedItem<T> right)
    parameters:
    - id: left
      type: CodeJam.Collections.IndexedItem`1
      description: Left operand
    - id: right
      type: CodeJam.Collections.IndexedItem`1
      description: Right operand
    return:
      type: System.Boolean
      description: True? if operands equals
    content.vb: Public Shared Operator <>(left As IndexedItem(Of T), right As IndexedItem(Of T)) As Boolean
  overload: CodeJam.Collections.IndexedItem`1.op_Inequality*
  nameWithType.vb: IndexedItem(Of T).Inequality(IndexedItem(Of T), IndexedItem(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Inequality(CodeJam.Collections.IndexedItem(Of T), CodeJam.Collections.IndexedItem(Of T))
  name.vb: Inequality(IndexedItem(Of T), IndexedItem(Of T))
references:
- uid: CodeJam.Collections
  commentId: N:CodeJam.Collections
  isExternal: false
  name: CodeJam.Collections
  nameWithType: CodeJam.Collections
  fullName: CodeJam.Collections
- uid: System.IEquatable{CodeJam.Collections.IndexedItem`1}
  commentId: T:System.IEquatable{CodeJam.Collections.IndexedItem`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IndexedItem<T>>
  nameWithType: IEquatable<IndexedItem<T>>
  fullName: System.IEquatable<CodeJam.Collections.IndexedItem<T>>
  nameWithType.vb: IEquatable(Of IndexedItem(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Collections.IndexedItem(Of T))
  name.vb: IEquatable(Of IndexedItem(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.CodeJam.NullableHelper.AsNullable``1
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  parent: CodeJam.NullableHelper
  definition: CodeJam.NullableHelper.AsNullable``1(``0)
  name: AsNullable<IndexedItem<T>>()
  nameWithType: NullableHelper.AsNullable<IndexedItem<T>>()
  fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Collections.IndexedItem<T>>()
  nameWithType.vb: NullableHelper.AsNullable(Of IndexedItem(Of T))()
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of CodeJam.Collections.IndexedItem(Of T))()
  name.vb: AsNullable(Of IndexedItem(Of T))()
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable<IndexedItem<T>>
    nameWithType: NullableHelper.AsNullable<IndexedItem<T>>
    fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Collections.IndexedItem<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable(Of IndexedItem(Of T))
    nameWithType: NullableHelper.AsNullable(Of IndexedItem(Of T))
    fullName: CodeJam.NullableHelper.AsNullable(Of CodeJam.Collections.IndexedItem(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, IndexedItem<T>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, IndexedItem<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Collections.IndexedItem<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, IndexedItem(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Collections.IndexedItem(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, IndexedItem(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, IndexedItem<T>>
    nameWithType: RangeExtensions.Contains<T, IndexedItem<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Collections.IndexedItem<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, IndexedItem(Of T))
    nameWithType: RangeExtensions.Contains(Of T, IndexedItem(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Collections.IndexedItem(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, IndexedItem<T>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, IndexedItem<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Collections.IndexedItem<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, IndexedItem(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Collections.IndexedItem(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, IndexedItem(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, IndexedItem<T>>
    nameWithType: RangeExtensions.StartsAfter<T, IndexedItem<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Collections.IndexedItem<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, IndexedItem(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, IndexedItem(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Collections.IndexedItem(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, IndexedItem<T>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, IndexedItem<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Collections.IndexedItem<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, IndexedItem(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Collections.IndexedItem(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, IndexedItem(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, IndexedItem<T>>
    nameWithType: RangeExtensions.EndsBefore<T, IndexedItem<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Collections.IndexedItem<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, IndexedItem(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, IndexedItem(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Collections.IndexedItem(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, IndexedItem<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, IndexedItem<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Collections.IndexedItem<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, IndexedItem(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Collections.IndexedItem(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, IndexedItem(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, IndexedItem<T>>
    nameWithType: RangeExtensions.Contains<T, TKey, IndexedItem<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Collections.IndexedItem<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, IndexedItem(Of T))
    nameWithType: RangeExtensions.Contains(Of T, TKey, IndexedItem(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Collections.IndexedItem(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, IndexedItem<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, IndexedItem<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Collections.IndexedItem<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, IndexedItem(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Collections.IndexedItem(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, IndexedItem(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, IndexedItem<T>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, IndexedItem<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Collections.IndexedItem<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, IndexedItem(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, IndexedItem(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Collections.IndexedItem(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, IndexedItem<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, IndexedItem<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Collections.IndexedItem<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, IndexedItem(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Collections.IndexedItem(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, IndexedItem(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, IndexedItem<T>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, IndexedItem<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Collections.IndexedItem<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, IndexedItem(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, IndexedItem(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Collections.IndexedItem(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.NullableHelper.AsNullable``1(``0)
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  isExternal: false
  name: AsNullable<T>(T)
  nameWithType: NullableHelper.AsNullable<T>(T)
  fullName: CodeJam.NullableHelper.AsNullable<T>(T)
  nameWithType.vb: NullableHelper.AsNullable(Of T)(T)
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of T)(T)
  name.vb: AsNullable(Of T)(T)
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable<T>
    nameWithType: NullableHelper.AsNullable<T>
    fullName: CodeJam.NullableHelper.AsNullable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable(Of T)
    nameWithType: NullableHelper.AsNullable(Of T)
    fullName: CodeJam.NullableHelper.AsNullable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper
  commentId: T:CodeJam.NullableHelper
  parent: CodeJam
  isExternal: false
  name: NullableHelper
  nameWithType: NullableHelper
  fullName: CodeJam.NullableHelper
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Collections.IndexedItem`1.Item*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.Item
  isExternal: false
  name: Item
  nameWithType: IndexedItem<T>.Item
  fullName: CodeJam.Collections.IndexedItem<T>.Item
  nameWithType.vb: IndexedItem(Of T).Item
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Item
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Collections.IndexedItem`1.Index*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.Index
  isExternal: false
  name: Index
  nameWithType: IndexedItem<T>.Index
  fullName: CodeJam.Collections.IndexedItem<T>.Index
  nameWithType.vb: IndexedItem(Of T).Index
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Index
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CodeJam.Collections.IndexedItem`1.IsFirst*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.IsFirst
  isExternal: false
  name: IsFirst
  nameWithType: IndexedItem<T>.IsFirst
  fullName: CodeJam.Collections.IndexedItem<T>.IsFirst
  nameWithType.vb: IndexedItem(Of T).IsFirst
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).IsFirst
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Collections.IndexedItem`1.IsLast*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.IsLast
  isExternal: false
  name: IsLast
  nameWithType: IndexedItem<T>.IsLast
  fullName: CodeJam.Collections.IndexedItem<T>.IsLast
  nameWithType.vb: IndexedItem(Of T).IsLast
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).IsLast
- uid: CodeJam.Collections.IndexedItem`1
  commentId: T:CodeJam.Collections.IndexedItem`1
  parent: CodeJam.Collections
  isExternal: false
  name: IndexedItem<T>
  nameWithType: IndexedItem<T>
  fullName: CodeJam.Collections.IndexedItem<T>
  nameWithType.vb: IndexedItem(Of T)
  fullName.vb: CodeJam.Collections.IndexedItem(Of T)
  name.vb: IndexedItem(Of T)
  spec.csharp:
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.#ctor*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.#ctor
  isExternal: false
  name: IndexedItem
  nameWithType: IndexedItem<T>.IndexedItem
  fullName: CodeJam.Collections.IndexedItem<T>.IndexedItem
  nameWithType.vb: IndexedItem(Of T).IndexedItem
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).IndexedItem
- uid: CodeJam.Collections.IndexedItem`1.Equals*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.Equals
  isExternal: false
  name: Equals
  nameWithType: IndexedItem<T>.Equals
  fullName: CodeJam.Collections.IndexedItem<T>.Equals
  nameWithType.vb: IndexedItem(Of T).Equals
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Equals
- uid: System.IEquatable{CodeJam.Collections.IndexedItem`1}.Equals(CodeJam.Collections.IndexedItem{{T}})
  commentId: M:System.IEquatable{CodeJam.Collections.IndexedItem`1}.Equals(CodeJam.Collections.IndexedItem{`0})
  parent: System.IEquatable{CodeJam.Collections.IndexedItem`1}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(IndexedItem<T>)
  nameWithType: IEquatable<IndexedItem<T>>.Equals(IndexedItem<T>)
  fullName: System.IEquatable<CodeJam.Collections.IndexedItem<T>>.Equals(CodeJam.Collections.IndexedItem<T>)
  nameWithType.vb: IEquatable(Of IndexedItem(Of T)).Equals(IndexedItem(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Collections.IndexedItem(Of T)).Equals(CodeJam.Collections.IndexedItem(Of T))
  name.vb: Equals(IndexedItem(Of T))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<IndexedItem<T>>.Equals
    fullName: System.IEquatable<CodeJam.Collections.IndexedItem<T>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of IndexedItem(Of T)).Equals
    fullName: System.IEquatable(Of CodeJam.Collections.IndexedItem(Of T)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.IndexedItem`1.GetHashCode*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: IndexedItem<T>.GetHashCode
  fullName: CodeJam.Collections.IndexedItem<T>.GetHashCode
  nameWithType.vb: IndexedItem(Of T).GetHashCode
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).GetHashCode
- uid: CodeJam.Collections.IndexedItem`1.op_Equality*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.op_Equality
  isExternal: false
  name: Equality
  nameWithType: IndexedItem<T>.Equality
  fullName: CodeJam.Collections.IndexedItem<T>.Equality
  nameWithType.vb: IndexedItem(Of T).Equality
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Equality
- uid: CodeJam.Collections.IndexedItem`1.op_Inequality*
  commentId: Overload:CodeJam.Collections.IndexedItem`1.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: IndexedItem<T>.Inequality
  fullName: CodeJam.Collections.IndexedItem<T>.Inequality
  nameWithType.vb: IndexedItem(Of T).Inequality
  fullName.vb: CodeJam.Collections.IndexedItem(Of T).Inequality
