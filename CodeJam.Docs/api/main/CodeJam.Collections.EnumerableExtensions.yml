### YamlMime:ManagedReference
items:
- uid: CodeJam.Collections.EnumerableExtensions
  commentId: T:CodeJam.Collections.EnumerableExtensions
  id: EnumerableExtensions
  parent: CodeJam.Collections
  children:
  - CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)
  - CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Func{``0})
  - CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``1)
  - CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1})
  - CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},``2)
  - CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Func{``2})
  - CodeJam.Collections.EnumerableExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.CombineWithNext``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  - CodeJam.Collections.EnumerableExtensions.CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  - CodeJam.Collections.EnumerableExtensions.CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})
  - CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])
  - CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})
  - CodeJam.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  - CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  - CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  - CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``2})
  - CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.IsLast``1(System.Collections.Generic.IEnumerable{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.IsLast``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  - CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  - CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  - CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  - CodeJam.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  - CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  - CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])
  - CodeJam.Collections.EnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  - CodeJam.Collections.EnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  - CodeJam.Collections.EnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - CodeJam.Collections.EnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - CodeJam.Collections.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},CodeJam.Collections.DictionaryDuplicate)
  - CodeJam.Collections.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  - CodeJam.Collections.EnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},CodeJam.Collections.DictionaryDuplicate)
  - CodeJam.Collections.EnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  - CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.EnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])
  - CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - CodeJam.Collections.EnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: CodeJam.Collections.EnumerableExtensions
  type: Class
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EnumerableExtensions
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 7
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nExtensions for <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static class EnumerableExtensions
    content.vb: Public Module EnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)
  id: AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource)
  nameWithType: EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TSource>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AggregateOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nApplies an accumulator function over a sequence.\n"
  example: []
  syntax:
    content: public static TSource AggregateOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
      description: An accumulator function to be invoked on each element.
    - id: defaultValue
      type: '{TSource}'
      description: Default value returned if the source is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The final accumulator value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AggregateOrDefault(Of TSource)(source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault*
  nameWithType.vb: EnumerableExtensions.AggregateOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TSource, TSource), TSource)
  name.vb: AggregateOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``1)
  commentId: M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``1)
  id: AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``1)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate)
  nameWithType: EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate)
  fullName: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, TAccumulate)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AggregateOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
    startLine: 50
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nApplies an accumulator function over a sequence.\n"
  example: []
  syntax:
    content: public static TAccumulate AggregateOrDefault<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, TAccumulate defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    - id: defaultValue
      type: '{TAccumulate}'
      description: Default value returned if the source is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TAccumulate
      description: The type of the accumulator value.
    return:
      type: '{TAccumulate}'
      description: The final accumulator value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AggregateOrDefault(Of TSource, TAccumulate)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), defaultValue As TAccumulate = Nothing) As TAccumulate
  overload: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault*
  nameWithType.vb: EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), TAccumulate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), TAccumulate)
  name.vb: AggregateOrDefault(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), TAccumulate)
- uid: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},``2)
  commentId: M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},``2)
  id: AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},``2)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult)
  nameWithType: EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult)
  fullName: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>, TResult)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AggregateOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
    startLine: 86
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nApplies an accumulator function over a sequence.\n"
  example: []
  syntax:
    content: public static TResult AggregateOrDefault<TSource, TAccumulate, TResult>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector, TResult defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: A function to transform the final accumulator value into the result value.
    - id: defaultValue
      type: '{TResult}'
      description: Default value returned if the source is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TAccumulate
      description: The type of the accumulator value.
    - id: TResult
      description: The type of the resulting value.
    return:
      type: '{TResult}'
      description: The final accumulator value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AggregateOrDefault(Of TSource, TAccumulate, TResult)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult), defaultValue As TResult = Nothing) As TResult
  overload: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault*
  nameWithType.vb: EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult), TResult)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate, TResult)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult), TResult)
  name.vb: AggregateOrDefault(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult), TResult)
- uid: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Func{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Func{``0})
  id: AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Func{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>)
  nameWithType: EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TSource>, System.Func<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AggregateOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
    startLine: 120
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nApplies an accumulator function over a sequence.\n"
  example: []
  syntax:
    content: public static TSource AggregateOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func, Func<TSource> defaultSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
      description: An accumulator function to be invoked on each element.
    - id: defaultSelector
      type: System.Func{{TSource}}
      description: A function to select default value if the source is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The final accumulator value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AggregateOrDefault(Of TSource)(source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource), defaultSelector As Func(Of TSource)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault*
  nameWithType.vb: EnumerableExtensions.AggregateOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource), Func(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TSource, TSource), System.Func(Of TSource))
  name.vb: AggregateOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource), Func(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1})
  id: AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>)
  nameWithType: EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>)
  fullName: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AggregateOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
    startLine: 154
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nApplies an accumulator function over a sequence.\n"
  example: []
  syntax:
    content: public static TAccumulate AggregateOrDefault<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate> defaultSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    - id: defaultSelector
      type: System.Func{{TAccumulate}}
      description: A function to select default value if the source is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TAccumulate
      description: The type of the accumulator value.
    return:
      type: '{TAccumulate}'
      description: The final accumulator value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AggregateOrDefault(Of TSource, TAccumulate)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), defaultSelector As Func(Of TAccumulate)) As TAccumulate
  overload: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault*
  nameWithType.vb: EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate))
  name.vb: AggregateOrDefault(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate))
- uid: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Func{``2})
  commentId: M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Func{``2})
  id: AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Func{``2})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>)
  nameWithType: EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>)
  fullName: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>, System.Func<TResult>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AggregateOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.AggregateOrDefault.cs
    startLine: 191
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nApplies an accumulator function over a sequence.\n"
  example: []
  syntax:
    content: public static TResult AggregateOrDefault<TSource, TAccumulate, TResult>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector, Func<TResult> defaultSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: A function to transform the final accumulator value into the result value.
    - id: defaultSelector
      type: System.Func{{TResult}}
      description: A function to select default value if the source is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TAccumulate
      description: The type of the accumulator value.
    - id: TResult
      description: The type of the resulting value.
    return:
      type: '{TResult}'
      description: The final accumulator value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AggregateOrDefault(Of TSource, TAccumulate, TResult)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult), defaultSelector As Func(Of TResult)) As TResult
  overload: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault*
  nameWithType.vb: EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult), Func(Of TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault(Of TSource, TAccumulate, TResult)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult), System.Func(Of TResult))
  name.vb: AggregateOrDefault(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult), Func(Of TResult))
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: MinOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 247
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Minimum item from the sequence or default value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource)(IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: MinOrDefault(Of TSource)(IEnumerable(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 257
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: defaultValue
      type: '{TSource}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Minimum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource)(source As IEnumerable(Of TSource), defaultValue As TSource) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource)(IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: MinOrDefault(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  id: MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 267
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: The comparer.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Minimum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource)(source As IEnumerable(Of TSource), comparer As IComparer(Of TSource)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: MinOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  id: MinOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 278
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer, TSource defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: The comparer.
    - id: defaultValue
      type: '{TSource}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Minimum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource)(source As IEnumerable(Of TSource), comparer As IComparer(Of TSource), defaultValue As TSource) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource), TSource)
  name.vb: MinOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 293
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Minimum item from the sequence or default value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T)) As T
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T))
  name.vb: MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  id: MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 306
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, T defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    - id: defaultValue
      type: '{T}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Minimum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T), defaultValue As T) As T
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), T)
  name.vb: MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), T)
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 319
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Minimum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T), comparer As IComparer(Of T)) As T
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), System.Collections.Generic.IComparer(Of T))
  name.vb: MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  id: MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T)
  nameWithType: EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T)
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, System.Collections.Generic.IComparer<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 334
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns minimum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer, T defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer.
    - id: defaultValue
      type: '{T}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Minimum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T), comparer As IComparer(Of T), defaultValue As T) As T
  overload: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  nameWithType.vb: EnumerableExtensions.MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), System.Collections.Generic.IComparer(Of T), T)
  name.vb: MinOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T), T)
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 347
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Maximum item from the sequence or default value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource)(IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: MaxOrDefault(Of TSource)(IEnumerable(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 357
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: defaultValue
      type: '{TSource}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Maximum item from the sequence or default value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource)(source As IEnumerable(Of TSource), defaultValue As TSource) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource)(IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: MaxOrDefault(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  id: MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 367
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: The comparer.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Maximum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource)(source As IEnumerable(Of TSource), comparer As IComparer(Of TSource)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: MaxOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  id: MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 378
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer, TSource defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: The comparer.
    - id: defaultValue
      type: '{TSource}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    return:
      type: '{TSource}'
      description: Maximum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource)(source As IEnumerable(Of TSource), comparer As IComparer(Of TSource), defaultValue As TSource) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource), TSource)
  name.vb: MaxOrDefault(Of TSource)(IEnumerable(Of TSource), IComparer(Of TSource), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 393
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Maximum item from the sequence or default value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T)) As T
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T))
  name.vb: MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  id: MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 406
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, T defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    - id: defaultValue
      type: '{T}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Maximum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T), defaultValue As T) As T
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), T)
  name.vb: MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), T)
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 419
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Maximum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T), comparer As IComparer(Of T)) As T
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), System.Collections.Generic.IComparer(Of T))
  name.vb: MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  id: MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``1)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T)
  nameWithType: EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, System.Collections.Generic.IComparer<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxOrDefault.cs
    startLine: 434
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns maximum item from the sequence or default value.
  example: []
  syntax:
    content: public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer, T defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence.
    - id: selector
      type: System.Func{{TSource},{T}}
      description: The value selector.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer.
    - id: defaultValue
      type: '{T}'
      description: The default value to return if the sequence.s empty.
    typeParameters:
    - id: TSource
      description: The type of the elements in the source sequence.
    - id: T
      description: Type of the value.
    return:
      type: '{T}'
      description: Maximum item from the sequence or default value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxOrDefault(Of TSource, T)(source As IEnumerable(Of TSource), selector As Func(Of TSource, T), comparer As IComparer(Of T), defaultValue As T) As T
  overload: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxOrDefault(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), System.Collections.Generic.IComparer(Of T), T)
  name.vb: MaxOrDefault(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T), IComparer(Of T), T)
- uid: CodeJam.Collections.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},CodeJam.Collections.DictionaryDuplicate)
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},CodeJam.Collections.DictionaryDuplicate)
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},CodeJam.Collections.DictionaryDuplicate)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate)
  nameWithType: EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate)
  fullName: CodeJam.Collections.EnumerableExtensions.ToDictionary<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, CodeJam.Collections.DictionaryDuplicate)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDictionary
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\naccording to a specified key selector function and a duplicate handling policy.\n"
  example: []
  syntax:
    content: public static Dictionary<TKey, T> ToDictionary<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, DictionaryDuplicate duplicateHandling)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: A function to extract a key from each element.
    - id: duplicateHandling
      type: CodeJam.Collections.DictionaryDuplicate
      description: Policy for duplicate handling.
    typeParameters:
    - id: T
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    - id: TKey
      description: The type of the key returned by <code data-dev-comment-type="paramref" class="paramref">keySelector</code>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{T}}
      description: A <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> that contains keys and values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of T, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), duplicateHandling As DictionaryDuplicate) As Dictionary(Of TKey, T)
  overload: CodeJam.Collections.EnumerableExtensions.ToDictionary*
  nameWithType.vb: EnumerableExtensions.ToDictionary(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), DictionaryDuplicate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToDictionary(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), CodeJam.Collections.DictionaryDuplicate)
  name.vb: ToDictionary(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), DictionaryDuplicate)
- uid: CodeJam.Collections.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate)
  nameWithType: EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate)
  fullName: CodeJam.Collections.EnumerableExtensions.ToDictionary<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>, CodeJam.Collections.DictionaryDuplicate)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDictionary
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
    startLine: 51
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\naccording to a specified key selector function, a comparer and a duplicate handling policy.\n"
  example: []
  syntax:
    content: public static Dictionary<TKey, T> ToDictionary<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer, DictionaryDuplicate duplicateHandling)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref> to compare keys.
    - id: duplicateHandling
      type: CodeJam.Collections.DictionaryDuplicate
      description: Policy for duplicate handling.
    typeParameters:
    - id: T
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    - id: TKey
      description: The type of the key returned by <code data-dev-comment-type="paramref" class="paramref">keySelector</code>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{T}}
      description: A <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> that contains keys and values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of T, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), comparer As IEqualityComparer(Of TKey), duplicateHandling As DictionaryDuplicate) As Dictionary(Of TKey, T)
  overload: CodeJam.Collections.EnumerableExtensions.ToDictionary*
  nameWithType.vb: EnumerableExtensions.ToDictionary(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey), DictionaryDuplicate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToDictionary(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey), CodeJam.Collections.DictionaryDuplicate)
  name.vb: ToDictionary(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey), DictionaryDuplicate)
- uid: CodeJam.Collections.EnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},CodeJam.Collections.DictionaryDuplicate)
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},CodeJam.Collections.DictionaryDuplicate)
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},CodeJam.Collections.DictionaryDuplicate)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate)
  nameWithType: EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate)
  fullName: CodeJam.Collections.EnumerableExtensions.ToDictionary<T, TKey, TElement>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<T, TElement>, CodeJam.Collections.DictionaryDuplicate)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDictionary
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
    startLine: 71
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\naccording to a specified key selector function, an element selector function and a duplicate handling policy.\n"
  example: []
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<T, TKey, TElement>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, DictionaryDuplicate duplicateHandling)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{T},{TElement}}
      description: A transform function to produce a result element value from each element.
    - id: duplicateHandling
      type: CodeJam.Collections.DictionaryDuplicate
      description: Policy for duplicate handling.
    typeParameters:
    - id: T
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    - id: TKey
      description: The type of the key returned by <code data-dev-comment-type="paramref" class="paramref">keySelector</code>.
    - id: TElement
      description: The type of the value returned by <code data-dev-comment-type="paramref" class="paramref">elementSelector</code>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: A <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> that contains keys and values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of T, TKey, TElement)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement), duplicateHandling As DictionaryDuplicate) As Dictionary(Of TKey, TElement)
  overload: CodeJam.Collections.EnumerableExtensions.ToDictionary*
  nameWithType.vb: EnumerableExtensions.ToDictionary(Of T, TKey, TElement)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TElement), DictionaryDuplicate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToDictionary(Of T, TKey, TElement)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of T, TElement), CodeJam.Collections.DictionaryDuplicate)
  name.vb: ToDictionary(Of T, TKey, TElement)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TElement), DictionaryDuplicate)
- uid: CodeJam.Collections.EnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},CodeJam.Collections.DictionaryDuplicate)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate)
  nameWithType: EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate)
  fullName: CodeJam.Collections.EnumerableExtensions.ToDictionary<T, TKey, TElement>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<T, TElement>, System.Collections.Generic.IEqualityComparer<TKey>, CodeJam.Collections.DictionaryDuplicate)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDictionary
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.ToDictionary.cs
    startLine: 93
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\naccording to a specified key selector function, an element selector function,\na comparer and a duplicate handling policy.\n"
  example: []
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<T, TKey, TElement>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, IEqualityComparer<TKey> comparer, DictionaryDuplicate duplicateHandling)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source to create a lookup dictionary from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{T},{TElement}}
      description: A transform function to produce a result element value from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to compare keys.
    - id: duplicateHandling
      type: CodeJam.Collections.DictionaryDuplicate
      description: Policy for duplicate handling.
    typeParameters:
    - id: T
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    - id: TKey
      description: The type of the value returned by <code data-dev-comment-type="paramref" class="paramref">keySelector</code>.
    - id: TElement
      description: The type of the value returned by <code data-dev-comment-type="paramref" class="paramref">elementSelector</code>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: A <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref> that contains keys and values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of T, TKey, TElement)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement), comparer As IEqualityComparer(Of TKey), duplicateHandling As DictionaryDuplicate) As Dictionary(Of TKey, TElement)
  overload: CodeJam.Collections.EnumerableExtensions.ToDictionary*
  nameWithType.vb: EnumerableExtensions.ToDictionary(Of T, TKey, TElement)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey), DictionaryDuplicate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToDictionary(Of T, TKey, TElement)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of T, TElement), System.Collections.Generic.IEqualityComparer(Of TKey), CodeJam.Collections.DictionaryDuplicate)
  name.vb: ToDictionary(Of T, TKey, TElement)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey), DictionaryDuplicate)
- uid: CodeJam.Collections.EnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})
  id: WithIndex``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: WithIndex<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.WithIndex<T>(IEnumerable<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.WithIndex<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithIndex
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
    startLine: 16
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAssociates an index to each element of the source sequence.\n"
  example: []
  syntax:
    content: public static IEnumerable<IndexedItem<T>> WithIndex<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The input sequence.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{CodeJam.Collections.IndexedItem{{T}}}
      description: "\nA sequence of elements paired with their index in the sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithIndex(Of T)(source As IEnumerable(Of T)) As IEnumerable(Of IndexedItem(Of T))
  overload: CodeJam.Collections.EnumerableExtensions.WithIndex*
  nameWithType.vb: EnumerableExtensions.WithIndex(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.WithIndex(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithIndex(Of T)(IEnumerable(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})
  id: CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>)
  nameWithType: EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>)
  fullName: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, TResult>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CombineWithPrevious
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
    startLine: 49
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Combines item with previous value from the sequence.
  example: []
  syntax:
    content: public static IEnumerable<TResult> CombineWithPrevious<T, TResult>(this IEnumerable<T> source, Func<T, T, TResult> prevNextSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The input sequence.
    - id: prevNextSelector
      type: System.Func{{T},{T},{TResult}}
      description: The previous next selector.
    typeParameters:
    - id: T
      description: The type of the item.
    - id: TResult
      description: The type of the result.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: Sequence of items combined with previous values from the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CombineWithPrevious(Of T, TResult)(source As IEnumerable(Of T), prevNextSelector As Func(Of T, T, TResult)) As IEnumerable(Of TResult)
  overload: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious*
  nameWithType.vb: EnumerableExtensions.CombineWithPrevious(Of T, TResult)(IEnumerable(Of T), Func(Of T, T, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, TResult))
  name.vb: CombineWithPrevious(Of T, TResult)(IEnumerable(Of T), Func(Of T, T, TResult))
- uid: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  id: CombineWithPrevious``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>)
  nameWithType: EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>)
  fullName: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious<T, TResult>(System.Collections.Generic.IEnumerable<T>, T, System.Func<T, T, TResult>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CombineWithPrevious
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
    startLine: 83
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Combines item with previous value from the sequence.
  example: []
  syntax:
    content: public static IEnumerable<TResult> CombineWithPrevious<T, TResult>(this IEnumerable<T> source, T seed, Func<T, T, TResult> prevNextSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The input sequence.
    - id: seed
      type: '{T}'
      description: The seed value to be used as a previous for the first item in the sequence.
    - id: prevNextSelector
      type: System.Func{{T},{T},{TResult}}
      description: The previous next selector.
    typeParameters:
    - id: T
      description: The type of the item.
    - id: TResult
      description: The type of the result.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: Sequence of items combined with previous values from the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CombineWithPrevious(Of T, TResult)(source As IEnumerable(Of T), seed As T, prevNextSelector As Func(Of T, T, TResult)) As IEnumerable(Of TResult)
  overload: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious*
  nameWithType.vb: EnumerableExtensions.CombineWithPrevious(Of T, TResult)(IEnumerable(Of T), T, Func(Of T, T, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), T, System.Func(Of T, T, TResult))
  name.vb: CombineWithPrevious(Of T, TResult)(IEnumerable(Of T), T, Func(Of T, T, TResult))
- uid: CodeJam.Collections.EnumerableExtensions.CombineWithNext``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.CombineWithNext``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  id: CombineWithNext``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>)
  nameWithType: EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>)
  fullName: CodeJam.Collections.EnumerableExtensions.CombineWithNext<T, TResult>(System.Collections.Generic.IEnumerable<T>, T, System.Func<T, T, TResult>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CombineWithNext
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.With.cs
    startLine: 115
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Combines item with next value from the sequence.
  example: []
  syntax:
    content: public static IEnumerable<TResult> CombineWithNext<T, TResult>(this IEnumerable<T> source, T combineLast, Func<T, T, TResult> prevNextSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The input sequence.
    - id: combineLast
      type: '{T}'
      description: The value to be used as a next for the last item in the sequence.
    - id: prevNextSelector
      type: System.Func{{T},{T},{TResult}}
      description: The previous next selector.
    typeParameters:
    - id: T
      description: The type of the item.
    - id: TResult
      description: The type of the result.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: Sequence of items combined with previous values from the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CombineWithNext(Of T, TResult)(source As IEnumerable(Of T), combineLast As T, prevNextSelector As Func(Of T, T, TResult)) As IEnumerable(Of TResult)
  overload: CodeJam.Collections.EnumerableExtensions.CombineWithNext*
  nameWithType.vb: EnumerableExtensions.CombineWithNext(Of T, TResult)(IEnumerable(Of T), T, Func(Of T, T, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.CombineWithNext(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), T, System.Func(Of T, T, TResult))
  name.vb: CombineWithNext(Of T, TResult)(IEnumerable(Of T), T, Func(Of T, T, TResult))
- uid: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupWhileEquals
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Groups items in the sequence while they have same grouping key.
  example: []
  syntax:
    content: public static IEnumerable<IGrouping<TKey, T>> GroupWhileEquals<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The grouping key selector.
    typeParameters:
    - id: T
      description: Type of items in sequence
    - id: TKey
      description: The type of the grouping key.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{T}}}
      description: Grouped items with grouping key.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupWhileEquals(Of T, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey)) As IEnumerable(Of IGrouping(Of TKey, T))
  overload: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals*
  nameWithType.vb: EnumerableExtensions.GroupWhileEquals(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: GroupWhileEquals(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupWhileEquals``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupWhileEquals
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
    startLine: 31
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Groups items in the sequence while they have same grouping key.
  example: []
  syntax:
    content: public static IEnumerable<IGrouping<TKey, T>> GroupWhileEquals<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The grouping key selector.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer.
    typeParameters:
    - id: T
      description: Type of items in sequence
    - id: TKey
      description: The type of the grouping key.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{T}}}
      description: Grouped items with grouping key.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupWhileEquals(Of T, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, T))
  overload: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals*
  nameWithType.vb: EnumerableExtensions.GroupWhileEquals(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupWhileEquals(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1})
  id: GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>)
  nameWithType: EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<T, TItem>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupWhileEquals
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
    startLine: 79
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Groups items in the sequence while they have same grouping key.
  example: []
  syntax:
    content: public static IEnumerable<IGrouping<TKey, TItem>> GroupWhileEquals<T, TItem, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TItem> itemSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The grouping key selector.
    - id: itemSelector
      type: System.Func{{T},{TItem}}
      description: The item selector.
    typeParameters:
    - id: T
      description: Type of items in sequence
    - id: TItem
      description: The type of resulting item.
    - id: TKey
      description: The type of the grouping key.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TItem}}}
      description: Grouped items with grouping key.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupWhileEquals(Of T, TItem, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), itemSelector As Func(Of T, TItem)) As IEnumerable(Of IGrouping(Of TKey, TItem))
  overload: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals*
  nameWithType.vb: EnumerableExtensions.GroupWhileEquals(Of T, TItem, TKey)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals(Of T, TItem, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of T, TItem))
  name.vb: GroupWhileEquals(Of T, TItem, TKey)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TItem))
- uid: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupWhileEquals``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<T, TItem>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupWhileEquals
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
    startLine: 96
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Groups items in the sequence while they have same grouping key.
  example: []
  syntax:
    content: public static IEnumerable<IGrouping<TKey, TItem>> GroupWhileEquals<T, TItem, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TItem> itemSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The grouping key selector.
    - id: itemSelector
      type: System.Func{{T},{TItem}}
      description: The item selector.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer.
    typeParameters:
    - id: T
      description: Type of items in sequence
    - id: TItem
      description: The type of resulting item.
    - id: TKey
      description: The type of the grouping key.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TItem}}}
      description: Grouped items with grouping key.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupWhileEquals(Of T, TItem, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), itemSelector As Func(Of T, TItem), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TItem))
  overload: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals*
  nameWithType.vb: EnumerableExtensions.GroupWhileEquals(Of T, TItem, TKey)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TItem), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals(Of T, TItem, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of T, TItem), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupWhileEquals(Of T, TItem, TKey)(IEnumerable(Of T), Func(Of T, TKey), Func(Of T, TItem), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupWhile<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupWhile
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.GroupWhile.cs
    startLine: 146
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Groups items in the sequence while they have same grouping key.
  example: []
  syntax:
    content: public static IEnumerable<T[]> GroupWhile<T>(this IEnumerable<T> source, Func<T, T, bool> predicate)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source.
    - id: predicate
      type: System.Func{{T},{T},System.Boolean}
      description: Gropung predicate.
    typeParameters:
    - id: T
      description: Type of items in sequence
    return:
      type: System.Collections.Generic.IEnumerable{{T}[]}
      description: Grouped items.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupWhile(Of T)(source As IEnumerable(Of T), predicate As Func(Of T, T, Boolean)) As IEnumerable(Of T())
  overload: CodeJam.Collections.EnumerableExtensions.GroupWhile*
  nameWithType.vb: EnumerableExtensions.GroupWhile(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupWhile(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: GroupWhile(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: CodeJam.Collections.EnumerableExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.EnumerableExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  id: Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Page<T>(IEnumerable<T>, Int32, Int32)
  nameWithType: EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32)
  fullName: CodeJam.Collections.EnumerableExtensions.Page<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.Page.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Page
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.Page.cs
    startLine: 19
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nExtracts <code data-dev-comment-type=\"paramref\" class=\"paramref\">pageSize</code> elements from a sequence at a particular one-based page number.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Page<T>(this IEnumerable<T> source, int pageIndex, int pageSize)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence from which to page.
    - id: pageIndex
      type: System.Int32
      description: The one-based page number.
    - id: pageSize
      type: System.Int32
      description: The size of the page.
    typeParameters:
    - id: T
      description: The type of the elements in the source sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nA new sequence containing elements are at the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">pageIndex</code> from the source sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Page(Of T)(source As IEnumerable(Of T), pageIndex As Integer, pageSize As Integer) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Page*
  nameWithType.vb: EnumerableExtensions.Page(Of T)(IEnumerable(Of T), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Page(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Int32)
  name.vb: Page(Of T)(IEnumerable(Of T), Int32, Int32)
- uid: CodeJam.Collections.EnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.EnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  id: Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Slice<T>(IEnumerable<T>, Int32, Int32)
  nameWithType: EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32)
  fullName: CodeJam.Collections.EnumerableExtensions.Slice<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.Slice.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Slice
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.Slice.cs
    startLine: 27
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nExtracts <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> elements from a sequence at a particular zero-based starting index.\n"
  remarks: "\nIf the starting position or count specified result in slice extending past the end of the sequence,\nit will return all elements up to that point. There is no guarantee that the resulting sequence will\ncontain the number of elements requested - it may have anywhere from 0 to <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code>.<br />\nThis method is implemented in an optimized manner for any sequence implementing <code>IList{T}</code>.<br />\nThe result of Slice() is identical to: <code>sequence.Skip(startIndex).Take(count)</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Slice<T>(this IEnumerable<T> source, int startIndex, int count)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence from which to extract elements.
    - id: startIndex
      type: System.Int32
      description: The zero-based index at which to begin slicing.
    - id: count
      type: System.Int32
      description: The number of items to slice out of the index.
    typeParameters:
    - id: T
      description: The type of the elements in the source sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nA new sequence containing any elements sliced out from the source sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Slice(Of T)(source As IEnumerable(Of T), startIndex As Integer, count As Integer) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Slice*
  nameWithType.vb: EnumerableExtensions.Slice(Of T)(IEnumerable(Of T), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Slice(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Int32)
  name.vb: Slice(Of T)(IEnumerable(Of T), Int32, Int32)
- uid: CodeJam.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  id: Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType: EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  fullName: CodeJam.Collections.EnumerableExtensions.Flatten<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.Flatten.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Flatten
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.Flatten.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns a flattened sequence from a graph or hierarchy of elements by using the specified children selector.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Flatten<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> childrenSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source hierarchy to flatten.
    - id: childrenSelector
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: A function used to retrieve the children of an element.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nA flat sequence of elements produced from the elements in the source hierarchy.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Flatten(Of T)(source As IEnumerable(Of T), childrenSelector As Func(Of T, IEnumerable(Of T))) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Flatten*
  nameWithType.vb: EnumerableExtensions.Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Flatten(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
- uid: CodeJam.Collections.EnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:CodeJam.Collections.EnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TakeLast<T>(IEnumerable<T>, Int32)
  nameWithType: EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32)
  fullName: CodeJam.Collections.EnumerableExtensions.TakeLast<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TakeLast.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TakeLast
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TakeLast.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns a specified number of contiguous elements from the end of a sequence.\n"
  remarks: "\nThis operator uses deferred execution and streams its results.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> source, int count)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence to return the last element of.
    - id: count
      type: System.Int32
      description: The number of elements to return.
    typeParameters:
    - id: T
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements from the end of the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeLast(Of T)(source As IEnumerable(Of T), count As Integer) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TakeLast*
  nameWithType.vb: EnumerableExtensions.TakeLast(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TakeLast(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: TakeLast(Of T)(IEnumerable(Of T), Int32)
- uid: CodeJam.Collections.EnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:CodeJam.Collections.EnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Split<T>(IEnumerable<T>, Int32)
  nameWithType: EnumerableExtensions.Split<T>(IEnumerable<T>, Int32)
  fullName: CodeJam.Collections.EnumerableExtensions.Split<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.Split.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Split
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.Split.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nSplits the input sequence into a sequence of chunks of the specified size.\n"
  example: []
  syntax:
    content: public static IEnumerable<T[]> Split<T>(this IEnumerable<T> source, int size)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence to split into chunks.
    - id: size
      type: System.Int32
      description: The size of the chunks.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}[]}
      description: "\nA sequence of chunks of the specified size.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Split(Of T)(source As IEnumerable(Of T), size As Integer) As IEnumerable(Of T())
  overload: CodeJam.Collections.EnumerableExtensions.Split*
  nameWithType.vb: EnumerableExtensions.Split(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Split(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: Split(Of T)(IEnumerable(Of T), Int32)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Byte>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 29
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Byte}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Byte))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Byte>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 72
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Byte}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Byte), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Byte>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 111
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Byte}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Byte)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Byte>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 168
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Byte}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Byte)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.SByte>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 224
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.SByte}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.SByte))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.SByte>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 267
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.SByte}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.SByte), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.SByte>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 306
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.SByte}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.SByte)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.SByte>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 363
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.SByte}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.SByte)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int16>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 419
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int16}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int16))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int16>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 462
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int16}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int16), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int16>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 501
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int16}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int16)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int16>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 558
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int16}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int16)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt16>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 614
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt16}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt16))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt16>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 657
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt16}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt16), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt16>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 696
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt16}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt16)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt16>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 753
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt16}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt16)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 809
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 852
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 891
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 948
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt32>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1004
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt32))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt32>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1047
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt32}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt32), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt32>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1086
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt32)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt32>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1143
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt32}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt32)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1199
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1242
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1281
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1338
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt64>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1394
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt64))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt64>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1437
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt64}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt64), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt64>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1476
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt64)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt64>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1533
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt64}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt64)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1589
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1637
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1681
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1738
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1794
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1842
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1886
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1943
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 1999
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2042
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType: EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2081
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: MinBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  id: MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2138
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)), TSource)
  name.vb: MinByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Byte>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2198
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Byte}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Byte))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Byte>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2241
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Byte}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Byte), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Byte), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Byte>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2280
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Byte}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Byte)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Byte>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2337
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Byte}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Byte?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Byte)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Byte)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.SByte>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2393
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.SByte}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.SByte))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.SByte>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2436
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.SByte}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.SByte), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, SByte), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.SByte>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2475
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.SByte}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.SByte)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.SByte>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2532
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.SByte}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, SByte?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.SByte)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of SByte)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int16>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2588
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int16}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int16))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int16>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2631
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int16}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int16), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int16), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int16>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2670
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int16}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int16)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int16>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2727
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int16}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Short?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int16)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int16)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt16>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2783
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt16}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt16))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt16>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2826
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt16}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt16), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt16), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt16>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2865
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt16}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt16)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt16>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2922
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt16}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UShort?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt16)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt16)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 2978
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3021
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3060
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3117
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt32>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3173
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt32))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt32>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3216
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt32}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt32), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt32), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt32>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3255
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt32)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt32>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3312
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt32}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, UInteger?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt32)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt32)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3368
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3411
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3450
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3507
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt64>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3563
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt64))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.UInt64>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3606
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.UInt64}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.UInt64), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, UInt64), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt64>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3645
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt64)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.UInt64>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3702
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.UInt64}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, ULong?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.UInt64)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of UInt64)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3758
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3806
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3850
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3907
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 3963
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 4011
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 4055
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 4112
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 4168
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 4211
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType: EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 4250
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: MaxBy(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  id: MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.generated.cs
    startLine: 4307
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)), TSource)
  name.vb: MaxByOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  id: TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType: EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T)(source As IEnumerable(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T))) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: TopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  id: TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>)
  nameWithType: EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 30
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T)(source As ICollection(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T))) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: TopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)))
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  id: TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 44
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T, TKey>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: Function that returns an item key, wich is used to compare.
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T, TKey)(source As IEnumerable(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), keySelector As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Func(Of T, TKey))
  name.vb: TopoSort(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  id: TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T, TKey>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 59
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T, TKey>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: Function that returns an item key, wich is used to compare.
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T, TKey)(source As ICollection(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), keySelector As Func(Of T, TKey)) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T, TKey)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T, TKey)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Func(Of T, TKey))
  name.vb: TopoSort(Of T, TKey)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 75
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T, TKey>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector, IEqualityComparer<TKey> keyComparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: Function that returns an item key, wich is used to compare.
    - id: keyComparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: Equality comparer for item comparison
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T, TKey)(source As IEnumerable(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), keySelector As Func(Of T, TKey), keyComparer As IEqualityComparer(Of TKey)) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: TopoSort(Of T, TKey)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T, TKey>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 92
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T, TKey>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector, IEqualityComparer<TKey> keyComparer)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: Function that returns an item key, wich is used to compare.
    - id: keyComparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: Equality comparer for item comparison
    typeParameters:
    - id: T
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T, TKey)(source As ICollection(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), keySelector As Func(Of T, TKey), keyComparer As IEqualityComparer(Of TKey)) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T, TKey)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T, TKey)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: TopoSort(Of T, TKey)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), Func(Of T, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  id: TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  nameWithType: EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 108
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: Equality comparer for item comparison
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T)(source As IEnumerable(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), equalityComparer As IEqualityComparer(Of T)) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: TopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  id: TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  nameWithType: EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 127
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> TopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: Equality comparer for item comparison
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopoSort(Of T)(source As ICollection(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), equalityComparer As IEqualityComparer(Of T)) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.TopoSort*
  nameWithType.vb: EnumerableExtensions.TopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.TopoSort(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: TopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  id: GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType: EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupTopoSort<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupTopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 147
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T[]> GroupTopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}[]}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code> separated by dependency level.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupTopoSort(Of T)(source As IEnumerable(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T))) As IEnumerable(Of T())
  overload: CodeJam.Collections.EnumerableExtensions.GroupTopoSort*
  nameWithType.vb: EnumerableExtensions.GroupTopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupTopoSort(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: GroupTopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
- uid: CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  id: GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>)
  nameWithType: EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupTopoSort<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupTopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 160
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T[]> GroupTopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}[]}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code> separated by dependency level.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupTopoSort(Of T)(source As ICollection(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T))) As IEnumerable(Of T())
  overload: CodeJam.Collections.EnumerableExtensions.GroupTopoSort*
  nameWithType.vb: EnumerableExtensions.GroupTopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupTopoSort(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: GroupTopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)))
- uid: CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  id: GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  nameWithType: EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupTopoSort<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupTopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 174
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T[]> GroupTopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: Equality comparer for item comparison
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}[]}
      description: Topologically sorted list of items in <code data-dev-comment-type="paramref" class="paramref">source</code> separated by dependency level.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupTopoSort(Of T)(source As IEnumerable(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), equalityComparer As IEqualityComparer(Of T)) As IEnumerable(Of T())
  overload: CodeJam.Collections.EnumerableExtensions.GroupTopoSort*
  nameWithType.vb: EnumerableExtensions.GroupTopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupTopoSort(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: GroupTopoSort(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  id: GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  nameWithType: EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.GroupTopoSort<T>(System.Collections.Generic.ICollection<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GroupTopoSort
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.TopoSort.cs
    startLine: 191
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPerforms topological sort on <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T[]> GroupTopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: Collection to sort.
    - id: dependsOnGetter
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
      description: Function that returns items dependent on specified item.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: Equality comparer for item comparison
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}[]}
      description: "\nTopologically sorted list of items in <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>, separated by dependency level.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupTopoSort(Of T)(source As ICollection(Of T), dependsOnGetter As Func(Of T, IEnumerable(Of T)), equalityComparer As IEqualityComparer(Of T)) As IEnumerable(Of T())
  overload: CodeJam.Collections.EnumerableExtensions.GroupTopoSort*
  nameWithType.vb: EnumerableExtensions.GroupTopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.GroupTopoSort(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: GroupTopoSort(Of T)(ICollection(Of T), Func(Of T, IEnumerable(Of T)), IEqualityComparer(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])
  commentId: M:CodeJam.Collections.EnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])
  id: Union``1(System.Collections.Generic.IEnumerable{``0},``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Union<T>(IEnumerable<T>, T[])
  nameWithType: EnumerableExtensions.Union<T>(IEnumerable<T>, T[])
  fullName: CodeJam.Collections.EnumerableExtensions.Union<T>(System.Collections.Generic.IEnumerable<T>, T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProduces the set union of two sequences by using the default equality comparer.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Union<T>(this IEnumerable<T> source, params T[] elements)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements form the first set for the union.
    - id: elements
      type: '{T}[]'
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements form the second set for the union.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from both input sequences, excluding duplicates.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T)(source As IEnumerable(Of T), ParamArray elements As T()) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Union*
  nameWithType.vb: EnumerableExtensions.Union(Of T)(IEnumerable(Of T), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Union(Of T)(System.Collections.Generic.IEnumerable(Of T), T())
  name.vb: Union(Of T)(IEnumerable(Of T), T())
- uid: CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Concat``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Concat<T>(IEnumerable<T>, T)
  nameWithType: EnumerableExtensions.Concat<T>(IEnumerable<T>, T)
  fullName: CodeJam.Collections.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Concat
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAppends specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">element</code> to end of the collection.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Concat<T>(this IEnumerable<T> source, T element)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source enumerable.
    - id: element
      type: '{T}'
      description: Element to concat.
    typeParameters:
    - id: T
      description: Type of element.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Concatenated enumerable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of T)(source As IEnumerable(Of T), element As T) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Concat*
  nameWithType.vb: EnumerableExtensions.Concat(Of T)(IEnumerable(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Concat(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Concat(Of T)(IEnumerable(Of T), T)
- uid: CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])
  commentId: M:CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])
  id: Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Concat<T>(IEnumerable<T>, T[])
  nameWithType: EnumerableExtensions.Concat<T>(IEnumerable<T>, T[])
  fullName: CodeJam.Collections.EnumerableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>, T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Concat
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 55
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAppends specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">elements</code> to end of the collection.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Concat<T>(this IEnumerable<T> source, params T[] elements)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source enumerable.
    - id: elements
      type: '{T}[]'
      description: Elements to concat.
    typeParameters:
    - id: T
      description: Type of element.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Concatenated enumerable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of T)(source As IEnumerable(Of T), ParamArray elements As T()) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Concat*
  nameWithType.vb: EnumerableExtensions.Concat(Of T)(IEnumerable(Of T), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Concat(Of T)(System.Collections.Generic.IEnumerable(Of T), T())
  name.vb: Concat(Of T)(IEnumerable(Of T), T())
- uid: CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Prepend<T>(IEnumerable<T>, T)
  nameWithType: EnumerableExtensions.Prepend<T>(IEnumerable<T>, T)
  fullName: CodeJam.Collections.EnumerableExtensions.Prepend<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Prepend
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 78
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPrepends specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">element</code> to the collection start.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Prepend<T>(this IEnumerable<T> source, T element)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source enumerable.
    - id: element
      type: '{T}'
      description: Element to prepend.
    typeParameters:
    - id: T
      description: Type of element.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Concatenated enumerable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Prepend(Of T)(source As IEnumerable(Of T), element As T) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Prepend*
  nameWithType.vb: EnumerableExtensions.Prepend(Of T)(IEnumerable(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Prepend(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Prepend(Of T)(IEnumerable(Of T), T)
- uid: CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])
  commentId: M:CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])
  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Prepend<T>(IEnumerable<T>, T[])
  nameWithType: EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[])
  fullName: CodeJam.Collections.EnumerableExtensions.Prepend<T>(System.Collections.Generic.IEnumerable<T>, T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Prepend
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 100
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nPrepends specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">elements</code> to the collection start.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Prepend<T>(this IEnumerable<T> source, params T[] elements)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source enumerable.
    - id: elements
      type: '{T}[]'
      description: Elements to prepend.
    typeParameters:
    - id: T
      description: Type of element.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Concatenated enumerable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Prepend(Of T)(source As IEnumerable(Of T), ParamArray elements As T()) As IEnumerable(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.Prepend*
  nameWithType.vb: EnumerableExtensions.Prepend(Of T)(IEnumerable(Of T), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.Prepend(Of T)(System.Collections.Generic.IEnumerable(Of T), T())
  name.vb: Prepend(Of T)(IEnumerable(Of T), T())
- uid: CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  id: ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToHashSet<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.ToHashSet<T>(IEnumerable<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.ToHashSet<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToHashSet
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 124
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static HashSet<T> ToHashSet<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.HashSet%601" data-throw-if-not-resolved="false"></xref> from.
    typeParameters:
    - id: T
      description: The type of the elements of source.
    return:
      type: System.Collections.Generic.HashSet{{T}}
      description: "\nA <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToHashSet(Of T)(source As IEnumerable(Of T)) As HashSet(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.ToHashSet*
  nameWithType.vb: EnumerableExtensions.ToHashSet(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToHashSet(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ToHashSet(Of T)(IEnumerable(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.ToHashSet<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToHashSet
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 137
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> with the specified equality comparer.\n"
  example: []
  syntax:
    content: public static HashSet<T> ToHashSet<T>(this IEnumerable<T> source, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.HashSet%601" data-throw-if-not-resolved="false"></xref> from.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: >-
        The <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref> implementation to use

        to comparing values in the set, or <code>null</code> to use the default implementation for the set type.
    typeParameters:
    - id: T
      description: The type of the elements of source.
    return:
      type: System.Collections.Generic.HashSet{{T}}
      description: "\nA <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToHashSet(Of T)(source As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As HashSet(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.ToHashSet*
  nameWithType.vb: EnumerableExtensions.ToHashSet(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToHashSet(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: ToHashSet(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  nameWithType: EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.ToHashSet<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToHashSet
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 153
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static HashSet<TKey> ToHashSet<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.HashSet%601" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: T
      description: The type of the elements of source.
    - id: TKey
      description: The type of the key returned by <code data-dev-comment-type="paramref" class="paramref">keySelector</code>.
    return:
      type: System.Collections.Generic.HashSet{{TKey}}
      description: "\nA <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> that contains keys from the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToHashSet(Of T, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey)) As HashSet(Of TKey)
  overload: CodeJam.Collections.EnumerableExtensions.ToHashSet*
  nameWithType.vb: EnumerableExtensions.ToHashSet(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToHashSet(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey))
  name.vb: ToHashSet(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.ToHashSet<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToHashSet
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 169
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates a <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> with the specified equality comparer.\n"
  example: []
  syntax:
    content: public static HashSet<TKey> ToHashSet<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.HashSet%601" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref> implementation to use

        to comparing values in the set, or <code>null</code> to use the default implementation for the set type.
    typeParameters:
    - id: T
      description: The type of the elements of source.
    - id: TKey
      description: The type of the key returned by <code data-dev-comment-type="paramref" class="paramref">keySelector</code>.
    return:
      type: System.Collections.Generic.HashSet{{TKey}}
      description: "\nA <xref href=\"System.Collections.Generic.HashSet%601\" data-throw-if-not-resolved=\"false\"></xref> that contains keys from the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToHashSet(Of T, TKey)(source As IEnumerable(Of T), keySelector As Func(Of T, TKey), comparer As IEqualityComparer(Of TKey)) As HashSet(Of TKey)
  overload: CodeJam.Collections.EnumerableExtensions.ToHashSet*
  nameWithType.vb: EnumerableExtensions.ToHashSet(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToHashSet(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToHashSet(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0})
  id: OrderBy``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.OrderBy<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: OrderBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 184
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nSorts the elements of a sequence in ascending order.\n"
  example: []
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderBy<TSource>(this IEnumerable<TSource> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to order.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IOrderedEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource)(source As IEnumerable(Of TSource)) As IOrderedEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.OrderBy*
  nameWithType.vb: EnumerableExtensions.OrderBy(Of TSource)(IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.OrderBy(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: OrderBy(Of TSource)(IEnumerable(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})
  id: OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource>(IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.OrderByDescending<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: OrderByDescending
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 196
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nSorts the elements of a sequence in descending order.\n"
  example: []
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource>(this IEnumerable<TSource> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to order.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IOrderedEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource)(source As IEnumerable(Of TSource)) As IOrderedEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.OrderByDescending*
  nameWithType.vb: EnumerableExtensions.OrderByDescending(Of TSource)(IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.OrderByDescending(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: OrderByDescending(Of TSource)(IEnumerable(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DistinctBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 208
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns a sequence with distinct elements from the input sequence based on the specified key.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to return distinct elements from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains distinct elements from the source sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistinctBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.DistinctBy*
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.DistinctBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: DistinctBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DistinctBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 223
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns a sequence with distinct elements from the input sequence based on the specified key and key comparer.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to return distinct elements from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains distinct elements from the source sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistinctBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.DistinctBy*
  nameWithType.vb: EnumerableExtensions.DistinctBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.DistinctBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: DistinctBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.ExceptBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExceptBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 239
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProduces the set difference of two sequences by using the specified key to compare values.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose elements that are not also in second will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nA sequence that contains the set difference of the elements of two sequences.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExceptBy(Of TSource, TKey)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.ExceptBy*
  nameWithType.vb: EnumerableExtensions.ExceptBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ExceptBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ExceptBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.ExceptBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExceptBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 256
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProduces the set difference of two sequences by using the specified key and <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> to compare values.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose elements that are not also in second will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nA sequence that contains the set difference of the elements of two sequences.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExceptBy(Of TSource, TKey)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.ExceptBy*
  nameWithType.vb: EnumerableExtensions.ExceptBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ExceptBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ExceptBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.IntersectBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IntersectBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 273
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProduces the set intersection of two sequences by using the specified key to compare values.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in second will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in the first sequence will be returned.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nA sequence that contains the elements that form the set intersection of two sequences.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IntersectBy(Of TSource, TKey)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.IntersectBy*
  nameWithType.vb: EnumerableExtensions.IntersectBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.IntersectBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: IntersectBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.IntersectBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IntersectBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 290
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProduces the set intersection of two sequences by using the specified key and <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> to compare values.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in second will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in the first sequence will be returned.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nA sequence that contains the elements that form the set intersection of two sequences.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IntersectBy(Of TSource, TKey)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.IntersectBy*
  nameWithType.vb: EnumerableExtensions.IntersectBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.IntersectBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: IntersectBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType: EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.UnionBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UnionBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 307
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProduces the set union of two sequences by using the specified key to compare values.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements form the first set for the union.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements form the second set for the union.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from both input sequences, excluding duplicates.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UnionBy(Of TSource, TKey)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.UnionBy*
  nameWithType.vb: EnumerableExtensions.UnionBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.UnionBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: UnionBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType: EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.EnumerableExtensions.UnionBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UnionBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 324
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProduces the set union of two sequences by using the specified key and <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> to compare values.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements form the first set for the union.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> whose distinct elements form the second set for the union.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from both input sequences, excluding duplicates.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UnionBy(Of TSource, TKey)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.UnionBy*
  nameWithType.vb: EnumerableExtensions.UnionBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.UnionBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: UnionBy(Of TSource, TKey)(IEnumerable(Of TSource), IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.EnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:CodeJam.Collections.EnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  id: SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource>(IEnumerable<IEnumerable<TSource>>)
  nameWithType: EnumerableExtensions.SelectMany<TSource>(IEnumerable<IEnumerable<TSource>>)
  fullName: CodeJam.Collections.EnumerableExtensions.SelectMany<TSource>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SelectMany
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 342
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProjects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> and flattens the resulting sequences into\none sequence.\n"
  example: []
  syntax:
    content: public static IEnumerable<TSource> SelectMany<TSource>(this IEnumerable<IEnumerable<TSource>> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{TSource}}}
      description: A sequence of values to project.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the one-to-many transform function\non each element of the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource)(source As IEnumerable(Of IEnumerable(Of TSource))) As IEnumerable(Of TSource)
  overload: CodeJam.Collections.EnumerableExtensions.SelectMany*
  nameWithType.vb: EnumerableExtensions.SelectMany(Of TSource)(IEnumerable(Of IEnumerable(Of TSource)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.SelectMany(Of TSource)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of TSource)))
  name.vb: SelectMany(Of TSource)(IEnumerable(Of IEnumerable(Of TSource)))
- uid: CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<T>(IEnumerable<T>, T)
  nameWithType: EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T)
  fullName: CodeJam.Collections.EnumerableExtensions.FirstOrDefault<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FirstOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 358
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns first element, or specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">defaultValue</code>, if sequence is empty.\n"
  example: []
  syntax:
    content: public static T FirstOrDefault<T>(this IEnumerable<T> source, T defaultValue)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: defaultValue
      type: '{T}'
      description: Default value.
    typeParameters:
    - id: T
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    return:
      type: '{T}'
      description: "\n<code>default</code>(<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>) if <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> is empty; otherwise, the first element in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of T)(source As IEnumerable(Of T), defaultValue As T) As T
  overload: CodeJam.Collections.EnumerableExtensions.FirstOrDefault*
  nameWithType.vb: EnumerableExtensions.FirstOrDefault(Of T)(IEnumerable(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.FirstOrDefault(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: FirstOrDefault(Of T)(IEnumerable(Of T), T)
- uid: CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})
  commentId: M:CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>)
  nameWithType: EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>)
  fullName: CodeJam.Collections.EnumerableExtensions.FirstOrDefault<T>(System.Collections.Generic.IEnumerable<T>, T, System.Func<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FirstOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 381
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns the first element of the sequence that satisfies a condition or a specified\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">defaultValue</code> if no such element is found.\n"
  example: []
  syntax:
    content: public static T FirstOrDefault<T>(this IEnumerable<T> source, T defaultValue, Func<T, bool> predicate)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: defaultValue
      type: '{T}'
      description: Default value.
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: T
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    return:
      type: '{T}'
      description: "\n<code>default</code>(<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>) if <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> is empty or if no element passes the test\nspecified by <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code>; otherwise, the first element in source that passes the test specified\nby <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of T)(source As IEnumerable(Of T), defaultValue As T, predicate As Func(Of T, Boolean)) As T
  overload: CodeJam.Collections.EnumerableExtensions.FirstOrDefault*
  nameWithType.vb: EnumerableExtensions.FirstOrDefault(Of T)(IEnumerable(Of T), T, Func(Of T, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.FirstOrDefault(Of T)(System.Collections.Generic.IEnumerable(Of T), T, System.Func(Of T, System.Boolean))
  name.vb: FirstOrDefault(Of T)(IEnumerable(Of T), T, Func(Of T, Boolean))
- uid: CodeJam.Collections.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})
  id: AsList``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AsList<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.AsList<T>(IEnumerable<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.AsList<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AsList
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 404
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCasts the specified sequence to <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> if possible, or creates a <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> from.\n"
  example: []
  syntax:
    content: public static List<T> AsList<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.List%601" data-throw-if-not-resolved="false"></xref> from.
    typeParameters:
    - id: T
      description: The type of the elements of source.
    return:
      type: System.Collections.Generic.List{{T}}
      description: "\nA <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsList(Of T)(source As IEnumerable(Of T)) As List(Of T)
  overload: CodeJam.Collections.EnumerableExtensions.AsList*
  nameWithType.vb: EnumerableExtensions.AsList(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AsList(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AsList(Of T)(IEnumerable(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0})
  id: AsArray``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: AsArray<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.AsArray<T>(IEnumerable<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.AsArray<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AsArray
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 416
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCasts the specified sequence to array if possible, or creates an array from.\n"
  example: []
  syntax:
    content: public static T[] AsArray<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create an array from.
    typeParameters:
    - id: T
      description: The type of the elements of source.
    return:
      type: '{T}[]'
      description: "\nAn array that contains elements from the input sequence.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsArray(Of T)(source As IEnumerable(Of T)) As T()
  overload: CodeJam.Collections.EnumerableExtensions.AsArray*
  nameWithType.vb: EnumerableExtensions.AsArray(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.AsArray(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AsArray(Of T)(IEnumerable(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0})
  id: ToStrings``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToStrings<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.ToStrings<T>(IEnumerable<T>)
  fullName: CodeJam.Collections.EnumerableExtensions.ToStrings<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToStrings
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 426
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns string representations of <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> items.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> ToStrings<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to create strings from.
    typeParameters:
    - id: T
      description: The type of the elements of source.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Enumeration of string representation of <code data-dev-comment-type="paramref" class="paramref">source</code> elements.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToStrings(Of T)(source As IEnumerable(Of T)) As IEnumerable(Of String)
  overload: CodeJam.Collections.EnumerableExtensions.ToStrings*
  nameWithType.vb: EnumerableExtensions.ToStrings(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.ToStrings(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ToStrings(Of T)(IEnumerable(Of T))
- uid: CodeJam.Collections.EnumerableExtensions.IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsFirst<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.IsFirst<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsFirst
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 451
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nChecks, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is first element of <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static bool IsFirst<TSource>(this IEnumerable<TSource> source, TSource item)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to check.
    - id: item
      type: '{TSource}'
      description: Source item to compare with first element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has at least one element and first element is equals to\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code>, otherwise <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsFirst(Of TSource)(source As IEnumerable(Of TSource), item As TSource) As Boolean
  overload: CodeJam.Collections.EnumerableExtensions.IsFirst*
  nameWithType.vb: EnumerableExtensions.IsFirst(Of TSource)(IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.IsFirst(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: IsFirst(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: IsFirst``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.IsFirst<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsFirst
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 466
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nChecks, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is first element of <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static bool IsFirst<TSource>(this IEnumerable<TSource> source, TSource item, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to check.
    - id: item
      type: '{TSource}'
      description: Source item to compare with first element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: The comparer.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has at least one element and first element is equals to\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code>, otherwise <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsFirst(Of TSource)(source As IEnumerable(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
  overload: CodeJam.Collections.EnumerableExtensions.IsFirst*
  nameWithType.vb: EnumerableExtensions.IsFirst(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.IsFirst(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: IsFirst(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.IsLast``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.IsLast``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: IsLast``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsLast<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.IsLast<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLast
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 496
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nChecks, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is last element of <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static bool IsLast<TSource>(this IEnumerable<TSource> source, TSource item)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to check.
    - id: item
      type: '{TSource}'
      description: Source item to compare with last element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has at least one element and last element is equals to\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code>, otherwise <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLast(Of TSource)(source As IEnumerable(Of TSource), item As TSource) As Boolean
  overload: CodeJam.Collections.EnumerableExtensions.IsLast*
  nameWithType.vb: EnumerableExtensions.IsLast(Of TSource)(IEnumerable(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.IsLast(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: IsLast(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.IsLast``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.EnumerableExtensions.IsLast``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: IsLast``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: CodeJam.Collections.EnumerableExtensions.IsLast<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLast
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.cs
    startLine: 511
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nChecks, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> is last element of <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>.\n"
  example: []
  syntax:
    content: public static bool IsLast<TSource>(this IEnumerable<TSource> source, TSource item, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to check.
    - id: item
      type: '{TSource}'
      description: Source item to compare with last element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: The comparer.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has at least one element and last element is equals to\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code>, otherwise <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLast(Of TSource)(source As IEnumerable(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
  overload: CodeJam.Collections.EnumerableExtensions.IsLast*
  nameWithType.vb: EnumerableExtensions.IsLast(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.IsLast(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: IsLast(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>)
  nameWithType: EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code data-dev-comment-type="paramref" class="paramref">source</code> has no not null elements
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue))
  name.vb: MinBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  id: MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 42
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code data-dev-comment-type="paramref" class="paramref">source</code> has no not null elements
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue), TSource)
  name.vb: MinByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>)
  nameWithType: EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>)
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>, System.Collections.Generic.IComparer<TValue>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 60
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TValue}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: The item with minimum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinBy(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue), comparer As IComparer(Of TValue)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinBy*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code data-dev-comment-type="paramref" class="paramref">source</code> has no not null elements
  nameWithType.vb: EnumerableExtensions.MinBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinBy(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue), System.Collections.Generic.IComparer(Of TValue))
  name.vb: MinBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue))
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  id: MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource)
  nameWithType: EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>, System.Collections.Generic.IComparer<TValue>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MinByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 136
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with minimum value.\n"
  example: []
  syntax:
    content: public static TSource MinByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TValue}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: "\nThe item with minimum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinByOrDefault(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue), comparer As IComparer(Of TValue), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  nameWithType.vb: EnumerableExtensions.MinByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MinByOrDefault(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue), System.Collections.Generic.IComparer(Of TValue), TSource)
  name.vb: MinByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>)
  nameWithType: EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 210
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with maximum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue))
  name.vb: MaxBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  id: MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 228
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with maximum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue), TSource)
  name.vb: MaxByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), TSource)
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>)
  nameWithType: EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>, System.Collections.Generic.IComparer<TValue>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxBy
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 245
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with maximum value.\n"
  example: []
  syntax:
    content: public static TSource MaxBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TValue}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: The item with maximum value in the sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxBy(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue), comparer As IComparer(Of TValue)) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxBy*
  nameWithType.vb: EnumerableExtensions.MaxBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxBy(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue), System.Collections.Generic.IComparer(Of TValue))
  name.vb: MaxBy(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue))
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  commentId: M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  id: MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource)
  nameWithType: EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource)
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault<TSource, TValue>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TValue>, System.Collections.Generic.IComparer<TValue>, TSource)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MaxByOrDefault
    path: ../Main/src/Collections/Enumerable/EnumerableExtensions.MinMaxBy.cs
    startLine: 321
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInvokes a <code data-dev-comment-type=\"paramref\" class=\"paramref\">selector</code> on each element of a <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code>\nand returns the item with maximum value.\n"
  example: []
  syntax:
    content: public static TSource MaxByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer, TSource defaultValue = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},{TValue}}
      description: A transform function to apply to each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TValue}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    - id: defaultValue
      type: '{TSource}'
      description: Value returned if collection contains no not null elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    - id: TValue
      description: Type of the value
    return:
      type: '{TSource}'
      description: "\nThe item with maximum value in the sequence or <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TSource</code> default value if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> has no not null elements.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxByOrDefault(Of TSource, TValue)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TValue), comparer As IComparer(Of TValue), defaultValue As TSource = Nothing) As TSource
  overload: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  nameWithType.vb: EnumerableExtensions.MaxByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault(Of TSource, TValue)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TValue), System.Collections.Generic.IComparer(Of TValue), TSource)
  name.vb: MaxByOrDefault(Of TSource, TValue)(IEnumerable(Of TSource), Func(Of TSource, TValue), IComparer(Of TValue), TSource)
references:
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections
  commentId: N:CodeJam.Collections
  isExternal: false
  name: CodeJam.Collections
  nameWithType: CodeJam.Collections
  fullName: CodeJam.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault
  isExternal: false
  name: AggregateOrDefault
  nameWithType: EnumerableExtensions.AggregateOrDefault
  fullName: CodeJam.Collections.EnumerableExtensions.AggregateOrDefault
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{TSource},{TSource}}
  commentId: T:System.Func{``0,``0,``0}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TSource, TSource>
  nameWithType: Func<TSource, TSource, TSource>
  fullName: System.Func<TSource, TSource, TSource>
  nameWithType.vb: Func(Of TSource, TSource, TSource)
  fullName.vb: System.Func(Of TSource, TSource, TSource)
  name.vb: Func(Of TSource, TSource, TSource)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TSource
  isExternal: false
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: '{TAccumulate}'
  commentId: '!:TAccumulate'
  definition: TAccumulate
  name: TAccumulate
  nameWithType: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}
  commentId: T:System.Func{``1,``0,``1}
  parent: System
  definition: System.Func`3
  name: Func<TAccumulate, TSource, TAccumulate>
  nameWithType: Func<TAccumulate, TSource, TAccumulate>
  fullName: System.Func<TAccumulate, TSource, TAccumulate>
  nameWithType.vb: Func(Of TAccumulate, TSource, TAccumulate)
  fullName.vb: System.Func(Of TAccumulate, TSource, TAccumulate)
  name.vb: Func(Of TAccumulate, TSource, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: )
    nameWithType: )
    fullName: )
- uid: TAccumulate
  isExternal: false
  name: TAccumulate
  nameWithType: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TResult}}
  commentId: T:System.Func{``1,``2}
  parent: System
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  nameWithType: Func<TAccumulate, TResult>
  fullName: System.Func<TAccumulate, TResult>
  nameWithType.vb: Func(Of TAccumulate, TResult)
  fullName.vb: System.Func(Of TAccumulate, TResult)
  name.vb: Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{{TSource}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TSource>
  nameWithType: Func<TSource>
  fullName: System.Func<TSource>
  nameWithType.vb: Func(Of TSource)
  fullName.vb: System.Func(Of TSource)
  name.vb: Func(Of TSource)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TAccumulate}}
  commentId: T:System.Func{``1}
  parent: System
  definition: System.Func`1
  name: Func<TAccumulate>
  nameWithType: Func<TAccumulate>
  fullName: System.Func<TAccumulate>
  nameWithType.vb: Func(Of TAccumulate)
  fullName.vb: System.Func(Of TAccumulate)
  name.vb: Func(Of TAccumulate)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TResult}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.MinOrDefault*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.MinOrDefault
  isExternal: false
  name: MinOrDefault
  nameWithType: EnumerableExtensions.MinOrDefault
  fullName: CodeJam.Collections.EnumerableExtensions.MinOrDefault
- uid: System.Collections.Generic.IComparer{{TSource}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TSource>
  nameWithType: IComparer<TSource>
  fullName: System.Collections.Generic.IComparer<TSource>
  nameWithType.vb: IComparer(Of TSource)
  fullName.vb: System.Collections.Generic.IComparer(Of TSource)
  name.vb: IComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{T}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, T>
  nameWithType: Func<TSource, T>
  fullName: System.Func<TSource, T>
  nameWithType.vb: Func(Of TSource, T)
  fullName.vb: System.Func(Of TSource, T)
  name.vb: Func(Of TSource, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.MaxOrDefault*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.MaxOrDefault
  isExternal: false
  name: MaxOrDefault
  nameWithType: EnumerableExtensions.MaxOrDefault
  fullName: CodeJam.Collections.EnumerableExtensions.MaxOrDefault
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.ToDictionary*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.ToDictionary
  isExternal: false
  name: ToDictionary
  nameWithType: EnumerableExtensions.ToDictionary
  fullName: CodeJam.Collections.EnumerableExtensions.ToDictionary
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<T, TKey>
  nameWithType: Func<T, TKey>
  fullName: System.Func<T, TKey>
  nameWithType.vb: Func(Of T, TKey)
  fullName.vb: System.Func(Of T, TKey)
  name.vb: Func(Of T, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.DictionaryDuplicate
  commentId: T:CodeJam.Collections.DictionaryDuplicate
  parent: CodeJam.Collections
  isExternal: false
  name: DictionaryDuplicate
  nameWithType: DictionaryDuplicate
  fullName: CodeJam.Collections.DictionaryDuplicate
- uid: System.Collections.Generic.Dictionary{{TKey},{T}}
  commentId: T:System.Collections.Generic.Dictionary{``1,``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, T>
  nameWithType: Dictionary<TKey, T>
  fullName: System.Collections.Generic.Dictionary<TKey, T>
  nameWithType.vb: Dictionary(Of TKey, T)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, T)
  name.vb: Dictionary(Of TKey, T)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{TElement}}
  commentId: T:System.Func{``0,``2}
  parent: System
  definition: System.Func`2
  name: Func<T, TElement>
  nameWithType: Func<T, TElement>
  fullName: System.Func<T, TElement>
  nameWithType.vb: Func(Of T, TElement)
  fullName.vb: System.Func(Of T, TElement)
  name.vb: Func(Of T, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  commentId: T:System.Collections.Generic.Dictionary{``1,``2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TElement>
  nameWithType: Dictionary<TKey, TElement>
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  nameWithType.vb: Dictionary(Of TKey, TElement)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  name.vb: Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.WithIndex*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.WithIndex
  isExternal: false
  name: WithIndex
  nameWithType: EnumerableExtensions.WithIndex
  fullName: CodeJam.Collections.EnumerableExtensions.WithIndex
- uid: System.Collections.Generic.IEnumerable{CodeJam.Collections.IndexedItem{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{CodeJam.Collections.IndexedItem{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IndexedItem<T>>
  nameWithType: IEnumerable<IndexedItem<T>>
  fullName: System.Collections.Generic.IEnumerable<CodeJam.Collections.IndexedItem<T>>
  nameWithType.vb: IEnumerable(Of IndexedItem(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of CodeJam.Collections.IndexedItem(Of T))
  name.vb: IEnumerable(Of IndexedItem(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Collections.IndexedItem`1
    name: IndexedItem
    nameWithType: IndexedItem
    fullName: CodeJam.Collections.IndexedItem
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.CombineWithPrevious
  isExternal: false
  name: CombineWithPrevious
  nameWithType: EnumerableExtensions.CombineWithPrevious
  fullName: CodeJam.Collections.EnumerableExtensions.CombineWithPrevious
- uid: System.Func{{T},{T},{TResult}}
  commentId: T:System.Func{``0,``0,``1}
  parent: System
  definition: System.Func`3
  name: Func<T, T, TResult>
  nameWithType: Func<T, T, TResult>
  fullName: System.Func<T, T, TResult>
  nameWithType.vb: Func(Of T, T, TResult)
  fullName.vb: System.Func(Of T, T, TResult)
  name.vb: Func(Of T, T, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.CombineWithNext*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.CombineWithNext
  isExternal: false
  name: CombineWithNext
  nameWithType: EnumerableExtensions.CombineWithNext
  fullName: CodeJam.Collections.EnumerableExtensions.CombineWithNext
- uid: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.GroupWhileEquals
  isExternal: false
  name: GroupWhileEquals
  nameWithType: EnumerableExtensions.GroupWhileEquals
  fullName: CodeJam.Collections.EnumerableExtensions.GroupWhileEquals
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``1,``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGrouping<TKey, T>>
  nameWithType: IEnumerable<IGrouping<TKey, T>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, T>>
  nameWithType.vb: IEnumerable(Of IGrouping(Of TKey, T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, T))
  name.vb: IEnumerable(Of IGrouping(Of TKey, T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{TItem}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<T, TItem>
  nameWithType: Func<T, TItem>
  fullName: System.Func<T, TItem>
  nameWithType.vb: Func(Of T, TItem)
  fullName.vb: System.Func(Of T, TItem)
  name.vb: Func(Of T, TItem)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TItem}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``2,``1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGrouping<TKey, TItem>>
  nameWithType: IEnumerable<IGrouping<TKey, TItem>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TItem>>
  nameWithType.vb: IEnumerable(Of IGrouping(Of TKey, TItem))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TItem))
  name.vb: IEnumerable(Of IGrouping(Of TKey, TItem))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.GroupWhile*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.GroupWhile
  isExternal: false
  name: GroupWhile
  nameWithType: EnumerableExtensions.GroupWhile
  fullName: CodeJam.Collections.EnumerableExtensions.GroupWhile
- uid: System.Func{{T},{T},System.Boolean}
  commentId: T:System.Func{`0,`0,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<T, T, Boolean>
  nameWithType: Func<T, T, Boolean>
  fullName: System.Func<T, T, System.Boolean>
  nameWithType.vb: Func(Of T, T, Boolean)
  fullName.vb: System.Func(Of T, T, System.Boolean)
  name.vb: Func(Of T, T, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}[]}
  commentId: T:System.Collections.Generic.IEnumerable{``0[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T[]>
  nameWithType: IEnumerable<T[]>
  fullName: System.Collections.Generic.IEnumerable<T[]>
  nameWithType.vb: IEnumerable(Of T())
  fullName.vb: System.Collections.Generic.IEnumerable(Of T())
  name.vb: IEnumerable(Of T())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.Page*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.Page
  isExternal: false
  name: Page
  nameWithType: EnumerableExtensions.Page
  fullName: CodeJam.Collections.EnumerableExtensions.Page
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CodeJam.Collections.EnumerableExtensions.Slice*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.Slice
  isExternal: false
  name: Slice
  nameWithType: EnumerableExtensions.Slice
  fullName: CodeJam.Collections.EnumerableExtensions.Slice
- uid: CodeJam.Collections.EnumerableExtensions.Flatten*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.Flatten
  isExternal: false
  name: Flatten
  nameWithType: EnumerableExtensions.Flatten
  fullName: CodeJam.Collections.EnumerableExtensions.Flatten
- uid: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<T, IEnumerable<T>>
  nameWithType: Func<T, IEnumerable<T>>
  fullName: System.Func<T, System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Func(Of T, IEnumerable(Of T))
  fullName.vb: System.Func(Of T, System.Collections.Generic.IEnumerable(Of T))
  name.vb: Func(Of T, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.TakeLast*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.TakeLast
  isExternal: false
  name: TakeLast
  nameWithType: EnumerableExtensions.TakeLast
  fullName: CodeJam.Collections.EnumerableExtensions.TakeLast
- uid: CodeJam.Collections.EnumerableExtensions.Split*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.Split
  isExternal: false
  name: Split
  nameWithType: EnumerableExtensions.Split
  fullName: CodeJam.Collections.EnumerableExtensions.Split
- uid: CodeJam.Collections.EnumerableExtensions.MinBy*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.MinBy
  isExternal: false
  name: MinBy
  nameWithType: EnumerableExtensions.MinBy
  fullName: CodeJam.Collections.EnumerableExtensions.MinBy
- uid: System.Func{{TSource},System.Byte}
  commentId: T:System.Func{``0,System.Byte}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Byte>
  nameWithType: Func<TSource, Byte>
  fullName: System.Func<TSource, System.Byte>
  nameWithType.vb: Func(Of TSource, Byte)
  fullName.vb: System.Func(Of TSource, System.Byte)
  name.vb: Func(Of TSource, Byte)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.MinByOrDefault*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.MinByOrDefault
  isExternal: false
  name: MinByOrDefault
  nameWithType: EnumerableExtensions.MinByOrDefault
  fullName: CodeJam.Collections.EnumerableExtensions.MinByOrDefault
- uid: System.Func{{TSource},System.Nullable{System.Byte}}
  commentId: T:System.Func{``0,System.Nullable{System.Byte}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Byte>>
  nameWithType: Func<TSource, Nullable<Byte>>
  fullName: System.Func<TSource, System.Nullable<System.Byte>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Byte))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Byte))
  name.vb: Func(Of TSource, Nullable(Of Byte))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.SByte}
  commentId: T:System.Func{``0,System.SByte}
  parent: System
  definition: System.Func`2
  name: Func<TSource, SByte>
  nameWithType: Func<TSource, SByte>
  fullName: System.Func<TSource, System.SByte>
  nameWithType.vb: Func(Of TSource, SByte)
  fullName.vb: System.Func(Of TSource, System.SByte)
  name.vb: Func(Of TSource, SByte)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.SByte}}
  commentId: T:System.Func{``0,System.Nullable{System.SByte}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<SByte>>
  nameWithType: Func<TSource, Nullable<SByte>>
  fullName: System.Func<TSource, System.Nullable<System.SByte>>
  nameWithType.vb: Func(Of TSource, Nullable(Of SByte))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.SByte))
  name.vb: Func(Of TSource, Nullable(Of SByte))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int16}
  commentId: T:System.Func{``0,System.Int16}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int16>
  nameWithType: Func<TSource, Int16>
  fullName: System.Func<TSource, System.Int16>
  nameWithType.vb: Func(Of TSource, Int16)
  fullName.vb: System.Func(Of TSource, System.Int16)
  name.vb: Func(Of TSource, Int16)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int16}}
  commentId: T:System.Func{``0,System.Nullable{System.Int16}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int16>>
  nameWithType: Func<TSource, Nullable<Int16>>
  fullName: System.Func<TSource, System.Nullable<System.Int16>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Int16))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Int16))
  name.vb: Func(Of TSource, Nullable(Of Int16))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.UInt16}
  commentId: T:System.Func{``0,System.UInt16}
  parent: System
  definition: System.Func`2
  name: Func<TSource, UInt16>
  nameWithType: Func<TSource, UInt16>
  fullName: System.Func<TSource, System.UInt16>
  nameWithType.vb: Func(Of TSource, UInt16)
  fullName.vb: System.Func(Of TSource, System.UInt16)
  name.vb: Func(Of TSource, UInt16)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.UInt16}}
  commentId: T:System.Func{``0,System.Nullable{System.UInt16}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<UInt16>>
  nameWithType: Func<TSource, Nullable<UInt16>>
  fullName: System.Func<TSource, System.Nullable<System.UInt16>>
  nameWithType.vb: Func(Of TSource, Nullable(Of UInt16))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.UInt16))
  name.vb: Func(Of TSource, Nullable(Of UInt16))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int32}
  commentId: T:System.Func{``0,System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int32>
  nameWithType: Func<TSource, Int32>
  fullName: System.Func<TSource, System.Int32>
  nameWithType.vb: Func(Of TSource, Int32)
  fullName.vb: System.Func(Of TSource, System.Int32)
  name.vb: Func(Of TSource, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int32}}
  commentId: T:System.Func{``0,System.Nullable{System.Int32}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int32>>
  nameWithType: Func<TSource, Nullable<Int32>>
  fullName: System.Func<TSource, System.Nullable<System.Int32>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Int32))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))
  name.vb: Func(Of TSource, Nullable(Of Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.UInt32}
  commentId: T:System.Func{``0,System.UInt32}
  parent: System
  definition: System.Func`2
  name: Func<TSource, UInt32>
  nameWithType: Func<TSource, UInt32>
  fullName: System.Func<TSource, System.UInt32>
  nameWithType.vb: Func(Of TSource, UInt32)
  fullName.vb: System.Func(Of TSource, System.UInt32)
  name.vb: Func(Of TSource, UInt32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.UInt32}}
  commentId: T:System.Func{``0,System.Nullable{System.UInt32}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<UInt32>>
  nameWithType: Func<TSource, Nullable<UInt32>>
  fullName: System.Func<TSource, System.Nullable<System.UInt32>>
  nameWithType.vb: Func(Of TSource, Nullable(Of UInt32))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.UInt32))
  name.vb: Func(Of TSource, Nullable(Of UInt32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Int64}
  commentId: T:System.Func{``0,System.Int64}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int64>
  nameWithType: Func<TSource, Int64>
  fullName: System.Func<TSource, System.Int64>
  nameWithType.vb: Func(Of TSource, Int64)
  fullName.vb: System.Func(Of TSource, System.Int64)
  name.vb: Func(Of TSource, Int64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int64}}
  commentId: T:System.Func{``0,System.Nullable{System.Int64}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int64>>
  nameWithType: Func<TSource, Nullable<Int64>>
  fullName: System.Func<TSource, System.Nullable<System.Int64>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Int64))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))
  name.vb: Func(Of TSource, Nullable(Of Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.UInt64}
  commentId: T:System.Func{``0,System.UInt64}
  parent: System
  definition: System.Func`2
  name: Func<TSource, UInt64>
  nameWithType: Func<TSource, UInt64>
  fullName: System.Func<TSource, System.UInt64>
  nameWithType.vb: Func(Of TSource, UInt64)
  fullName.vb: System.Func(Of TSource, System.UInt64)
  name.vb: Func(Of TSource, UInt64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.UInt64}}
  commentId: T:System.Func{``0,System.Nullable{System.UInt64}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<UInt64>>
  nameWithType: Func<TSource, Nullable<UInt64>>
  fullName: System.Func<TSource, System.Nullable<System.UInt64>>
  nameWithType.vb: Func(Of TSource, Nullable(Of UInt64))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.UInt64))
  name.vb: Func(Of TSource, Nullable(Of UInt64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Single}
  commentId: T:System.Func{``0,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Single>
  nameWithType: Func<TSource, Single>
  fullName: System.Func<TSource, System.Single>
  nameWithType.vb: Func(Of TSource, Single)
  fullName.vb: System.Func(Of TSource, System.Single)
  name.vb: Func(Of TSource, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Single}}
  commentId: T:System.Func{``0,System.Nullable{System.Single}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Single>>
  nameWithType: Func<TSource, Nullable<Single>>
  fullName: System.Func<TSource, System.Nullable<System.Single>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Single))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Single))
  name.vb: Func(Of TSource, Nullable(Of Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Double}
  commentId: T:System.Func{``0,System.Double}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Double>
  nameWithType: Func<TSource, Double>
  fullName: System.Func<TSource, System.Double>
  nameWithType.vb: Func(Of TSource, Double)
  fullName.vb: System.Func(Of TSource, System.Double)
  name.vb: Func(Of TSource, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Double}}
  commentId: T:System.Func{``0,System.Nullable{System.Double}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Double>>
  nameWithType: Func<TSource, Nullable<Double>>
  fullName: System.Func<TSource, System.Nullable<System.Double>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Double))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Double))
  name.vb: Func(Of TSource, Nullable(Of Double))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Decimal}
  commentId: T:System.Func{``0,System.Decimal}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Decimal>
  nameWithType: Func<TSource, Decimal>
  fullName: System.Func<TSource, System.Decimal>
  nameWithType.vb: Func(Of TSource, Decimal)
  fullName.vb: System.Func(Of TSource, System.Decimal)
  name.vb: Func(Of TSource, Decimal)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Decimal}}
  commentId: T:System.Func{``0,System.Nullable{System.Decimal}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Decimal>>
  nameWithType: Func<TSource, Nullable<Decimal>>
  fullName: System.Func<TSource, System.Nullable<System.Decimal>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Decimal))
  fullName.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))
  name.vb: Func(Of TSource, Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.MaxBy*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.MaxBy
  isExternal: false
  name: MaxBy
  nameWithType: EnumerableExtensions.MaxBy
  fullName: CodeJam.Collections.EnumerableExtensions.MaxBy
- uid: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault
  isExternal: false
  name: MaxByOrDefault
  nameWithType: EnumerableExtensions.MaxByOrDefault
  fullName: CodeJam.Collections.EnumerableExtensions.MaxByOrDefault
- uid: CodeJam.Collections.EnumerableExtensions.TopoSort*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.TopoSort
  isExternal: false
  name: TopoSort
  nameWithType: EnumerableExtensions.TopoSort
  fullName: CodeJam.Collections.EnumerableExtensions.TopoSort
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.GroupTopoSort*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.GroupTopoSort
  isExternal: false
  name: GroupTopoSort
  nameWithType: EnumerableExtensions.GroupTopoSort
  fullName: CodeJam.Collections.EnumerableExtensions.GroupTopoSort
- uid: CodeJam.Collections.EnumerableExtensions.Union*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.Union
  isExternal: false
  name: Union
  nameWithType: EnumerableExtensions.Union
  fullName: CodeJam.Collections.EnumerableExtensions.Union
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.Collections.EnumerableExtensions.Concat*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.Concat
  isExternal: false
  name: Concat
  nameWithType: EnumerableExtensions.Concat
  fullName: CodeJam.Collections.EnumerableExtensions.Concat
- uid: CodeJam.Collections.EnumerableExtensions.Prepend*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.Prepend
  isExternal: false
  name: Prepend
  nameWithType: EnumerableExtensions.Prepend
  fullName: CodeJam.Collections.EnumerableExtensions.Prepend
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.ToHashSet*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.ToHashSet
  isExternal: false
  name: ToHashSet
  nameWithType: EnumerableExtensions.ToHashSet
  fullName: CodeJam.Collections.EnumerableExtensions.ToHashSet
- uid: System.Collections.Generic.HashSet{{T}}
  commentId: T:System.Collections.Generic.HashSet{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{TKey}}
  commentId: T:System.Collections.Generic.HashSet{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<TKey>
  nameWithType: HashSet<TKey>
  fullName: System.Collections.Generic.HashSet<TKey>
  nameWithType.vb: HashSet(Of TKey)
  fullName.vb: System.Collections.Generic.HashSet(Of TKey)
  name.vb: HashSet(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable`1
  commentId: T:System.Linq.IOrderedEnumerable`1
  isExternal: true
  name: IOrderedEnumerable<TElement>
  nameWithType: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  nameWithType.vb: IOrderedEnumerable(Of TElement)
  fullName.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.OrderBy*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.OrderBy
  isExternal: false
  name: OrderBy
  nameWithType: EnumerableExtensions.OrderBy
  fullName: CodeJam.Collections.EnumerableExtensions.OrderBy
- uid: System.Linq.IOrderedEnumerable{{TSource}}
  commentId: T:System.Linq.IOrderedEnumerable{``0}
  parent: System.Linq
  definition: System.Linq.IOrderedEnumerable`1
  name: IOrderedEnumerable<TSource>
  nameWithType: IOrderedEnumerable<TSource>
  fullName: System.Linq.IOrderedEnumerable<TSource>
  nameWithType.vb: IOrderedEnumerable(Of TSource)
  fullName.vb: System.Linq.IOrderedEnumerable(Of TSource)
  name.vb: IOrderedEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    nameWithType: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: CodeJam.Collections.EnumerableExtensions.OrderByDescending*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.OrderByDescending
  isExternal: false
  name: OrderByDescending
  nameWithType: EnumerableExtensions.OrderByDescending
  fullName: CodeJam.Collections.EnumerableExtensions.OrderByDescending
- uid: CodeJam.Collections.EnumerableExtensions.DistinctBy*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.DistinctBy
  isExternal: false
  name: DistinctBy
  nameWithType: EnumerableExtensions.DistinctBy
  fullName: CodeJam.Collections.EnumerableExtensions.DistinctBy
- uid: System.Func{{TSource},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullName.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.ExceptBy*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.ExceptBy
  isExternal: false
  name: ExceptBy
  nameWithType: EnumerableExtensions.ExceptBy
  fullName: CodeJam.Collections.EnumerableExtensions.ExceptBy
- uid: CodeJam.Collections.EnumerableExtensions.IntersectBy*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.IntersectBy
  isExternal: false
  name: IntersectBy
  nameWithType: EnumerableExtensions.IntersectBy
  fullName: CodeJam.Collections.EnumerableExtensions.IntersectBy
- uid: CodeJam.Collections.EnumerableExtensions.UnionBy*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.UnionBy
  isExternal: false
  name: UnionBy
  nameWithType: EnumerableExtensions.UnionBy
  fullName: CodeJam.Collections.EnumerableExtensions.UnionBy
- uid: CodeJam.Collections.EnumerableExtensions.SelectMany*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.SelectMany
  isExternal: false
  name: SelectMany
  nameWithType: EnumerableExtensions.SelectMany
  fullName: CodeJam.Collections.EnumerableExtensions.SelectMany
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{TSource}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<TSource>>
  nameWithType: IEnumerable<IEnumerable<TSource>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of TSource))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: IEnumerable(Of IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.FirstOrDefault*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.FirstOrDefault
  isExternal: false
  name: FirstOrDefault
  nameWithType: EnumerableExtensions.FirstOrDefault
  fullName: CodeJam.Collections.EnumerableExtensions.FirstOrDefault
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{`0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.AsList*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.AsList
  isExternal: false
  name: AsList
  nameWithType: EnumerableExtensions.AsList
  fullName: CodeJam.Collections.EnumerableExtensions.AsList
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.AsArray*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.AsArray
  isExternal: false
  name: AsArray
  nameWithType: EnumerableExtensions.AsArray
  fullName: CodeJam.Collections.EnumerableExtensions.AsArray
- uid: CodeJam.Collections.EnumerableExtensions.ToStrings*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.ToStrings
  isExternal: false
  name: ToStrings
  nameWithType: EnumerableExtensions.ToStrings
  fullName: CodeJam.Collections.EnumerableExtensions.ToStrings
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.IsFirst*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.IsFirst
  isExternal: false
  name: IsFirst
  nameWithType: EnumerableExtensions.IsFirst
  fullName: CodeJam.Collections.EnumerableExtensions.IsFirst
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  nameWithType: IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  nameWithType.vb: IEqualityComparer(Of TSource)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.EnumerableExtensions.IsLast*
  commentId: Overload:CodeJam.Collections.EnumerableExtensions.IsLast
  isExternal: false
  name: IsLast
  nameWithType: EnumerableExtensions.IsLast
  fullName: CodeJam.Collections.EnumerableExtensions.IsLast
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Func{{TSource},{TValue}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TValue>
  nameWithType: Func<TSource, TValue>
  fullName: System.Func<TSource, TValue>
  nameWithType.vb: Func(Of TSource, TValue)
  fullName.vb: System.Func(Of TSource, TValue)
  name.vb: Func(Of TSource, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TValue}}
  commentId: T:System.Collections.Generic.IComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TValue>
  nameWithType: IComparer<TValue>
  fullName: System.Collections.Generic.IComparer<TValue>
  nameWithType.vb: IComparer(Of TValue)
  fullName.vb: System.Collections.Generic.IComparer(Of TValue)
  name.vb: IComparer(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
