### YamlMime:ManagedReference
items:
- uid: CodeJam.ValueOption`1
  commentId: T:CodeJam.ValueOption`1
  id: ValueOption`1
  parent: CodeJam
  children:
  - CodeJam.ValueOption`1.#ctor(`0)
  - CodeJam.ValueOption`1.Equals(CodeJam.ValueOption{`0})
  - CodeJam.ValueOption`1.Equals(System.Object)
  - CodeJam.ValueOption`1.GetHashCode
  - CodeJam.ValueOption`1.HasValue
  - CodeJam.ValueOption`1.op_Equality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  - CodeJam.ValueOption`1.op_Explicit(CodeJam.ValueOption{`0})~`0
  - CodeJam.ValueOption`1.op_Implicit(`0)~CodeJam.ValueOption{`0}
  - CodeJam.ValueOption`1.op_Inequality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  - CodeJam.ValueOption`1.ToString
  - CodeJam.ValueOption`1.Value
  langs:
  - csharp
  - vb
  name: ValueOption<T>
  nameWithType: ValueOption<T>
  fullName: CodeJam.ValueOption<T>
  type: Struct
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ValueOption
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 11
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nRepresents a value type that can be assigned null.\n"
  example: []
  syntax:
    content: 'public struct ValueOption<T> : IOption<T>, IEquatable<ValueOption<T>>'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Structure ValueOption(Of T)
          Implements IOption(Of T), IEquatable(Of ValueOption(Of T))
  implements:
  - CodeJam.IOption{{T}}
  - System.IEquatable{CodeJam.ValueOption`1}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - CodeJam.ValueOption`1.CodeJam.NullableHelper.AsNullable``1
  - CodeJam.IOption{`0}.CodeJam.Option.Do``1(System.Action{CodeJam.IOption{{T}}},System.Action)
  - CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{{T}},{TResult}},System.Func{{TResult}})
  - CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``1({T})
  - CodeJam.ValueOption`1.CodeJam.ValueOption.With``2(System.Func{{T},{TResult}})
  - CodeJam.ValueOption`1.CodeJam.ValueOption.With``2(System.Func{{T},{TResult}},{TResult})
  - CodeJam.ValueOption`1.CodeJam.ValueOption.With``2(System.Func{{T},{TResult}},System.Func{{TResult}})
  - CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  nameWithType.vb: ValueOption(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: CodeJam.ValueOption(Of T)
  name.vb: ValueOption(Of T)
- uid: CodeJam.ValueOption`1.#ctor(`0)
  commentId: M:CodeJam.ValueOption`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: ValueOption(T)
  nameWithType: ValueOption<T>.ValueOption(T)
  fullName: CodeJam.ValueOption<T>.ValueOption(T)
  type: Constructor
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 20
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nInitializes a new instance to the specified value.\n"
  example: []
  syntax:
    content: public ValueOption(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value.
    content.vb: Public Sub New(value As T)
  overload: CodeJam.ValueOption`1.#ctor*
  nameWithType.vb: ValueOption(Of T).ValueOption(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.ValueOption(Of T).ValueOption(T)
- uid: CodeJam.ValueOption`1.HasValue
  commentId: P:CodeJam.ValueOption`1.HasValue
  id: HasValue
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: ValueOption<T>.HasValue
  fullName: CodeJam.ValueOption<T>.HasValue
  type: Property
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasValue
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 29
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nGets a value indicating whether the current object has a value.\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasValue As Boolean
  overload: CodeJam.ValueOption`1.HasValue*
  implements:
  - CodeJam.IOption{{T}}.HasValue
  nameWithType.vb: ValueOption(Of T).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.ValueOption(Of T).HasValue
- uid: CodeJam.ValueOption`1.Value
  commentId: P:CodeJam.ValueOption`1.Value
  id: Value
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ValueOption<T>.Value
  fullName: CodeJam.ValueOption<T>.Value
  type: Property
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Value
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 34
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nGets the value of the current object.\n"
  example: []
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: CodeJam.ValueOption`1.Value*
  implements:
  - CodeJam.IOption{{T}}.Value
  nameWithType.vb: ValueOption(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.ValueOption(Of T).Value
- uid: CodeJam.ValueOption`1.op_Implicit(`0)~CodeJam.ValueOption{`0}
  commentId: M:CodeJam.ValueOption`1.op_Implicit(`0)~CodeJam.ValueOption{`0}
  id: op_Implicit(`0)~CodeJam.ValueOption{`0}
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: Implicit(T to ValueOption<T>)
  nameWithType: ValueOption<T>.Implicit(T to ValueOption<T>)
  fullName: CodeJam.ValueOption<T>.Implicit(T to CodeJam.ValueOption<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Implicit
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 49
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCreates a new object initialized to a specified value.\n"
  example: []
  syntax:
    content: public static implicit operator ValueOption<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: Value to convert.
    return:
      type: CodeJam.ValueOption`1
      description: Instance of <xref href="CodeJam.ValueOption" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Widening Operator CType(value As T) As ValueOption(Of T)
  overload: CodeJam.ValueOption`1.op_Implicit*
  nameWithType.vb: ValueOption(Of T).Widening(T to ValueOption(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.ValueOption(Of T).Widening(T to CodeJam.ValueOption(Of T))
  name.vb: Widening(T to ValueOption(Of T))
- uid: CodeJam.ValueOption`1.op_Explicit(CodeJam.ValueOption{`0})~`0
  commentId: M:CodeJam.ValueOption`1.op_Explicit(CodeJam.ValueOption{`0})~`0
  id: op_Explicit(CodeJam.ValueOption{`0})~`0
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: Explicit(ValueOption<T> to T)
  nameWithType: ValueOption<T>.Explicit(ValueOption<T> to T)
  fullName: CodeJam.ValueOption<T>.Explicit(CodeJam.ValueOption<T> to T)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Explicit
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nExtracts value from <code data-dev-comment-type=\"paramref\" class=\"paramref\">option</code>\n"
  example: []
  syntax:
    content: public static explicit operator T(ValueOption<T> option)
    parameters:
    - id: option
      type: CodeJam.ValueOption`1
      description: ''
    return:
      type: '{T}'
      description: Value of <code data-dev-comment-type="paramref" class="paramref">option</code>
    content.vb: Public Shared Narrowing Operator CType(option As ValueOption(Of T)) As T
  overload: CodeJam.ValueOption`1.op_Explicit*
  nameWithType.vb: ValueOption(Of T).Narrowing(ValueOption(Of T) to T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.ValueOption(Of T).Narrowing(CodeJam.ValueOption(Of T) to T)
  name.vb: Narrowing(ValueOption(Of T) to T)
- uid: CodeJam.ValueOption`1.op_Equality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  commentId: M:CodeJam.ValueOption`1.op_Equality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  id: op_Equality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: Equality(ValueOption<T>, ValueOption<T>)
  nameWithType: ValueOption<T>.Equality(ValueOption<T>, ValueOption<T>)
  fullName: CodeJam.ValueOption<T>.Equality(CodeJam.ValueOption<T>, CodeJam.ValueOption<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Equality
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 66
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nEquality operator.\n"
  example: []
  syntax:
    content: public static bool operator ==(ValueOption<T> left, ValueOption<T> right)
    parameters:
    - id: left
      type: CodeJam.ValueOption`1
      description: Left operand.
    - id: right
      type: CodeJam.ValueOption`1
      description: Right operand.
    return:
      type: System.Boolean
      description: <code>True</code>, if <code data-dev-comment-type="paramref" class="paramref">left</code> equals <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator =(left As ValueOption(Of T), right As ValueOption(Of T)) As Boolean
  overload: CodeJam.ValueOption`1.op_Equality*
  nameWithType.vb: ValueOption(Of T).Equality(ValueOption(Of T), ValueOption(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.ValueOption(Of T).Equality(CodeJam.ValueOption(Of T), CodeJam.ValueOption(Of T))
  name.vb: Equality(ValueOption(Of T), ValueOption(Of T))
- uid: CodeJam.ValueOption`1.op_Inequality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  commentId: M:CodeJam.ValueOption`1.op_Inequality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  id: op_Inequality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: Inequality(ValueOption<T>, ValueOption<T>)
  nameWithType: ValueOption<T>.Inequality(ValueOption<T>, ValueOption<T>)
  fullName: CodeJam.ValueOption<T>.Inequality(CodeJam.ValueOption<T>, CodeJam.ValueOption<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Inequality
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 74
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nUnequality operator.\n"
  example: []
  syntax:
    content: public static bool operator !=(ValueOption<T> left, ValueOption<T> right)
    parameters:
    - id: left
      type: CodeJam.ValueOption`1
      description: Left operand.
    - id: right
      type: CodeJam.ValueOption`1
      description: Right operand.
    return:
      type: System.Boolean
      description: <code>True</code>, if <code data-dev-comment-type="paramref" class="paramref">left</code> not equals <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator <>(left As ValueOption(Of T), right As ValueOption(Of T)) As Boolean
  overload: CodeJam.ValueOption`1.op_Inequality*
  nameWithType.vb: ValueOption(Of T).Inequality(ValueOption(Of T), ValueOption(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.ValueOption(Of T).Inequality(CodeJam.ValueOption(Of T), CodeJam.ValueOption(Of T))
  name.vb: Inequality(ValueOption(Of T), ValueOption(Of T))
- uid: CodeJam.ValueOption`1.Equals(CodeJam.ValueOption{`0})
  commentId: M:CodeJam.ValueOption`1.Equals(CodeJam.ValueOption{`0})
  id: Equals(CodeJam.ValueOption{`0})
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: Equals(ValueOption<T>)
  nameWithType: ValueOption<T>.Equals(ValueOption<T>)
  fullName: CodeJam.ValueOption<T>.Equals(CodeJam.ValueOption<T>)
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 80
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(ValueOption<T> other)
    parameters:
    - id: other
      type: CodeJam.ValueOption`1
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: true if the current object is equal to the <code data-dev-comment-type="paramref" class="paramref">other</code> parameter; otherwise, false.
    content.vb: Public Function Equals(other As ValueOption(Of T)) As Boolean
  overload: CodeJam.ValueOption`1.Equals*
  implements:
  - System.IEquatable{CodeJam.ValueOption`1}.Equals(CodeJam.ValueOption{{T}})
  nameWithType.vb: ValueOption(Of T).Equals(ValueOption(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.ValueOption(Of T).Equals(CodeJam.ValueOption(Of T))
  name.vb: Equals(ValueOption(Of T))
- uid: CodeJam.ValueOption`1.Equals(System.Object)
  commentId: M:CodeJam.ValueOption`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ValueOption<T>.Equals(Object)
  fullName: CodeJam.ValueOption<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 87
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with the current instance. '
    return:
      type: System.Boolean
      description: 'true if <code data-dev-comment-type="paramref" class="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, false. '
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: CodeJam.ValueOption`1.Equals*
  nameWithType.vb: ValueOption(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.ValueOption(Of T).Equals(System.Object)
- uid: CodeJam.ValueOption`1.GetHashCode
  commentId: M:CodeJam.ValueOption`1.GetHashCode
  id: GetHashCode
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ValueOption<T>.GetHashCode()
  fullName: CodeJam.ValueOption<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 95
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: CodeJam.ValueOption`1.GetHashCode*
  nameWithType.vb: ValueOption(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.ValueOption(Of T).GetHashCode()
- uid: CodeJam.ValueOption`1.ToString
  commentId: M:CodeJam.ValueOption`1.ToString
  id: ToString
  parent: CodeJam.ValueOption`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ValueOption<T>.ToString()
  fullName: CodeJam.ValueOption<T>.ToString()
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/ValueOption`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Structures/Option/ValueOption`1.cs
    startLine: 101
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns the fully qualified type name of this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing a fully qualified type name.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: CodeJam.ValueOption`1.ToString*
  nameWithType.vb: ValueOption(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.ValueOption(Of T).ToString()
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.IOption{{T}}
  commentId: T:CodeJam.IOption{``0}
  parent: CodeJam
  definition: CodeJam.IOption`1
  name: IOption<T>
  nameWithType: IOption<T>
  fullName: CodeJam.IOption<T>
  nameWithType.vb: IOption(Of T)
  fullName.vb: CodeJam.IOption(Of T)
  name.vb: IOption(Of T)
  spec.csharp:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{CodeJam.ValueOption`1}
  commentId: T:System.IEquatable{CodeJam.ValueOption`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ValueOption<T>>
  nameWithType: IEquatable<ValueOption<T>>
  fullName: System.IEquatable<CodeJam.ValueOption<T>>
  nameWithType.vb: IEquatable(Of ValueOption(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.ValueOption(Of T))
  name.vb: IEquatable(Of ValueOption(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.NullableHelper.AsNullable``1
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  parent: CodeJam.NullableHelper
  definition: CodeJam.NullableHelper.AsNullable``1(``0)
  name: AsNullable<ValueOption<T>>()
  nameWithType: NullableHelper.AsNullable<ValueOption<T>>()
  fullName: CodeJam.NullableHelper.AsNullable<CodeJam.ValueOption<T>>()
  nameWithType.vb: NullableHelper.AsNullable(Of ValueOption(Of T))()
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of CodeJam.ValueOption(Of T))()
  name.vb: AsNullable(Of ValueOption(Of T))()
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable<ValueOption<T>>
    nameWithType: NullableHelper.AsNullable<ValueOption<T>>
    fullName: CodeJam.NullableHelper.AsNullable<CodeJam.ValueOption<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable(Of ValueOption(Of T))
    nameWithType: NullableHelper.AsNullable(Of ValueOption(Of T))
    fullName: CodeJam.NullableHelper.AsNullable(Of CodeJam.ValueOption(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.Do``1(System.Action{CodeJam.IOption{{T}}},System.Action)
  commentId: M:CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  parent: CodeJam.Option
  definition: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  name: Do<T>(Action<IOption<T>>, Action)
  nameWithType: Option.Do<T>(Action<IOption<T>>, Action)
  fullName: CodeJam.Option.Do<T>(System.Action<CodeJam.IOption<T>>, System.Action)
  nameWithType.vb: Option.Do(Of T)(Action(Of IOption(Of T)), Action)
  fullName.vb: CodeJam.Option.Do(Of T)(System.Action(Of CodeJam.IOption(Of T)), System.Action)
  name.vb: Do(Of T)(Action(Of IOption(Of T)), Action)
  spec.csharp:
  - uid: CodeJam.Option.Do``1(System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do<T>
    nameWithType: Option.Do<T>
    fullName: CodeJam.Option.Do<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.Do``1(System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do(Of T)
    nameWithType: Option.Do(Of T)
    fullName: CodeJam.Option.Do(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{{T}},{TResult}},System.Func{{TResult}})
  commentId: M:CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  parent: CodeJam.Option
  definition: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  name: GetValueOrDefault<T, TResult>(Func<IOption<T>, TResult>, Func<TResult>)
  nameWithType: Option.GetValueOrDefault<T, TResult>(Func<IOption<T>, TResult>, Func<TResult>)
  fullName: CodeJam.Option.GetValueOrDefault<T, TResult>(System.Func<CodeJam.IOption<T>, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.GetValueOrDefault(Of T, TResult)(Func(Of IOption(Of T), TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T, TResult)(System.Func(Of CodeJam.IOption(Of T), TResult), System.Func(Of TResult))
  name.vb: GetValueOrDefault(Of T, TResult)(Func(Of IOption(Of T), TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault<T, TResult>
    nameWithType: Option.GetValueOrDefault<T, TResult>
    fullName: CodeJam.Option.GetValueOrDefault<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault(Of T, TResult)
    nameWithType: Option.GetValueOrDefault(Of T, TResult)
    fullName: CodeJam.Option.GetValueOrDefault(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``1({T})
  commentId: M:CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  parent: CodeJam.Option
  definition: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  name: GetValueOrDefault<T>(T)
  nameWithType: Option.GetValueOrDefault<T>(T)
  fullName: CodeJam.Option.GetValueOrDefault<T>(T)
  nameWithType.vb: Option.GetValueOrDefault(Of T)(T)
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T)(T)
  name.vb: GetValueOrDefault(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``1(``0)
    name: GetValueOrDefault<T>
    nameWithType: Option.GetValueOrDefault<T>
    fullName: CodeJam.Option.GetValueOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``1(``0)
    name: GetValueOrDefault(Of T)
    nameWithType: Option.GetValueOrDefault(Of T)
    fullName: CodeJam.Option.GetValueOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.ValueOption.With``2(System.Func{{T},{TResult}})
  commentId: M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1})
  parent: CodeJam.ValueOption
  definition: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1})
  name: With<T, TResult>(Func<T, TResult>)
  nameWithType: ValueOption.With<T, TResult>(Func<T, TResult>)
  fullName: CodeJam.ValueOption.With<T, TResult>(System.Func<T, TResult>)
  nameWithType.vb: ValueOption.With(Of T, TResult)(Func(Of T, TResult))
  fullName.vb: CodeJam.ValueOption.With(Of T, TResult)(System.Func(Of T, TResult))
  name.vb: With(Of T, TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: CodeJam.ValueOption.With``2(System.Func{``0,``1})
    name: With<T, TResult>
    nameWithType: ValueOption.With<T, TResult>
    fullName: CodeJam.ValueOption.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.ValueOption.With``2(System.Func{``0,``1})
    name: With(Of T, TResult)
    nameWithType: ValueOption.With(Of T, TResult)
    fullName: CodeJam.ValueOption.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.ValueOption.With``2(System.Func{{T},{TResult}},{TResult})
  commentId: M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},``1)
  parent: CodeJam.ValueOption
  definition: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},``1)
  name: With<T, TResult>(Func<T, TResult>, TResult)
  nameWithType: ValueOption.With<T, TResult>(Func<T, TResult>, TResult)
  fullName: CodeJam.ValueOption.With<T, TResult>(System.Func<T, TResult>, TResult)
  nameWithType.vb: ValueOption.With(Of T, TResult)(Func(Of T, TResult), TResult)
  fullName.vb: CodeJam.ValueOption.With(Of T, TResult)(System.Func(Of T, TResult), TResult)
  name.vb: With(Of T, TResult)(Func(Of T, TResult), TResult)
  spec.csharp:
  - uid: CodeJam.ValueOption.With``2(System.Func{``0,``1},``1)
    name: With<T, TResult>
    nameWithType: ValueOption.With<T, TResult>
    fullName: CodeJam.ValueOption.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.ValueOption.With``2(System.Func{``0,``1},``1)
    name: With(Of T, TResult)
    nameWithType: ValueOption.With(Of T, TResult)
    fullName: CodeJam.ValueOption.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.ValueOption.With``2(System.Func{{T},{TResult}},System.Func{{TResult}})
  commentId: M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},System.Func{``1})
  parent: CodeJam.ValueOption
  definition: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},System.Func{``1})
  name: With<T, TResult>(Func<T, TResult>, Func<TResult>)
  nameWithType: ValueOption.With<T, TResult>(Func<T, TResult>, Func<TResult>)
  fullName: CodeJam.ValueOption.With<T, TResult>(System.Func<T, TResult>, System.Func<TResult>)
  nameWithType.vb: ValueOption.With(Of T, TResult)(Func(Of T, TResult), Func(Of TResult))
  fullName.vb: CodeJam.ValueOption.With(Of T, TResult)(System.Func(Of T, TResult), System.Func(Of TResult))
  name.vb: With(Of T, TResult)(Func(Of T, TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.ValueOption.With``2(System.Func{``0,``1},System.Func{``1})
    name: With<T, TResult>
    nameWithType: ValueOption.With<T, TResult>
    fullName: CodeJam.ValueOption.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.ValueOption.With``2(System.Func{``0,``1},System.Func{``1})
    name: With(Of T, TResult)
    nameWithType: ValueOption.With(Of T, TResult)
    fullName: CodeJam.ValueOption.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, ValueOption<T>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, ValueOption<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.ValueOption<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, ValueOption(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.ValueOption(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, ValueOption(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, ValueOption<T>>
    nameWithType: RangeExtensions.Contains<T, ValueOption<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.ValueOption<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, ValueOption(Of T))
    nameWithType: RangeExtensions.Contains(Of T, ValueOption(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.ValueOption(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, ValueOption<T>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, ValueOption<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.ValueOption<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, ValueOption(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.ValueOption(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, ValueOption(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, ValueOption<T>>
    nameWithType: RangeExtensions.StartsAfter<T, ValueOption<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.ValueOption<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, ValueOption(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, ValueOption(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.ValueOption(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, ValueOption<T>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, ValueOption<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.ValueOption<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, ValueOption(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.ValueOption(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, ValueOption(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, ValueOption<T>>
    nameWithType: RangeExtensions.EndsBefore<T, ValueOption<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.ValueOption<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, ValueOption(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, ValueOption(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.ValueOption(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, ValueOption<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, ValueOption<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.ValueOption<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, ValueOption(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.ValueOption(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, ValueOption(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, ValueOption<T>>
    nameWithType: RangeExtensions.Contains<T, TKey, ValueOption<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.ValueOption<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, ValueOption(Of T))
    nameWithType: RangeExtensions.Contains(Of T, TKey, ValueOption(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.ValueOption(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, ValueOption<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, ValueOption<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.ValueOption<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, ValueOption(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.ValueOption(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, ValueOption(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, ValueOption<T>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, ValueOption<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.ValueOption<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, ValueOption(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, ValueOption(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.ValueOption(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, ValueOption<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, ValueOption<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.ValueOption<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, ValueOption(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.ValueOption(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, ValueOption(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, ValueOption<T>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, ValueOption<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.ValueOption<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, ValueOption(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, ValueOption(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.ValueOption(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption`1
  commentId: T:CodeJam.IOption`1
  isExternal: false
  name: IOption<T>
  nameWithType: IOption<T>
  fullName: CodeJam.IOption<T>
  nameWithType.vb: IOption(Of T)
  fullName.vb: CodeJam.IOption(Of T)
  name.vb: IOption(Of T)
  spec.csharp:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.NullableHelper.AsNullable``1(``0)
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  isExternal: false
  name: AsNullable<T>(T)
  nameWithType: NullableHelper.AsNullable<T>(T)
  fullName: CodeJam.NullableHelper.AsNullable<T>(T)
  nameWithType.vb: NullableHelper.AsNullable(Of T)(T)
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of T)(T)
  name.vb: AsNullable(Of T)(T)
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable<T>
    nameWithType: NullableHelper.AsNullable<T>
    fullName: CodeJam.NullableHelper.AsNullable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable(Of T)
    nameWithType: NullableHelper.AsNullable(Of T)
    fullName: CodeJam.NullableHelper.AsNullable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper
  commentId: T:CodeJam.NullableHelper
  parent: CodeJam
  isExternal: false
  name: NullableHelper
  nameWithType: NullableHelper
  fullName: CodeJam.NullableHelper
- uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  commentId: M:CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  isExternal: true
  name: Do<T>(IOption<T>, Action<IOption<T>>, Action)
  nameWithType: Option.Do<T>(IOption<T>, Action<IOption<T>>, Action)
  fullName: CodeJam.Option.Do<T>(CodeJam.IOption<T>, System.Action<CodeJam.IOption<T>>, System.Action)
  nameWithType.vb: Option.Do(Of T)(IOption(Of T), Action(Of IOption(Of T)), Action)
  fullName.vb: CodeJam.Option.Do(Of T)(CodeJam.IOption(Of T), System.Action(Of CodeJam.IOption(Of T)), System.Action)
  name.vb: Do(Of T)(IOption(Of T), Action(Of IOption(Of T)), Action)
  spec.csharp:
  - uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do<T>
    nameWithType: Option.Do<T>
    fullName: CodeJam.Option.Do<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do(Of T)
    nameWithType: Option.Do(Of T)
    fullName: CodeJam.Option.Do(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option
  commentId: T:CodeJam.Option
  parent: CodeJam
  isExternal: false
  name: Option
  nameWithType: Option
  fullName: CodeJam.Option
- uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  commentId: M:CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  isExternal: true
  name: GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>)
  nameWithType: Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>)
  fullName: CodeJam.Option.GetValueOrDefault<T, TResult>(CodeJam.IOption<T>, System.Func<CodeJam.IOption<T>, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.GetValueOrDefault(Of T, TResult)(IOption(Of T), Func(Of IOption(Of T), TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T, TResult)(CodeJam.IOption(Of T), System.Func(Of CodeJam.IOption(Of T), TResult), System.Func(Of TResult))
  name.vb: GetValueOrDefault(Of T, TResult)(IOption(Of T), Func(Of IOption(Of T), TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault<T, TResult>
    nameWithType: Option.GetValueOrDefault<T, TResult>
    fullName: CodeJam.Option.GetValueOrDefault<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault(Of T, TResult)
    nameWithType: Option.GetValueOrDefault(Of T, TResult)
    fullName: CodeJam.Option.GetValueOrDefault(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  commentId: M:CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  isExternal: false
  name: GetValueOrDefault<T>(IOption<T>, T)
  nameWithType: Option.GetValueOrDefault<T>(IOption<T>, T)
  fullName: CodeJam.Option.GetValueOrDefault<T>(CodeJam.IOption<T>, T)
  nameWithType.vb: Option.GetValueOrDefault(Of T)(IOption(Of T), T)
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T)(CodeJam.IOption(Of T), T)
  name.vb: GetValueOrDefault(Of T)(IOption(Of T), T)
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
    name: GetValueOrDefault<T>
    nameWithType: Option.GetValueOrDefault<T>
    fullName: CodeJam.Option.GetValueOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
    name: GetValueOrDefault(Of T)
    nameWithType: Option.GetValueOrDefault(Of T)
    fullName: CodeJam.Option.GetValueOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1})
  commentId: M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1})
  isExternal: true
  name: With<T, TResult>(ValueOption<T>, Func<T, TResult>)
  nameWithType: ValueOption.With<T, TResult>(ValueOption<T>, Func<T, TResult>)
  fullName: CodeJam.ValueOption.With<T, TResult>(CodeJam.ValueOption<T>, System.Func<T, TResult>)
  nameWithType.vb: ValueOption.With(Of T, TResult)(ValueOption(Of T), Func(Of T, TResult))
  fullName.vb: CodeJam.ValueOption.With(Of T, TResult)(CodeJam.ValueOption(Of T), System.Func(Of T, TResult))
  name.vb: With(Of T, TResult)(ValueOption(Of T), Func(Of T, TResult))
  spec.csharp:
  - uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1})
    name: With<T, TResult>
    nameWithType: ValueOption.With<T, TResult>
    fullName: CodeJam.ValueOption.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1})
    name: With(Of T, TResult)
    nameWithType: ValueOption.With(Of T, TResult)
    fullName: CodeJam.ValueOption.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption
  commentId: T:CodeJam.ValueOption
  parent: CodeJam
  isExternal: false
  name: ValueOption
  nameWithType: ValueOption
  fullName: CodeJam.ValueOption
- uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},``1)
  commentId: M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},``1)
  isExternal: true
  name: With<T, TResult>(ValueOption<T>, Func<T, TResult>, TResult)
  nameWithType: ValueOption.With<T, TResult>(ValueOption<T>, Func<T, TResult>, TResult)
  fullName: CodeJam.ValueOption.With<T, TResult>(CodeJam.ValueOption<T>, System.Func<T, TResult>, TResult)
  nameWithType.vb: ValueOption.With(Of T, TResult)(ValueOption(Of T), Func(Of T, TResult), TResult)
  fullName.vb: CodeJam.ValueOption.With(Of T, TResult)(CodeJam.ValueOption(Of T), System.Func(Of T, TResult), TResult)
  name.vb: With(Of T, TResult)(ValueOption(Of T), Func(Of T, TResult), TResult)
  spec.csharp:
  - uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},``1)
    name: With<T, TResult>
    nameWithType: ValueOption.With<T, TResult>
    fullName: CodeJam.ValueOption.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},``1)
    name: With(Of T, TResult)
    nameWithType: ValueOption.With(Of T, TResult)
    fullName: CodeJam.ValueOption.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},System.Func{``1})
  commentId: M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},System.Func{``1})
  isExternal: true
  name: With<T, TResult>(ValueOption<T>, Func<T, TResult>, Func<TResult>)
  nameWithType: ValueOption.With<T, TResult>(ValueOption<T>, Func<T, TResult>, Func<TResult>)
  fullName: CodeJam.ValueOption.With<T, TResult>(CodeJam.ValueOption<T>, System.Func<T, TResult>, System.Func<TResult>)
  nameWithType.vb: ValueOption.With(Of T, TResult)(ValueOption(Of T), Func(Of T, TResult), Func(Of TResult))
  fullName.vb: CodeJam.ValueOption.With(Of T, TResult)(CodeJam.ValueOption(Of T), System.Func(Of T, TResult), System.Func(Of TResult))
  name.vb: With(Of T, TResult)(ValueOption(Of T), Func(Of T, TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},System.Func{``1})
    name: With<T, TResult>
    nameWithType: ValueOption.With<T, TResult>
    fullName: CodeJam.ValueOption.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},System.Func{``1})
    name: With(Of T, TResult)
    nameWithType: ValueOption.With(Of T, TResult)
    fullName: CodeJam.ValueOption.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.ValueOption`1.#ctor*
  commentId: Overload:CodeJam.ValueOption`1.#ctor
  isExternal: false
  name: ValueOption
  nameWithType: ValueOption<T>.ValueOption
  fullName: CodeJam.ValueOption<T>.ValueOption
  nameWithType.vb: ValueOption(Of T).ValueOption
  fullName.vb: CodeJam.ValueOption(Of T).ValueOption
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.ValueOption`1.HasValue*
  commentId: Overload:CodeJam.ValueOption`1.HasValue
  isExternal: false
  name: HasValue
  nameWithType: ValueOption<T>.HasValue
  fullName: CodeJam.ValueOption<T>.HasValue
  nameWithType.vb: ValueOption(Of T).HasValue
  fullName.vb: CodeJam.ValueOption(Of T).HasValue
- uid: CodeJam.IOption{{T}}.HasValue
  commentId: P:CodeJam.IOption{`0}.HasValue
  parent: CodeJam.IOption{{T}}
  definition: CodeJam.IOption`1.HasValue
  name: HasValue
  nameWithType: IOption<T>.HasValue
  fullName: CodeJam.IOption<T>.HasValue
  nameWithType.vb: IOption(Of T).HasValue
  fullName.vb: CodeJam.IOption(Of T).HasValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.IOption`1.HasValue
  commentId: P:CodeJam.IOption`1.HasValue
  isExternal: false
  name: HasValue
  nameWithType: IOption<T>.HasValue
  fullName: CodeJam.IOption<T>.HasValue
  nameWithType.vb: IOption(Of T).HasValue
  fullName.vb: CodeJam.IOption(Of T).HasValue
- uid: CodeJam.ValueOption`1.Value*
  commentId: Overload:CodeJam.ValueOption`1.Value
  isExternal: false
  name: Value
  nameWithType: ValueOption<T>.Value
  fullName: CodeJam.ValueOption<T>.Value
  nameWithType.vb: ValueOption(Of T).Value
  fullName.vb: CodeJam.ValueOption(Of T).Value
- uid: CodeJam.IOption{{T}}.Value
  commentId: P:CodeJam.IOption{`0}.Value
  parent: CodeJam.IOption{{T}}
  definition: CodeJam.IOption`1.Value
  name: Value
  nameWithType: IOption<T>.Value
  fullName: CodeJam.IOption<T>.Value
  nameWithType.vb: IOption(Of T).Value
  fullName.vb: CodeJam.IOption(Of T).Value
- uid: CodeJam.IOption`1.Value
  commentId: P:CodeJam.IOption`1.Value
  isExternal: false
  name: Value
  nameWithType: IOption<T>.Value
  fullName: CodeJam.IOption<T>.Value
  nameWithType.vb: IOption(Of T).Value
  fullName.vb: CodeJam.IOption(Of T).Value
- uid: CodeJam.ValueOption`1.op_Implicit*
  commentId: Overload:CodeJam.ValueOption`1.op_Implicit
  isExternal: false
  name: Implicit
  nameWithType: ValueOption<T>.Implicit
  fullName: CodeJam.ValueOption<T>.Implicit
  nameWithType.vb: ValueOption(Of T).Widening
  fullName.vb: CodeJam.ValueOption(Of T).Widening
  name.vb: Widening
- uid: CodeJam.ValueOption`1
  commentId: T:CodeJam.ValueOption`1
  parent: CodeJam
  isExternal: false
  name: ValueOption<T>
  nameWithType: ValueOption<T>
  fullName: CodeJam.ValueOption<T>
  nameWithType.vb: ValueOption(Of T)
  fullName.vb: CodeJam.ValueOption(Of T)
  name.vb: ValueOption(Of T)
  spec.csharp:
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.op_Explicit*
  commentId: Overload:CodeJam.ValueOption`1.op_Explicit
  isExternal: false
  name: Explicit
  nameWithType: ValueOption<T>.Explicit
  fullName: CodeJam.ValueOption<T>.Explicit
  nameWithType.vb: ValueOption(Of T).Narrowing
  fullName.vb: CodeJam.ValueOption(Of T).Narrowing
  name.vb: Narrowing
- uid: CodeJam.ValueOption`1.op_Equality*
  commentId: Overload:CodeJam.ValueOption`1.op_Equality
  isExternal: false
  name: Equality
  nameWithType: ValueOption<T>.Equality
  fullName: CodeJam.ValueOption<T>.Equality
  nameWithType.vb: ValueOption(Of T).Equality
  fullName.vb: CodeJam.ValueOption(Of T).Equality
- uid: CodeJam.ValueOption`1.op_Inequality*
  commentId: Overload:CodeJam.ValueOption`1.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: ValueOption<T>.Inequality
  fullName: CodeJam.ValueOption<T>.Inequality
  nameWithType.vb: ValueOption(Of T).Inequality
  fullName.vb: CodeJam.ValueOption(Of T).Inequality
- uid: CodeJam.ValueOption`1.Equals*
  commentId: Overload:CodeJam.ValueOption`1.Equals
  isExternal: false
  name: Equals
  nameWithType: ValueOption<T>.Equals
  fullName: CodeJam.ValueOption<T>.Equals
  nameWithType.vb: ValueOption(Of T).Equals
  fullName.vb: CodeJam.ValueOption(Of T).Equals
- uid: System.IEquatable{CodeJam.ValueOption`1}.Equals(CodeJam.ValueOption{{T}})
  commentId: M:System.IEquatable{CodeJam.ValueOption`1}.Equals(CodeJam.ValueOption{`0})
  parent: System.IEquatable{CodeJam.ValueOption`1}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ValueOption<T>)
  nameWithType: IEquatable<ValueOption<T>>.Equals(ValueOption<T>)
  fullName: System.IEquatable<CodeJam.ValueOption<T>>.Equals(CodeJam.ValueOption<T>)
  nameWithType.vb: IEquatable(Of ValueOption(Of T)).Equals(ValueOption(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.ValueOption(Of T)).Equals(CodeJam.ValueOption(Of T))
  name.vb: Equals(ValueOption(Of T))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<ValueOption<T>>.Equals
    fullName: System.IEquatable<CodeJam.ValueOption<T>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of ValueOption(Of T)).Equals
    fullName: System.IEquatable(Of CodeJam.ValueOption(Of T)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.ValueOption`1
    name: ValueOption
    nameWithType: ValueOption
    fullName: CodeJam.ValueOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.GetHashCode*
  commentId: Overload:CodeJam.ValueOption`1.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: ValueOption<T>.GetHashCode
  fullName: CodeJam.ValueOption<T>.GetHashCode
  nameWithType.vb: ValueOption(Of T).GetHashCode
  fullName.vb: CodeJam.ValueOption(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOption`1.ToString*
  commentId: Overload:CodeJam.ValueOption`1.ToString
  isExternal: false
  name: ToString
  nameWithType: ValueOption<T>.ToString
  fullName: CodeJam.ValueOption<T>.ToString
  nameWithType.vb: ValueOption(Of T).ToString
  fullName.vb: CodeJam.ValueOption(Of T).ToString
