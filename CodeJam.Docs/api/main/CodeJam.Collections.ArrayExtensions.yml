### YamlMime:ManagedReference
items:
- uid: CodeJam.Collections.ArrayExtensions
  commentId: T:CodeJam.Collections.ArrayExtensions
  id: ArrayExtensions
  parent: CodeJam.Collections
  children:
  - CodeJam.Collections.ArrayExtensions.Any``1(``0[])
  - CodeJam.Collections.ArrayExtensions.AsReadOnly``1(``0[])
  - CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0)
  - CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  - CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  - CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - CodeJam.Collections.ArrayExtensions.Clear(System.Array)
  - CodeJam.Collections.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)
  - CodeJam.Collections.ArrayExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - CodeJam.Collections.ArrayExtensions.ConvertAll``2(``0[],System.Converter{``0,``1})
  - CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int32)
  - CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int64)
  - CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.Byte[],System.Byte[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.Guid[],System.Guid[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int16[],System.Int16[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int32[],System.Int32[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int64[],System.Int64[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.SByte[],System.SByte[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[],System.StringComparison)
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.TimeSpan[],System.TimeSpan[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt16[],System.UInt16[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt32[],System.UInt32[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt64[],System.UInt64[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[])
  - CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})
  - CodeJam.Collections.ArrayExtensions.EqualsTo``1(System.Nullable{``0}[],System.Nullable{``0}[])
  - CodeJam.Collections.ArrayExtensions.Exists``1(``0[],System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.Find``1(``0[],System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindAll``1(``0[],System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindLast``1(``0[],System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Predicate{``0})
  - CodeJam.Collections.ArrayExtensions.ForEach``1(``0[],System.Action{``0})
  - CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0)
  - CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32)
  - CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  - CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0)
  - CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32)
  - CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  - CodeJam.Collections.ArrayExtensions.Reverse(System.Array)
  - CodeJam.Collections.ArrayExtensions.Reverse(System.Array,System.Int32,System.Int32)
  - CodeJam.Collections.ArrayExtensions.Sort``1(``0[])
  - CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  - CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Comparison{``0})
  - CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32)
  - CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - CodeJam.Collections.ArrayExtensions.TrueForAll``1(``0[],System.Predicate{``0})
  langs:
  - csharp
  - vb
  name: ArrayExtensions
  nameWithType: ArrayExtensions
  fullName: CodeJam.Collections.ArrayExtensions
  type: Class
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ArrayExtensions
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 8
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\n<xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> class extensions.\n"
  example: []
  syntax:
    content: public static class ArrayExtensions
    content.vb: Public Module ArrayExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[])
  id: EqualsTo(System.String[],System.String[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(String[], String[])
  nameWithType: ArrayExtensions.EqualsTo(String[], String[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[], System.String[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.cs
    startLine: 21
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this string[] a, string[] b)
    parameters:
    - id: a
      type: System.String[]
      description: The first array to compare.
    - id: b
      type: System.String[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: "\ntrue, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As String(), b As String()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(String(), String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.String(), System.String())
  name.vb: EqualsTo(String(), String())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[],System.StringComparison)
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[],System.StringComparison)
  id: EqualsTo(System.String[],System.String[],System.StringComparison)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(String[], String[], StringComparison)
  nameWithType: ArrayExtensions.EqualsTo(String[], String[], StringComparison)
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[], System.String[], System.StringComparison)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.cs
    startLine: 52
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\nA parameter specifies the culture, case, and sort rules used in the comparison.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this string[] a, string[] b, StringComparison comparison)
    parameters:
    - id: a
      type: System.String[]
      description: The first array to compare.
    - id: b
      type: System.String[]
      description: The second array to compare.
    - id: comparison
      type: System.StringComparison
      description: One of the enumeration values that specifies the rules for the comparison.
    return:
      type: System.Boolean
      description: "\ntrue, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As String(), b As String(), comparison As StringComparison) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(String(), String(), StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.String(), System.String(), System.StringComparison)
  name.vb: EqualsTo(String(), String(), StringComparison)
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[])
  id: EqualsTo``1(``0[],``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo<T>(T[], T[])
  nameWithType: ArrayExtensions.EqualsTo<T>(T[], T[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo<T>(T[], T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.cs
    startLine: 85
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: 'public static bool EqualsTo<T>(this T[] a, T[] b)where T : IEquatable<T>'
    parameters:
    - id: a
      type: '{T}[]'
      description: The first array to compare.
    - id: b
      type: '{T}[]'
      description: The second array to compare.
    typeParameters:
    - id: T
      description: Type of array item.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals to <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>, <code>false</code> otherwise.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(Of T As IEquatable(Of T))(a As T(), b As T()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(Of T)(T(), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(Of T)(T(), T())
  name.vb: EqualsTo(Of T)(T(), T())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo``1(System.Nullable{``0}[],System.Nullable{``0}[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(System.Nullable{``0}[],System.Nullable{``0}[])
  id: EqualsTo``1(System.Nullable{``0}[],System.Nullable{``0}[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo<T>(Nullable<T>[], Nullable<T>[])
  nameWithType: ArrayExtensions.EqualsTo<T>(Nullable<T>[], Nullable<T>[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo<T>(System.Nullable<T>[], System.Nullable<T>[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.cs
    startLine: 122
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: 'public static bool EqualsTo<T>(this T? [] a, T? [] b)where T : struct, IEquatable<T>'
    parameters:
    - id: a
      type: System.Nullable{{T}}[]
      description: The first array to compare.
    - id: b
      type: System.Nullable{{T}}[]
      description: The second array to compare.
    typeParameters:
    - id: T
      description: Type of array item.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals to <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>, <code>false</code> otherwise.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(Of T As {Structure, IEquatable(Of T)})(a As T?(), b As T?()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(Of T)(Nullable(Of T)(), Nullable(Of T)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(Of T)(System.Nullable(Of T)(), System.Nullable(Of T)())
  name.vb: EqualsTo(Of T)(Nullable(Of T)(), Nullable(Of T)())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})
  id: EqualsTo``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo<T>(T[], T[], IEqualityComparer<T>)
  nameWithType: ArrayExtensions.EqualsTo<T>(T[], T[], IEqualityComparer<T>)
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo<T>(T[], T[], System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.cs
    startLine: 152
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo<T>(this T[] a, T[] b, IEqualityComparer<T> comparer)
    parameters:
    - id: a
      type: '{T}[]'
      description: The first array to compare.
    - id: b
      type: '{T}[]'
      description: The second array to compare.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: Instance of <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: T
      description: Type of array item.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals to <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>, <code>false</code> otherwise.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(Of T)(a As T(), b As T(), comparer As IEqualityComparer(Of T)) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">comparer</code> is null.
  nameWithType.vb: ArrayExtensions.EqualsTo(Of T)(T(), T(), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(Of T)(T(), T(), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: EqualsTo(Of T)(T(), T(), IEqualityComparer(Of T))
- uid: CodeJam.Collections.ArrayExtensions.Any``1(``0[])
  commentId: M:CodeJam.Collections.ArrayExtensions.Any``1(``0[])
  id: Any``1(``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Any<T>(T[])
  nameWithType: ArrayExtensions.Any<T>(T[])
  fullName: CodeJam.Collections.ArrayExtensions.Any<T>(T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Any
    path: ../Main/src/Collections/Array/ArrayExtensions.cs
    startLine: 181
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nChecks if any element in array exists.\n"
  remarks: This method performs fast check instead of creating enumerator
  example: []
  syntax:
    content: public static bool Any<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: Array to check.
    typeParameters:
    - id: T
      description: Type of array item.
    return:
      type: System.Boolean
      description: <code>True</code>, if array is not empty.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of T)(array As T()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.Any*
  nameWithType.vb: ArrayExtensions.Any(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Any(Of T)(T())
  name.vb: Any(Of T)(T())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Byte[],System.Byte[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Byte[],System.Byte[])
  id: EqualsTo(System.Byte[],System.Byte[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(Byte[], Byte[])
  nameWithType: ArrayExtensions.EqualsTo(Byte[], Byte[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 24
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this byte[] a, byte[] b)
    parameters:
    - id: a
      type: System.Byte[]
      description: The first array to compare.
    - id: b
      type: System.Byte[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As Byte(), b As Byte()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(Byte(), Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Byte(), System.Byte())
  name.vb: EqualsTo(Byte(), Byte())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.SByte[],System.SByte[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.SByte[],System.SByte[])
  id: EqualsTo(System.SByte[],System.SByte[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(SByte[], SByte[])
  nameWithType: ArrayExtensions.EqualsTo(SByte[], SByte[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.SByte[], System.SByte[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this sbyte[] a, sbyte[] b)
    parameters:
    - id: a
      type: System.SByte[]
      description: The first array to compare.
    - id: b
      type: System.SByte[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As SByte(), b As SByte()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(SByte(), SByte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.SByte(), System.SByte())
  name.vb: EqualsTo(SByte(), SByte())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int16[],System.Int16[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int16[],System.Int16[])
  id: EqualsTo(System.Int16[],System.Int16[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(Int16[], Int16[])
  nameWithType: ArrayExtensions.EqualsTo(Int16[], Int16[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int16[], System.Int16[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 90
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this short[] a, short[] b)
    parameters:
    - id: a
      type: System.Int16[]
      description: The first array to compare.
    - id: b
      type: System.Int16[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As Short(), b As Short()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(Int16(), Int16())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int16(), System.Int16())
  name.vb: EqualsTo(Int16(), Int16())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt16[],System.UInt16[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt16[],System.UInt16[])
  id: EqualsTo(System.UInt16[],System.UInt16[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(UInt16[], UInt16[])
  nameWithType: ArrayExtensions.EqualsTo(UInt16[], UInt16[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt16[], System.UInt16[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 123
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this ushort[] a, ushort[] b)
    parameters:
    - id: a
      type: System.UInt16[]
      description: The first array to compare.
    - id: b
      type: System.UInt16[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As UShort(), b As UShort()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(UInt16(), UInt16())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt16(), System.UInt16())
  name.vb: EqualsTo(UInt16(), UInt16())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int32[],System.Int32[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int32[],System.Int32[])
  id: EqualsTo(System.Int32[],System.Int32[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(Int32[], Int32[])
  nameWithType: ArrayExtensions.EqualsTo(Int32[], Int32[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int32[], System.Int32[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 156
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this int[] a, int[] b)
    parameters:
    - id: a
      type: System.Int32[]
      description: The first array to compare.
    - id: b
      type: System.Int32[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As Integer(), b As Integer()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(Int32(), Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int32(), System.Int32())
  name.vb: EqualsTo(Int32(), Int32())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt32[],System.UInt32[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt32[],System.UInt32[])
  id: EqualsTo(System.UInt32[],System.UInt32[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(UInt32[], UInt32[])
  nameWithType: ArrayExtensions.EqualsTo(UInt32[], UInt32[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt32[], System.UInt32[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 189
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this uint[] a, uint[] b)
    parameters:
    - id: a
      type: System.UInt32[]
      description: The first array to compare.
    - id: b
      type: System.UInt32[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As UInteger(), b As UInteger()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(UInt32(), UInt32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt32(), System.UInt32())
  name.vb: EqualsTo(UInt32(), UInt32())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int64[],System.Int64[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int64[],System.Int64[])
  id: EqualsTo(System.Int64[],System.Int64[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(Int64[], Int64[])
  nameWithType: ArrayExtensions.EqualsTo(Int64[], Int64[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int64[], System.Int64[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 222
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this long[] a, long[] b)
    parameters:
    - id: a
      type: System.Int64[]
      description: The first array to compare.
    - id: b
      type: System.Int64[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As Long(), b As Long()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(Int64(), Int64())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int64(), System.Int64())
  name.vb: EqualsTo(Int64(), Int64())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt64[],System.UInt64[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt64[],System.UInt64[])
  id: EqualsTo(System.UInt64[],System.UInt64[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(UInt64[], UInt64[])
  nameWithType: ArrayExtensions.EqualsTo(UInt64[], UInt64[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt64[], System.UInt64[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 255
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this ulong[] a, ulong[] b)
    parameters:
    - id: a
      type: System.UInt64[]
      description: The first array to compare.
    - id: b
      type: System.UInt64[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As ULong(), b As ULong()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(UInt64(), UInt64())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt64(), System.UInt64())
  name.vb: EqualsTo(UInt64(), UInt64())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.TimeSpan[],System.TimeSpan[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.TimeSpan[],System.TimeSpan[])
  id: EqualsTo(System.TimeSpan[],System.TimeSpan[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(TimeSpan[], TimeSpan[])
  nameWithType: ArrayExtensions.EqualsTo(TimeSpan[], TimeSpan[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.TimeSpan[], System.TimeSpan[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 288
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this TimeSpan[] a, TimeSpan[] b)
    parameters:
    - id: a
      type: System.TimeSpan[]
      description: The first array to compare.
    - id: b
      type: System.TimeSpan[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As TimeSpan(), b As TimeSpan()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(TimeSpan(), TimeSpan())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.TimeSpan(), System.TimeSpan())
  name.vb: EqualsTo(TimeSpan(), TimeSpan())
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Guid[],System.Guid[])
  commentId: M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Guid[],System.Guid[])
  id: EqualsTo(System.Guid[],System.Guid[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: EqualsTo(Guid[], Guid[])
  nameWithType: ArrayExtensions.EqualsTo(Guid[], Guid[])
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Guid[], System.Guid[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualsTo
    path: ../Main/src/Collections/Array/ArrayExtensions.generated.cs
    startLine: 321
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns true, if length and content of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
  example: []
  syntax:
    content: public static bool EqualsTo(this Guid[] a, Guid[] b)
    parameters:
    - id: a
      type: System.Guid[]
      description: The first array to compare.
    - id: b
      type: System.Guid[]
      description: The second array to compare.
    return:
      type: System.Boolean
      description: True, if length and content of <code data-dev-comment-type="paramref" class="paramref">a</code> equals <code data-dev-comment-type="paramref" class="paramref">b</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTo(a As Guid(), b As Guid()) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.EqualsTo*
  nameWithType.vb: ArrayExtensions.EqualsTo(Guid(), Guid())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.EqualsTo(System.Guid(), System.Guid())
  name.vb: EqualsTo(Guid(), Guid())
- uid: CodeJam.Collections.ArrayExtensions.AsReadOnly``1(``0[])
  commentId: M:CodeJam.Collections.ArrayExtensions.AsReadOnly``1(``0[])
  id: AsReadOnly``1(``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: AsReadOnly<T>(T[])
  nameWithType: ArrayExtensions.AsReadOnly<T>(T[])
  fullName: CodeJam.Collections.ArrayExtensions.AsReadOnly<T>(T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AsReadOnly
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 16
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Returns a read-only wrapper for the specified array.
  example: []
  syntax:
    content: public static ReadOnlyCollection<T> AsReadOnly<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The one-dimensional, zero-based array to wrap in a read-only <xref href="System.Collections.ObjectModel.ReadOnlyCollection%601" data-throw-if-not-resolved="false"></xref>  wrapper. '
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
      description: A read-only <xref href="System.Collections.ObjectModel.ReadOnlyCollection%601" data-throw-if-not-resolved="false"></xref> wrapper for the specified array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsReadOnly(Of T)(array As T()) As ReadOnlyCollection(Of T)
  overload: CodeJam.Collections.ArrayExtensions.AsReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  nameWithType.vb: ArrayExtensions.AsReadOnly(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.AsReadOnly(Of T)(T())
  name.vb: AsReadOnly(Of T)(T())
- uid: CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0)
  commentId: M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0)
  id: BinarySearch``1(``0[],``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T)
  nameWithType: ArrayExtensions.BinarySearch<T>(T[], T)
  fullName: CodeJam.Collections.ArrayExtensions.BinarySearch<T>(T[], T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BinarySearch
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 42
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches an entire one-dimensional sorted <xref href="System.Array" data-throw-if-not-resolved="false"></xref> for a specific element, using the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface implemented by each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> and by the specified object.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this T[] array, T value)
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search. '
    - id: value
      type: '{T}'
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code data-dev-comment-type="paramref" class="paramref">value</code> in the specified <code data-dev-comment-type="paramref" class="paramref">array</code>, if <code data-dev-comment-type="paramref" class="paramref">value</code> is found. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is less than one or more elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of the index of the first element that is larger than <code data-dev-comment-type="paramref" class="paramref">value</code>. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is greater than any of the elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of (the index of the last element plus 1).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BinarySearch(Of T)(array As T(), value As T) As Integer
  overload: CodeJam.Collections.ArrayExtensions.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  nameWithType.vb: ArrayExtensions.BinarySearch(Of T)(T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.BinarySearch(Of T)(T(), T)
  name.vb: BinarySearch(Of T)(T(), T)
- uid: CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T, IComparer<T>)
  nameWithType: ArrayExtensions.BinarySearch<T>(T[], T, IComparer<T>)
  fullName: CodeJam.Collections.ArrayExtensions.BinarySearch<T>(T[], T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BinarySearch
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches an entire one-dimensional sorted <xref href="System.Array" data-throw-if-not-resolved="false"></xref> for a value using the specified <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> generic interface.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this T[] array, T value, IComparer<T> comparer)
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.  '
    - id: value
      type: '{T}'
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or- null to use the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code data-dev-comment-type="paramref" class="paramref">value</code> in the specified <code data-dev-comment-type="paramref" class="paramref">array</code>, if <code data-dev-comment-type="paramref" class="paramref">value</code> is found. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is less than one or more elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of the index of the first element that is larger than <code data-dev-comment-type="paramref" class="paramref">value</code>. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is greater than any of the elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of (the index of the last element plus 1).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BinarySearch(Of T)(array As T(), value As T, comparer As IComparer(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> is null, and <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is of a type that is not compatible with the elements of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> is null, <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  nameWithType.vb: ArrayExtensions.BinarySearch(Of T)(T(), T, IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.BinarySearch(Of T)(T(), T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), T, IComparer(Of T))
- uid: CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  commentId: M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T)
  nameWithType: ArrayExtensions.BinarySearch<T>(T[], Int32, Int32, T)
  fullName: CodeJam.Collections.ArrayExtensions.BinarySearch<T>(T[], System.Int32, System.Int32, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BinarySearch
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 75
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches a range of elements in a one-dimensional sorted <xref href="System.Array" data-throw-if-not-resolved="false"></xref> for a value, using the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface implemented by each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> and by the specified value.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this T[] array, int index, int length, T value)
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search. '
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code data-dev-comment-type="paramref" class="paramref">value</code> in the specified <code data-dev-comment-type="paramref" class="paramref">array</code>, if <code data-dev-comment-type="paramref" class="paramref">value</code> is found. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is less than one or more elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of the index of the first element that is larger than <code data-dev-comment-type="paramref" class="paramref">value</code>. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is greater than any of the elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of (the index of the last element plus 1).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T) As Integer
  overload: CodeJam.Collections.ArrayExtensions.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> is less than the lower bound of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> do not specify a valid range in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is of a type that is not compatible with the elements of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  nameWithType.vb: ArrayExtensions.BinarySearch(Of T)(T(), Int32, Int32, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.BinarySearch(Of T)(T(), System.Int32, System.Int32, T)
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T)
- uid: CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  nameWithType: ArrayExtensions.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  fullName: CodeJam.Collections.ArrayExtensions.BinarySearch<T>(T[], System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BinarySearch
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 94
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches a range of elements in a one-dimensional sorted <xref href="System.Array" data-throw-if-not-resolved="false"></xref> for a value, using the specified <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> generic interface.
  example: []
  syntax:
    content: public static int BinarySearch<T>(this T[] array, int index, int length, T value, IComparer<T> comparer)
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search. '
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or- null to use the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <code data-dev-comment-type="paramref" class="paramref">value</code> in the specified <code data-dev-comment-type="paramref" class="paramref">array</code>, if <code data-dev-comment-type="paramref" class="paramref">value</code> is found. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is less than one or more elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of the index of the first element that is larger than <code data-dev-comment-type="paramref" class="paramref">value</code>. If <code data-dev-comment-type="paramref" class="paramref">value</code> is not found and <code data-dev-comment-type="paramref" class="paramref">value</code> is greater than any of the elements in <code data-dev-comment-type="paramref" class="paramref">array</code>, a negative number which is the bitwise complement of (the index of the last element plus 1).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.BinarySearch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> is less than the lower bound of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> do not specify a valid range in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> is null, and <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is of a type that is not compatible with the elements of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> is null, <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  nameWithType.vb: ArrayExtensions.BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.BinarySearch(Of T)(T(), System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))
- uid: CodeJam.Collections.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)
  id: Clear(System.Array,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear(Array, Int32, Int32)
  nameWithType: ArrayExtensions.Clear(Array, Int32, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.Clear(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Clear
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 108
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Sets a range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to zero, to false, or to null, depending on the element type.
  example: []
  syntax:
    content: public static void Clear(this Array array, int index, int length)
    parameters:
    - id: array
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> whose elements need to be cleared.
    - id: index
      type: System.Int32
      description: The starting index of the range of elements to clear.
    - id: length
      type: System.Int32
      description: The number of elements to clear.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Clear(array As Array, index As Integer, length As Integer)
  overload: CodeJam.Collections.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> is less than the lower bound of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero.-or-The sum of <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the size of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.Clear(System.Array)
  commentId: M:CodeJam.Collections.ArrayExtensions.Clear(System.Array)
  id: Clear(System.Array)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear(Array)
  nameWithType: ArrayExtensions.Clear(Array)
  fullName: CodeJam.Collections.ArrayExtensions.Clear(System.Array)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Clear
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 115
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Sets all elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to the default value of each element type.
  example: []
  syntax:
    content: public static void Clear(this Array array)
    parameters:
    - id: array
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> whose elements need to be cleared.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Clear(array As Array)
  overload: CodeJam.Collections.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  nameWithType: ArrayExtensions.ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.ConstrainedCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ConstrainedCopy
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 133
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified source index and pastes them to another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.
  example: []
  syntax:
    content: public static void ConstrainedCopy(this Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <code data-dev-comment-type="paramref" class="paramref">destinationArray</code> at which storing begins.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ConstrainedCopy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
  overload: CodeJam.Collections.ArrayExtensions.ConstrainedCopy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: The <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> type is neither the same as nor derived from the <code data-dev-comment-type="paramref" class="paramref">destinationArray</code> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> cannot be cast to the type of <code data-dev-comment-type="paramref" class="paramref">destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceIndex</code> is less than the lower bound of the first dimension of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationIndex</code> is less than the lower bound of the first dimension of <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceIndex</code> to the end of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationIndex</code> to the end of <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.ConvertAll``2(``0[],System.Converter{``0,``1})
  commentId: M:CodeJam.Collections.ArrayExtensions.ConvertAll``2(``0[],System.Converter{``0,``1})
  id: ConvertAll``2(``0[],System.Converter{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: ConvertAll<TInput, TOutput>(TInput[], Converter<TInput, TOutput>)
  nameWithType: ArrayExtensions.ConvertAll<TInput, TOutput>(TInput[], Converter<TInput, TOutput>)
  fullName: CodeJam.Collections.ArrayExtensions.ConvertAll<TInput, TOutput>(TInput[], System.Converter<TInput, TOutput>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ConvertAll
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 143
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Converts an array of one type to an array of another type.
  example: []
  syntax:
    content: public static TOutput[] ConvertAll<TInput, TOutput>(this TInput[] array, Converter<TInput, TOutput> converter)
    parameters:
    - id: array
      type: '{TInput}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to convert to a target type.
    - id: converter
      type: System.Converter{{TInput},{TOutput}}
      description: A <xref href="System.Converter%602" data-throw-if-not-resolved="false"></xref> that converts each element from one type to another type.
    typeParameters:
    - id: TInput
      description: The type of the elements of the source array.
    - id: TOutput
      description: The type of the elements of the target array.
    return:
      type: '{TOutput}[]'
      description: An array of the target type containing the converted elements from the source array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvertAll(Of TInput, TOutput)(array As TInput(), converter As Converter(Of TInput, TOutput)) As TOutput()
  overload: CodeJam.Collections.ArrayExtensions.ConvertAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">converter</code> is null."
  nameWithType.vb: ArrayExtensions.ConvertAll(Of TInput, TOutput)(TInput(), Converter(Of TInput, TOutput))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.ConvertAll(Of TInput, TOutput)(TInput(), System.Converter(Of TInput, TOutput))
  name.vb: ConvertAll(Of TInput, TOutput)(TInput(), Converter(Of TInput, TOutput))
- uid: CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int32)
  id: Copy(System.Array,System.Array,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Copy(Array, Array, Int32)
  nameWithType: ArrayExtensions.Copy(Array, Array, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.Copy(System.Array, System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Copy
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 164
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the first element and pastes them into another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the first element. The length is specified as a 32-bit integer.
  example: []
  syntax:
    content: public static void Copy(this Array sourceArray, Array destinationArray, int length)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Copy(sourceArray As Array, destinationArray As Array, length As Integer)
  overload: CodeJam.Collections.ArrayExtensions.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> are of incompatible types."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> cannot be cast to the type of <code data-dev-comment-type="paramref" class="paramref">destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements in <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements in <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int64)
  commentId: M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int64)
  id: Copy(System.Array,System.Array,System.Int64)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Copy(Array, Array, Int64)
  nameWithType: ArrayExtensions.Copy(Array, Array, Int64)
  fullName: CodeJam.Collections.ArrayExtensions.Copy(System.Array, System.Array, System.Int64)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Copy
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 182
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the first element and pastes them into another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the first element. The length is specified as a 64-bit integer.
  example: []
  syntax:
    content: public static void Copy(this Array sourceArray, Array destinationArray, long length)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: length
      type: System.Int64
      description: A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>, inclusive.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Copy(sourceArray As Array, destinationArray As Array, length As Long)
  overload: CodeJam.Collections.ArrayExtensions.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> are of incompatible types."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> cannot be cast to the type of <code data-dev-comment-type="paramref" class="paramref">destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than 0 or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements in <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements in <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  commentId: M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  id: Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Copy(Array, Int64, Array, Int64, Int64)
  nameWithType: ArrayExtensions.Copy(Array, Int64, Array, Int64, Int64)
  fullName: CodeJam.Collections.ArrayExtensions.Copy(System.Array, System.Int64, System.Array, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Copy
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 202
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified source index and pastes them to another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
  example: []
  syntax:
    content: public static void Copy(this Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int64
      description: A 32-bit integer that represents the index in the <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int64
      description: A 32-bit integer that represents the index in the <code data-dev-comment-type="paramref" class="paramref">destinationArray</code> at which storing begins.
    - id: length
      type: System.Int64
      description: A 32-bit integer that represents the number of elements to copy.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Copy(sourceArray As Array, sourceIndex As Long, destinationArray As Array, destinationIndex As Long, length As Long)
  overload: CodeJam.Collections.ArrayExtensions.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> are of incompatible types."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> cannot be cast to the type of <code data-dev-comment-type="paramref" class="paramref">destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceIndex</code> is less than the lower bound of the first dimension of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationIndex</code> is less than the lower bound of the first dimension of <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceIndex</code> to the end of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationIndex</code> to the end of <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Copy(Array, Int32, Array, Int32, Int32)
  nameWithType: ArrayExtensions.Copy(Array, Int32, Array, Int32, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.Copy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Copy
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 222
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified source index and pastes them to another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
  example: []
  syntax:
    content: public static void Copy(this Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 64-bit integer that represents the index in the <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 64-bit integer that represents the index in the <code data-dev-comment-type="paramref" class="paramref">destinationArray</code> at which storing begins.
    - id: length
      type: System.Int32
      description: A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>, inclusive.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Copy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
  overload: CodeJam.Collections.ArrayExtensions.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code> are of incompatible types."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <code data-dev-comment-type="paramref" class="paramref">sourceArray</code> cannot be cast to the type of <code data-dev-comment-type="paramref" class="paramref">destinationArray</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceIndex</code> is outside the range of valid indexes for the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationIndex</code> is outside the range of valid indexes for the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than 0 or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceIndex</code> to the end of <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceArray</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is greater than the number of elements from <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationIndex</code> to the end of <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationArray</code>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.Exists``1(``0[],System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.Exists``1(``0[],System.Predicate{``0})
  id: Exists``1(``0[],System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Exists<T>(T[], Predicate<T>)
  nameWithType: ArrayExtensions.Exists<T>(T[], Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.Exists<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Exists
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 233
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
  example: []
  syntax:
    content: public static bool Exists<T>(this T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the elements to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">array</code> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exists(Of T)(array As T(), match As Predicate(Of T)) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  nameWithType.vb: ArrayExtensions.Exists(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Exists(Of T)(T(), System.Predicate(Of T))
  name.vb: Exists(Of T)(T(), Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.Find``1(``0[],System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.Find``1(``0[],System.Predicate{``0})
  id: Find``1(``0[],System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Find<T>(T[], Predicate<T>)
  nameWithType: ArrayExtensions.Find<T>(T[], Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.Find<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Find
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 249
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nSearches for an element that matches the conditions defined by the specified predicate, and returns the\nfirst occurrence within the entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static T Find<T>(this T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: '{T}'
      description: "\nThe first element that matches the conditions defined by the specified predicate, if found; otherwise,\nthe default value for type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Find(Of T)(array As T(), match As Predicate(Of T)) As T
  overload: CodeJam.Collections.ArrayExtensions.Find*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  nameWithType.vb: ArrayExtensions.Find(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Find(Of T)(T(), System.Predicate(Of T))
  name.vb: Find(Of T)(T(), Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindAll``1(``0[],System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindAll``1(``0[],System.Predicate{``0})
  id: FindAll``1(``0[],System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindAll<T>(T[], Predicate<T>)
  nameWithType: ArrayExtensions.FindAll<T>(T[], Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindAll
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 259
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Retrieves all the elements that match the conditions defined by the specified predicate.
  example: []
  syntax:
    content: public static T[] FindAll<T>(this T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the elements to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: '{T}[]'
      description: An <xref href="System.Array" data-throw-if-not-resolved="false"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindAll(Of T)(array As T(), match As Predicate(Of T)) As T()
  overload: CodeJam.Collections.ArrayExtensions.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  nameWithType.vb: ArrayExtensions.FindAll(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindAll(Of T)(T(), System.Predicate(Of T))
  name.vb: FindAll(Of T)(T(), Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Predicate{``0})
  id: FindIndex``1(``0[],System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Predicate<T>)
  nameWithType: ArrayExtensions.FindIndex<T>(T[], Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindIndex
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 271
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static int FindIndex<T>(this T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code data-dev-comment-type="paramref" class="paramref">match</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  nameWithType.vb: ArrayExtensions.FindIndex(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: ArrayExtensions.FindIndex<T>(T[], Int32, Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindIndex
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 284
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the specified index to the last element.
  example: []
  syntax:
    content: public static int FindIndex<T>(this T[] array, int startIndex, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code data-dev-comment-type="paramref" class="paramref">match</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.FindIndex(Of T)(T(), Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: ArrayExtensions.FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindIndex
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 298
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that starts at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static int FindIndex<T>(this T[] array, int startIndex, int count, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code data-dev-comment-type="paramref" class="paramref">match</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> is less than zero.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> do not specify a valid section in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindLast``1(``0[],System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindLast``1(``0[],System.Predicate{``0})
  id: FindLast``1(``0[],System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindLast<T>(T[], Predicate<T>)
  nameWithType: ArrayExtensions.FindLast<T>(T[], Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindLast<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindLast
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 313
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nSearches for an element that matches the conditions defined by the specified predicate, and returns the last\noccurrence within the entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static T FindLast<T>(this T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: '{T}'
      description: "\nThe last element that matches the conditions defined by the specified predicate, if found; otherwise, the default\nvalue for type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>."
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindLast(Of T)(array As T(), match As Predicate(Of T)) As T
  overload: CodeJam.Collections.ArrayExtensions.FindLast*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  nameWithType.vb: ArrayExtensions.FindLast(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindLast(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLast(Of T)(T(), Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Predicate<T>)
  nameWithType: ArrayExtensions.FindLastIndex<T>(T[], Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindLastIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindLastIndex
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 323
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static int FindLastIndex<T>(this T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code data-dev-comment-type="paramref" class="paramref">match</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindLastIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  nameWithType.vb: ArrayExtensions.FindLastIndex(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindLastIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Predicate<T>)
  nameWithType: ArrayExtensions.FindLastIndex<T>(T[], Int32, Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindLastIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindLastIndex
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 336
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the first element to the specified index.
  example: []
  syntax:
    content: public static int FindLastIndex<T>(this T[] array, int startIndex, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code data-dev-comment-type="paramref" class="paramref">match</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.FindLastIndex(Of T)(T(), Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindLastIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType: ArrayExtensions.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.FindLastIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FindLastIndex
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 350
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements and ends at the specified index.
  example: []
  syntax:
    content: public static int FindLastIndex<T>(this T[] array, int startIndex, int count, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code data-dev-comment-type="paramref" class="paramref">match</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
  overload: CodeJam.Collections.ArrayExtensions.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> is less than zero.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> do not specify a valid section in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.FindLastIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: CodeJam.Collections.ArrayExtensions.ForEach``1(``0[],System.Action{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.ForEach``1(``0[],System.Action{``0})
  id: ForEach``1(``0[],System.Action{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: ForEach<T>(T[], Action<T>)
  nameWithType: ArrayExtensions.ForEach<T>(T[], Action<T>)
  fullName: CodeJam.Collections.ArrayExtensions.ForEach<T>(T[], System.Action<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ForEach
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 361
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Performs the specified action on each element of the specified array.
  example: []
  syntax:
    content: public static void ForEach<T>(this T[] array, Action<T> action)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> on whose elements the action is to be performed.
    - id: action
      type: System.Action{{T}}
      description: The <xref href="System.Action%601" data-throw-if-not-resolved="false"></xref> to perform on each element of <code data-dev-comment-type="paramref" class="paramref">array</code>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ForEach(Of T)(array As T(), action As Action(Of T))
  overload: CodeJam.Collections.ArrayExtensions.ForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">action</code> is null."
  nameWithType.vb: ArrayExtensions.ForEach(Of T)(T(), Action(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.ForEach(Of T)(T(), System.Action(Of T))
  name.vb: ForEach(Of T)(T(), Action(Of T))
- uid: CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0)
  commentId: M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0)
  id: IndexOf``1(``0[],``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T)
  nameWithType: ArrayExtensions.IndexOf<T>(T[], T)
  fullName: CodeJam.Collections.ArrayExtensions.IndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IndexOf
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 372
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for the specified object and returns the index of the first occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static int IndexOf<T>(this T[] array, T value)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <code data-dev-comment-type="paramref" class="paramref">array</code>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code data-dev-comment-type="paramref" class="paramref">value</code> within the entire <code data-dev-comment-type="paramref" class="paramref">array</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOf(Of T)(array As T(), value As T) As Integer
  overload: CodeJam.Collections.ArrayExtensions.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  nameWithType.vb: ArrayExtensions.IndexOf(Of T)(T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.IndexOf(Of T)(T(), T)
  name.vb: IndexOf(Of T)(T(), T)
- uid: CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32)
  nameWithType: ArrayExtensions.IndexOf<T>(T[], T, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.IndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IndexOf
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 385
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for the specified object and returns the index of the first occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the specified index to the last element.
  example: []
  syntax:
    content: public static int IndexOf<T>(this T[] array, T value, int startIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <code data-dev-comment-type="paramref" class="paramref">array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty array.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code data-dev-comment-type="paramref" class="paramref">value</code> within the range of elements in <code data-dev-comment-type="paramref" class="paramref">array</code> that extends from <code data-dev-comment-type="paramref" class="paramref">startIndex</code> to the last element, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
  overload: CodeJam.Collections.ArrayExtensions.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.IndexOf(Of T)(T(), T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.IndexOf(Of T)(T(), T, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32)
- uid: CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32, Int32)
  nameWithType: ArrayExtensions.IndexOf<T>(T[], T, Int32, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.IndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IndexOf
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 399
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for the specified object and returns the index of the first occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that starts at the specified index and contains the specified number of elements.
  example: []
  syntax:
    content: public static int IndexOf<T>(this T[] array, T value, int startIndex, int count)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <code data-dev-comment-type="paramref" class="paramref">array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty array.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code data-dev-comment-type="paramref" class="paramref">value</code> within the range of elements in <code data-dev-comment-type="paramref" class="paramref">array</code> that starts at <code data-dev-comment-type="paramref" class="paramref">startIndex</code> and contains the number of elements specified in <code data-dev-comment-type="paramref" class="paramref">count</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
  overload: CodeJam.Collections.ArrayExtensions.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> is less than zero.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> do not specify a valid section in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.IndexOf(Of T)(T(), T, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.IndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32, Int32)
- uid: CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0)
  commentId: M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0)
  id: LastIndexOf``1(``0[],``0)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T)
  nameWithType: ArrayExtensions.LastIndexOf<T>(T[], T)
  fullName: CodeJam.Collections.ArrayExtensions.LastIndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LastIndexOf
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 409
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for the specified object and returns the index of the last occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static int LastIndexOf<T>(this T[] array, T value)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <code data-dev-comment-type="paramref" class="paramref">array</code>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code data-dev-comment-type="paramref" class="paramref">value</code> within the entire <code data-dev-comment-type="paramref" class="paramref">array</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastIndexOf(Of T)(array As T(), value As T) As Integer
  overload: CodeJam.Collections.ArrayExtensions.LastIndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  nameWithType.vb: ArrayExtensions.LastIndexOf(Of T)(T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.LastIndexOf(Of T)(T(), T)
  name.vb: LastIndexOf(Of T)(T(), T)
- uid: CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32)
  nameWithType: ArrayExtensions.LastIndexOf<T>(T[], T, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.LastIndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LastIndexOf
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 422
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the first element to the specified index.
  example: []
  syntax:
    content: public static int LastIndexOf<T>(this T[] array, T value, int startIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <code data-dev-comment-type="paramref" class="paramref">array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code data-dev-comment-type="paramref" class="paramref">value</code> within the range of elements in <code data-dev-comment-type="paramref" class="paramref">array</code> that extends from the first element to <code data-dev-comment-type="paramref" class="paramref">startIndex</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
  overload: CodeJam.Collections.ArrayExtensions.LastIndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.LastIndexOf(Of T)(T(), T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.LastIndexOf(Of T)(T(), T, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32)
- uid: CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32, Int32)
  nameWithType: ArrayExtensions.LastIndexOf<T>(T[], T, Int32, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.LastIndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LastIndexOf
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 436
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements and ends at the specified index.
  example: []
  syntax:
    content: public static int LastIndexOf<T>(this T[] array, T value, int startIndex, int count)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <code data-dev-comment-type="paramref" class="paramref">array</code>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code data-dev-comment-type="paramref" class="paramref">value</code> within the range of elements in <code data-dev-comment-type="paramref" class="paramref">array</code> that contains the number of elements specified in <code data-dev-comment-type="paramref" class="paramref">count</code> and ends at <code data-dev-comment-type="paramref" class="paramref">startIndex</code>, if found; otherwise, –1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
  overload: CodeJam.Collections.ArrayExtensions.LastIndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> is outside the range of valid indexes for <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> is less than zero.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> do not specify a valid section in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  nameWithType.vb: ArrayExtensions.LastIndexOf(Of T)(T(), T, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.LastIndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32, Int32)
- uid: CodeJam.Collections.ArrayExtensions.Reverse(System.Array)
  commentId: M:CodeJam.Collections.ArrayExtensions.Reverse(System.Array)
  id: Reverse(System.Array)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Reverse(Array)
  nameWithType: ArrayExtensions.Reverse(Array)
  fullName: CodeJam.Collections.ArrayExtensions.Reverse(System.Array)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Reverse
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 448
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Reverses the sequence of the elements in the entire one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void Reverse(this Array array)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to reverse.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Reverse(array As Array)
  overload: CodeJam.Collections.ArrayExtensions.Reverse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null. "
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is multidimensional. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.Reverse(System.Array,System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.Reverse(System.Array,System.Int32,System.Int32)
  id: Reverse(System.Array,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Reverse(Array, Int32, Int32)
  nameWithType: ArrayExtensions.Reverse(Array, Int32, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.Reverse(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Reverse
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 463
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Reverses the sequence of the elements in a range of elements in the one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void Reverse(this Array array, int index, int length)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to reverse.
    - id: index
      type: System.Int32
      description: The starting index of the section to reverse.
    - id: length
      type: System.Int32
      description: The number of elements in the section to reverse.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Reverse(array As Array, index As Integer, length As Integer)
  overload: CodeJam.Collections.ArrayExtensions.Reverse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> is less than the lower bound of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> do not specify a valid range in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Collections.ArrayExtensions.Sort``1(``0[])
  commentId: M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[])
  id: Sort``1(``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Sort<T>(T[])
  nameWithType: ArrayExtensions.Sort<T>(T[])
  fullName: CodeJam.Collections.ArrayExtensions.Sort<T>(T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Sort
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 473
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Sorts the elements in an entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void Sort<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Sort(Of T)(array As T())
  overload: CodeJam.Collections.ArrayExtensions.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <code data-dev-comment-type="paramref" class="paramref">array</code> do not implement the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface.
  nameWithType.vb: ArrayExtensions.Sort(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Sort(Of T)(T())
  name.vb: Sort(Of T)(T())
- uid: CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], IComparer<T>)
  nameWithType: ArrayExtensions.Sort<T>(T[], IComparer<T>)
  fullName: CodeJam.Collections.ArrayExtensions.Sort<T>(T[], System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Sort
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 484
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Sorts the elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> generic interface.
  example: []
  syntax:
    content: public static void Sort<T>(this T[] array, IComparer<T> comparer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-base <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> generic interface implementation to use when comparing elements, or null to use the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Sort(Of T)(array As T(), comparer As IComparer(Of T))
  overload: CodeJam.Collections.ArrayExtensions.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> is null, and one or more elements in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> do not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <code data-dev-comment-type="paramref" class="paramref">comparer</code> caused an error during the sort. For example, <code data-dev-comment-type="paramref" class="paramref">comparer</code> might not return 0 when comparing an item with itself.
  nameWithType.vb: ArrayExtensions.Sort(Of T)(T(), IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Sort(Of T)(T(), System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), IComparer(Of T))
- uid: CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Comparison{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Comparison{``0})
  id: Sort``1(``0[],System.Comparison{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Comparison<T>)
  nameWithType: ArrayExtensions.Sort<T>(T[], Comparison<T>)
  fullName: CodeJam.Collections.ArrayExtensions.Sort<T>(T[], System.Comparison<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Sort
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 493
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Sorts the elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Comparison%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void Sort<T>(this T[] array, Comparison<T> comparison)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort
    - id: comparison
      type: System.Comparison{{T}}
      description: The <xref href="System.Comparison%601" data-throw-if-not-resolved="false"></xref> to use when comparing elements.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Sort(Of T)(array As T(), comparison As Comparison(Of T))
  overload: CodeJam.Collections.ArrayExtensions.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparison</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <code data-dev-comment-type="paramref" class="paramref">comparison</code> caused an error during the sort. For example, <code data-dev-comment-type="paramref" class="paramref">comparison</code> might not return 0 when comparing an item with itself.
  nameWithType.vb: ArrayExtensions.Sort(Of T)(T(), Comparison(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Sort(Of T)(T(), System.Comparison(Of T))
  name.vb: Sort(Of T)(T(), Comparison(Of T))
- uid: CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32)
  id: Sort``1(``0[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32)
  nameWithType: ArrayExtensions.Sort<T>(T[], Int32, Int32)
  fullName: CodeJam.Collections.ArrayExtensions.Sort<T>(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Sort
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 507
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Sorts the elements in a range of elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void Sort<T>(this T[] array, int index, int length)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer)
  overload: CodeJam.Collections.ArrayExtensions.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> is less than the lower bound of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> do not specify a valid range in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <code data-dev-comment-type="paramref" class="paramref">array</code> do not implement the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface.
  nameWithType.vb: ArrayExtensions.Sort(Of T)(T(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Sort(Of T)(T(), System.Int32, System.Int32)
  name.vb: Sort(Of T)(T(), Int32, Int32)
- uid: CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32, IComparer<T>)
  nameWithType: ArrayExtensions.Sort<T>(T[], Int32, Int32, IComparer<T>)
  fullName: CodeJam.Collections.ArrayExtensions.Sort<T>(T[], System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Sort
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 523
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Sorts the elements in a range of elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> generic interface.
  example: []
  syntax:
    content: public static void Sort<T>(this T[] array, int index, int length, IComparer<T> comparer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer%601" data-throw-if-not-resolved="false"></xref> generic interface implementation to use when comparing elements, or null to use the <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer, comparer As IComparer(Of T))
  overload: CodeJam.Collections.ArrayExtensions.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> is less than the lower bound of <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> do not specify a valid range in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>. -or-The implementation of <code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> caused an error during the sort. For example, <code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">comparer</code> is null, and one or more elements in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> do not implement the <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  nameWithType.vb: ArrayExtensions.Sort(Of T)(T(), Int32, Int32, IComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.Sort(Of T)(T(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), Int32, Int32, IComparer(Of T))
- uid: CodeJam.Collections.ArrayExtensions.TrueForAll``1(``0[],System.Predicate{``0})
  commentId: M:CodeJam.Collections.ArrayExtensions.TrueForAll``1(``0[],System.Predicate{``0})
  id: TrueForAll``1(``0[],System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.ArrayExtensions
  langs:
  - csharp
  - vb
  name: TrueForAll<T>(T[], Predicate<T>)
  nameWithType: ArrayExtensions.TrueForAll<T>(T[], Predicate<T>)
  fullName: CodeJam.Collections.ArrayExtensions.TrueForAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Array/ArrayExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrueForAll
    path: ../Main/src/Collections/Array/ArrayExtensions.Infix.cs
    startLine: 534
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Determines whether every element in the array matches the conditions defined by the specified predicate.
  example: []
  syntax:
    content: public static bool TrueForAll<T>(this T[] array, Predicate<T> match)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to check against the conditions
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> that defines the conditions to check against the elements.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Boolean
      description: true if every element in <code data-dev-comment-type="paramref" class="paramref">array</code> matches the conditions defined by the specified predicate; otherwise, false. If there are no elements in the array, the return value is true.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrueForAll(Of T)(array As T(), match As Predicate(Of T)) As Boolean
  overload: CodeJam.Collections.ArrayExtensions.TrueForAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> is null.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">match</code> is null."
  nameWithType.vb: ArrayExtensions.TrueForAll(Of T)(T(), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.ArrayExtensions.TrueForAll(Of T)(T(), System.Predicate(Of T))
  name.vb: TrueForAll(Of T)(T(), Predicate(Of T))
references:
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: CodeJam.Collections
  commentId: N:CodeJam.Collections
  isExternal: false
  name: CodeJam.Collections
  nameWithType: CodeJam.Collections
  fullName: CodeJam.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Collections.ArrayExtensions.EqualsTo*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.EqualsTo
  isExternal: false
  name: EqualsTo
  nameWithType: ArrayExtensions.EqualsTo
  fullName: CodeJam.Collections.ArrayExtensions.EqualsTo
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Nullable{{T}}[]
  name: Nullable<T>[]
  nameWithType: Nullable<T>[]
  fullName: System.Nullable<T>[]
  nameWithType.vb: Nullable(Of T)()
  fullName.vb: System.Nullable(Of T)()
  name.vb: Nullable(Of T)()
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  parent: System
  isExternal: true
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Collections.ArrayExtensions.Any*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.Any
  isExternal: false
  name: Any
  nameWithType: ArrayExtensions.Any
  fullName: CodeJam.Collections.ArrayExtensions.Any
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.SByte[]
  name: SByte[]
  nameWithType: SByte[]
  fullName: System.SByte[]
  nameWithType.vb: SByte()
  fullName.vb: System.SByte()
  name.vb: SByte()
  spec.csharp:
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int16[]
  name: Int16[]
  nameWithType: Int16[]
  fullName: System.Int16[]
  nameWithType.vb: Int16()
  fullName.vb: System.Int16()
  name.vb: Int16()
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt16[]
  name: UInt16[]
  nameWithType: UInt16[]
  fullName: System.UInt16[]
  nameWithType.vb: UInt16()
  fullName.vb: System.UInt16()
  name.vb: UInt16()
  spec.csharp:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt32[]
  name: UInt32[]
  nameWithType: UInt32[]
  fullName: System.UInt32[]
  nameWithType.vb: UInt32()
  fullName.vb: System.UInt32()
  name.vb: UInt32()
  spec.csharp:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64[]
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt64[]
  name: UInt64[]
  nameWithType: UInt64[]
  fullName: System.UInt64[]
  nameWithType.vb: UInt64()
  fullName.vb: System.UInt64()
  name.vb: UInt64()
  spec.csharp:
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.TimeSpan[]
  name: TimeSpan[]
  nameWithType: TimeSpan[]
  fullName: System.TimeSpan[]
  nameWithType.vb: TimeSpan()
  fullName.vb: System.TimeSpan()
  name.vb: TimeSpan()
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Guid[]
  name: Guid[]
  nameWithType: Guid[]
  fullName: System.Guid[]
  nameWithType.vb: Guid()
  fullName.vb: System.Guid()
  name.vb: Guid()
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.AsReadOnly*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.AsReadOnly
  isExternal: false
  name: AsReadOnly
  nameWithType: ArrayExtensions.AsReadOnly
  fullName: CodeJam.Collections.ArrayExtensions.AsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{``0}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.BinarySearch*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.BinarySearch
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayExtensions.BinarySearch
  fullName: CodeJam.Collections.ArrayExtensions.BinarySearch
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: CodeJam.Collections.ArrayExtensions.Clear*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.Clear
  isExternal: false
  name: Clear
  nameWithType: ArrayExtensions.Clear
  fullName: CodeJam.Collections.ArrayExtensions.Clear
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  parent: System
  isExternal: true
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: CodeJam.Collections.ArrayExtensions.ConstrainedCopy*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.ConstrainedCopy
  isExternal: false
  name: ConstrainedCopy
  nameWithType: ArrayExtensions.ConstrainedCopy
  fullName: CodeJam.Collections.ArrayExtensions.ConstrainedCopy
- uid: System.RankException
  commentId: T:System.RankException
- uid: System.ArrayTypeMismatchException
  commentId: T:System.ArrayTypeMismatchException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
- uid: System.Converter`2
  commentId: T:System.Converter`2
  isExternal: true
  name: Converter<TInput, TOutput>
  nameWithType: Converter<TInput, TOutput>
  fullName: System.Converter<TInput, TOutput>
  nameWithType.vb: Converter(Of TInput, TOutput)
  fullName.vb: System.Converter(Of TInput, TOutput)
  name.vb: Converter(Of TInput, TOutput)
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.ConvertAll*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.ConvertAll
  isExternal: false
  name: ConvertAll
  nameWithType: ArrayExtensions.ConvertAll
  fullName: CodeJam.Collections.ArrayExtensions.ConvertAll
- uid: '{TInput}[]'
  name: TInput[]
  nameWithType: TInput[]
  fullName: TInput[]
  nameWithType.vb: TInput()
  fullName.vb: TInput()
  name.vb: TInput()
  spec.csharp:
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Converter{{TInput},{TOutput}}
  commentId: T:System.Converter{``0,``1}
  parent: System
  definition: System.Converter`2
  name: Converter<TInput, TOutput>
  nameWithType: Converter<TInput, TOutput>
  fullName: System.Converter<TInput, TOutput>
  nameWithType.vb: Converter(Of TInput, TOutput)
  fullName.vb: System.Converter(Of TInput, TOutput)
  name.vb: Converter(Of TInput, TOutput)
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TOutput}[]'
  name: TOutput[]
  nameWithType: TOutput[]
  fullName: TOutput[]
  nameWithType.vb: TOutput()
  fullName.vb: TOutput()
  name.vb: TOutput()
  spec.csharp:
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.Collections.ArrayExtensions.Copy*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.Copy
  isExternal: false
  name: Copy
  nameWithType: ArrayExtensions.Copy
  fullName: CodeJam.Collections.ArrayExtensions.Copy
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.Exists*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.Exists
  isExternal: false
  name: Exists
  nameWithType: ArrayExtensions.Exists
  fullName: CodeJam.Collections.ArrayExtensions.Exists
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.Find*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.Find
  isExternal: false
  name: Find
  nameWithType: ArrayExtensions.Find
  fullName: CodeJam.Collections.ArrayExtensions.Find
- uid: CodeJam.Collections.ArrayExtensions.FindAll*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.FindAll
  isExternal: false
  name: FindAll
  nameWithType: ArrayExtensions.FindAll
  fullName: CodeJam.Collections.ArrayExtensions.FindAll
- uid: CodeJam.Collections.ArrayExtensions.FindIndex*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.FindIndex
  isExternal: false
  name: FindIndex
  nameWithType: ArrayExtensions.FindIndex
  fullName: CodeJam.Collections.ArrayExtensions.FindIndex
- uid: CodeJam.Collections.ArrayExtensions.FindLast*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.FindLast
  isExternal: false
  name: FindLast
  nameWithType: ArrayExtensions.FindLast
  fullName: CodeJam.Collections.ArrayExtensions.FindLast
- uid: CodeJam.Collections.ArrayExtensions.FindLastIndex*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.FindLastIndex
  isExternal: false
  name: FindLastIndex
  nameWithType: ArrayExtensions.FindLastIndex
  fullName: CodeJam.Collections.ArrayExtensions.FindLastIndex
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.ForEach*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.ForEach
  isExternal: false
  name: ForEach
  nameWithType: ArrayExtensions.ForEach
  fullName: CodeJam.Collections.ArrayExtensions.ForEach
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.IndexOf*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: ArrayExtensions.IndexOf
  fullName: CodeJam.Collections.ArrayExtensions.IndexOf
- uid: CodeJam.Collections.ArrayExtensions.LastIndexOf*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.LastIndexOf
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayExtensions.LastIndexOf
  fullName: CodeJam.Collections.ArrayExtensions.LastIndexOf
- uid: CodeJam.Collections.ArrayExtensions.Reverse*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.Reverse
  isExternal: false
  name: Reverse
  nameWithType: ArrayExtensions.Reverse
  fullName: CodeJam.Collections.ArrayExtensions.Reverse
- uid: CodeJam.Collections.ArrayExtensions.Sort*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.Sort
  isExternal: false
  name: Sort
  nameWithType: ArrayExtensions.Sort
  fullName: CodeJam.Collections.ArrayExtensions.Sort
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: true
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison{{T}}
  commentId: T:System.Comparison{``0}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.ArrayExtensions.TrueForAll*
  commentId: Overload:CodeJam.Collections.ArrayExtensions.TrueForAll
  isExternal: false
  name: TrueForAll
  nameWithType: ArrayExtensions.TrueForAll
  fullName: CodeJam.Collections.ArrayExtensions.TrueForAll
