### YamlMime:ManagedReference
items:
- uid: CodeJam.Algorithms
  commentId: T:CodeJam.Algorithms
  id: Algorithms
  parent: CodeJam
  children:
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  - CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  - CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1)
  - CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  - CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  - CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  - CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  - CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1)
  - CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  - CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  - CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Boolean)
  - CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  - CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Boolean)
  - CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Boolean)
  - CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Boolean)
  - CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Boolean)
  - CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Boolean)
  - CodeJam.Algorithms.Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean)
  - CodeJam.Algorithms.Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})
  - CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})
  - CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Predicate{``0})
  - CodeJam.Algorithms.Swap``1(``0@,``0@)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  - CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  - CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1)
  - CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  - CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  - CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  - CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  langs:
  - csharp
  - vb
  name: Algorithms
  nameWithType: Algorithms
  fullName: CodeJam.Algorithms
  type: Class
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Algorithms
    path: ../Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
    startLine: 7
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Miscellaneous algorithms
  example: []
  syntax:
    content: public static class Algorithms
    content.vb: Public Module Algorithms
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1)
  commentId: M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1)
  id: EqualRange``2(System.Collections.Generic.IList{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange<TElement, TValue>(IList<TElement>, TValue)
  nameWithType: Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue)
  fullName: CodeJam.Algorithms.EqualRange<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.IComparable.cs
    startLine: 24
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: 'public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(Of TElement, TValue)(IList(Of TElement), TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue)
  name.vb: EqualRange(Of TElement, TValue)(IList(Of TElement), TValue)
- uid: CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  id: EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32)
  nameWithType: Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32)
  fullName: CodeJam.Algorithms.EqualRange<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.IComparable.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: 'public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32)
  name.vb: EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32)
- uid: CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  id: EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32)
  nameWithType: Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32)
  fullName: CodeJam.Algorithms.EqualRange<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.IComparable.cs
    startLine: 68
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists\nj is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists\n"
  example: []
  syntax:
    content: 'public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, endIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Int32)
  name.vb: EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32)
- uid: CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  id: EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.EqualRange<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.Comparer.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(Of TElement, TValue)(list As IList(Of TElement), value As TValue, comparer As Func(Of TElement, TValue, Integer)) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Func(Of TElement, TValue, System.Int32))
  name.vb: EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  id: EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.EqualRange<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.Comparer.cs
    startLine: 41
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(Of TElement, TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, comparer As Func(Of TElement, TValue, Integer)) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Func(Of TElement, TValue, System.Int32))
  name.vb: EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  id: EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.EqualRange<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Int32, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.Comparer.cs
    startLine: 62
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists\nj is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(Of TElement, TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, endIndex As Integer, comparer As Func(Of TElement, TValue, Integer)) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Int32, System.Func(Of TElement, TValue, System.Int32))
  name.vb: EqualRange(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single)
  id: EqualRange(System.Collections.Generic.IList{System.Single},System.Single)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<Single>, Single)
  nameWithType: Algorithms.EqualRange(IList<Single>, Single)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 29
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<float> list, float value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Single), value As Single) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.Single), System.Single)
  name.vb: EqualRange(IList(Of Single), Single)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<Single>, Single, Int32)
  nameWithType: Algorithms.EqualRange(IList<Single>, Single, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.Single>, System.Single, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 42
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<float> list, float value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Single), value As Single, startIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of Single), Single, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.Single), System.Single, System.Int32)
  name.vb: EqualRange(IList(Of Single), Single, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<Single>, Single, Int32, Int32)
  nameWithType: Algorithms.EqualRange(IList<Single>, Single, Int32, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.Single>, System.Single, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists\nj is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<float> list, float value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Single), value As Single, startIndex As Integer, endIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of Single), Single, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.Single), System.Single, System.Int32, System.Int32)
  name.vb: EqualRange(IList(Of Single), Single, Int32, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double)
  id: EqualRange(System.Collections.Generic.IList{System.Double},System.Double)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<Double>, Double)
  nameWithType: Algorithms.EqualRange(IList<Double>, Double)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 101
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<double> list, double value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Double), value As Double) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.Double), System.Double)
  name.vb: EqualRange(IList(Of Double), Double)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<Double>, Double, Int32)
  nameWithType: Algorithms.EqualRange(IList<Double>, Double, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.Double>, System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 114
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<double> list, double value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Double), value As Double, startIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of Double), Double, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.Double), System.Double, System.Int32)
  name.vb: EqualRange(IList(Of Double), Double, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<Double>, Double, Int32, Int32)
  nameWithType: Algorithms.EqualRange(IList<Double>, Double, Int32, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.Double>, System.Double, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 128
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists\nj is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<double> list, double value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Double), value As Double, startIndex As Integer, endIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of Double), Double, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.Double), System.Double, System.Int32, System.Int32)
  name.vb: EqualRange(IList(Of Double), Double, Int32, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  id: EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<TimeSpan>, TimeSpan)
  nameWithType: Algorithms.EqualRange(IList<TimeSpan>, TimeSpan)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 173
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<TimeSpan> list, TimeSpan value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of TimeSpan), value As TimeSpan) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of TimeSpan), TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan)
  name.vb: EqualRange(IList(Of TimeSpan), TimeSpan)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<TimeSpan>, TimeSpan, Int32)
  nameWithType: Algorithms.EqualRange(IList<TimeSpan>, TimeSpan, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 186
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<TimeSpan> list, TimeSpan value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of TimeSpan), value As TimeSpan, startIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of TimeSpan), TimeSpan, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan, System.Int32)
  name.vb: EqualRange(IList(Of TimeSpan), TimeSpan, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<TimeSpan>, TimeSpan, Int32, Int32)
  nameWithType: Algorithms.EqualRange(IList<TimeSpan>, TimeSpan, Int32, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 200
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists\nj is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<TimeSpan> list, TimeSpan value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of TimeSpan), value As TimeSpan, startIndex As Integer, endIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of TimeSpan), TimeSpan, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan, System.Int32, System.Int32)
  name.vb: EqualRange(IList(Of TimeSpan), TimeSpan, Int32, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  id: EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<DateTime>, DateTime)
  nameWithType: Algorithms.EqualRange(IList<DateTime>, DateTime)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.DateTime>, System.DateTime)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 245
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<DateTime> list, DateTime value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Date), value As Date) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of DateTime), DateTime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.DateTime), System.DateTime)
  name.vb: EqualRange(IList(Of DateTime), DateTime)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<DateTime>, DateTime, Int32)
  nameWithType: Algorithms.EqualRange(IList<DateTime>, DateTime, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.DateTime>, System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 258
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<DateTime> list, DateTime value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Date), value As Date, startIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of DateTime), DateTime, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.DateTime), System.DateTime, System.Int32)
  name.vb: EqualRange(IList(Of DateTime), DateTime, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<DateTime>, DateTime, Int32, Int32)
  nameWithType: Algorithms.EqualRange(IList<DateTime>, DateTime, Int32, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.DateTime>, System.DateTime, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 272
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists\nj is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<DateTime> list, DateTime value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of Date), value As Date, startIndex As Integer, endIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of DateTime), DateTime, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.DateTime), System.DateTime, System.Int32, System.Int32)
  name.vb: EqualRange(IList(Of DateTime), DateTime, Int32, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  id: EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<DateTimeOffset>, DateTimeOffset)
  nameWithType: Algorithms.EqualRange(IList<DateTimeOffset>, DateTimeOffset)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 317
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<DateTimeOffset> list, DateTimeOffset value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of DateTimeOffset), value As DateTimeOffset) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of DateTimeOffset), DateTimeOffset)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset)
  name.vb: EqualRange(IList(Of DateTimeOffset), DateTimeOffset)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<DateTimeOffset>, DateTimeOffset, Int32)
  nameWithType: Algorithms.EqualRange(IList<DateTimeOffset>, DateTimeOffset, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 330
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists\nj is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of DateTimeOffset), value As DateTimeOffset, startIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of DateTimeOffset), DateTimeOffset, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset, System.Int32)
  name.vb: EqualRange(IList(Of DateTimeOffset), DateTimeOffset, Int32)
- uid: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  id: EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: EqualRange(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32)
  nameWithType: Algorithms.EqualRange(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32)
  fullName: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.EqualRange.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EqualRange
    path: ../Main/src/Algorithms/Algorithms.EqualRange.generated.cs
    startLine: 344
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the tuple of [i, j] where\ni is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists\nj is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists\n"
  example: []
  syntax:
    content: public static Range<int> EqualRange(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: CodeJam.Ranges.Range{System.Int32}
      description: The tuple of lower bound and upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualRange(list As IList(Of DateTimeOffset), value As DateTimeOffset, startIndex As Integer, endIndex As Integer) As Range(Of Integer)
  overload: CodeJam.Algorithms.EqualRange*
  nameWithType.vb: Algorithms.EqualRange(IList(Of DateTimeOffset), DateTimeOffset, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset, System.Int32, System.Int32)
  name.vb: EqualRange(IList(Of DateTimeOffset), DateTimeOffset, Int32, Int32)
- uid: CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  id: Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg, TResult>(Func<TArg, TResult>, IEqualityComparer<TArg>, Boolean)
  nameWithType: Algorithms.Memoize<TArg, TResult>(Func<TArg, TResult>, IEqualityComparer<TArg>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg, TResult>(System.Func<TArg, TResult>, System.Collections.Generic.IEqualityComparer<TArg>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.cs
    startLine: 21
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific argument.\n"
  example: []
  syntax:
    content: public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, IEqualityComparer<TArg> comparer, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg},{TResult}}
      description: Function to memoize.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TArg}}
      description: Argument comparer
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg
      description: Type of argument
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg, TResult)(func As Func(Of TArg, TResult), comparer As IEqualityComparer(Of TArg), threadSafe As Boolean = False) As Func(Of TArg, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg, TResult)(Func(Of TArg, TResult), IEqualityComparer(Of TArg), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg, TResult)(System.Func(Of TArg, TResult), System.Collections.Generic.IEqualityComparer(Of TArg), System.Boolean)
  name.vb: Memoize(Of TArg, TResult)(Func(Of TArg, TResult), IEqualityComparer(Of TArg), Boolean)
- uid: CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  id: Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg, TResult>(Func<TArg, TResult>, IEqualityComparer<TArg>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg, TResult>(Func<TArg, TResult>, IEqualityComparer<TArg>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg, TResult>(System.Func<TArg, TResult>, System.Collections.Generic.IEqualityComparer<TArg>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.cs
    startLine: 38
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific argument.\n"
  example: []
  syntax:
    content: public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, IEqualityComparer<TArg> comparer, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg},{TResult}}
      description: Function to memoize.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TArg}}
      description: Argument comparer
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg
      description: Type of argument
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg, TResult)(func As Func(Of TArg, TResult), comparer As IEqualityComparer(Of TArg), threadSafety As LazyThreadSafetyMode) As Func(Of TArg, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg, TResult)(Func(Of TArg, TResult), IEqualityComparer(Of TArg), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg, TResult)(System.Func(Of TArg, TResult), System.Collections.Generic.IEqualityComparer(Of TArg), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg, TResult)(Func(Of TArg, TResult), IEqualityComparer(Of TArg), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Boolean)
  id: Memoize``2(System.Func{``0,``1},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg, TResult>(Func<TArg, TResult>, Boolean)
  nameWithType: Algorithms.Memoize<TArg, TResult>(Func<TArg, TResult>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg, TResult>(System.Func<TArg, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific argument.\n"
  example: []
  syntax:
    content: public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg},{TResult}}
      description: Function to memoize.
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg
      description: Type of argument
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg, TResult)(func As Func(Of TArg, TResult), threadSafe As Boolean = False) As Func(Of TArg, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg, TResult)(Func(Of TArg, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg, TResult)(System.Func(Of TArg, TResult), System.Boolean)
  name.vb: Memoize(Of TArg, TResult)(Func(Of TArg, TResult), Boolean)
- uid: CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  id: Memoize``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg, TResult>(Func<TArg, TResult>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg, TResult>(Func<TArg, TResult>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg, TResult>(System.Func<TArg, TResult>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.cs
    startLine: 72
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific argument.\n"
  example: []
  syntax:
    content: public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg},{TResult}}
      description: Function to memoize.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg
      description: Type of argument
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg, TResult)(func As Func(Of TArg, TResult), threadSafety As LazyThreadSafetyMode) As Func(Of TArg, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg, TResult)(Func(Of TArg, TResult), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg, TResult)(System.Func(Of TArg, TResult), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg, TResult)(Func(Of TArg, TResult), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Boolean)
  id: Memoize``3(System.Func{``0,``1,``2},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TResult>(Func<TArg1, TArg2, TResult>, Boolean)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TResult>(Func<TArg1, TArg2, TResult>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 29
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TResult> Memoize<TArg1, TArg2, TResult>(this Func<TArg1, TArg2, TResult> func, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TResult}}
      description: Function to memoize.
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TResult)(func As Func(Of TArg1, TArg2, TResult), threadSafe As Boolean = False) As Func(Of TArg1, TArg2, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, TResult), System.Boolean)
  name.vb: Memoize(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, TResult), Boolean)
- uid: CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Threading.LazyThreadSafetyMode)
  id: Memoize``3(System.Func{``0,``1,``2},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TResult>(Func<TArg1, TArg2, TResult>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TResult>(Func<TArg1, TArg2, TResult>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, TResult>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TResult> Memoize<TArg1, TArg2, TResult>(this Func<TArg1, TArg2, TResult> func, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TResult}}
      description: Function to memoize.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TResult)(func As Func(Of TArg1, TArg2, TResult), threadSafety As LazyThreadSafetyMode) As Func(Of TArg1, TArg2, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, TResult), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, TResult), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, TResult), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Boolean)
  id: Memoize``4(System.Func{``0,``1,``2,``3},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, TResult>, Boolean)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, TResult>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 68
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TResult> Memoize<TArg1, TArg2, TArg3, TResult>(this Func<TArg1, TArg2, TArg3, TResult> func, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TResult}}
      description: Function to memoize.
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TResult)(func As Func(Of TArg1, TArg2, TArg3, TResult), threadSafe As Boolean = False) As Func(Of TArg1, TArg2, TArg3, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, TResult), System.Boolean)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, TResult), Boolean)
- uid: CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Threading.LazyThreadSafetyMode)
  id: Memoize``4(System.Func{``0,``1,``2,``3},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, TResult>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, TResult>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, TResult>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 85
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TResult> Memoize<TArg1, TArg2, TArg3, TResult>(this Func<TArg1, TArg2, TArg3, TResult> func, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TResult}}
      description: Function to memoize.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TResult)(func As Func(Of TArg1, TArg2, TArg3, TResult), threadSafety As LazyThreadSafetyMode) As Func(Of TArg1, TArg2, TArg3, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, TResult), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, TResult), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, TResult), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Boolean)
  id: Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TResult>, Boolean)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TResult>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 109
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TResult> func, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TResult}}
      description: Function to memoize.
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TResult), threadSafe As Boolean = False) As Func(Of TArg1, TArg2, TArg3, TArg4, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TResult), System.Boolean)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TResult), Boolean)
- uid: CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Threading.LazyThreadSafetyMode)
  id: Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TResult>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TResult>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TResult>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 127
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TResult> func, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TResult}}
      description: Function to memoize.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TResult), threadSafety As LazyThreadSafetyMode) As Func(Of TArg1, TArg2, TArg3, TArg4, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TResult), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TResult), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TResult), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Boolean)
  id: Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, Boolean)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 152
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> func, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TResult}}
      description: Function to memoize.
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TArg5
      description: Type of argument 5
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), threadSafe As Boolean = False) As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), System.Boolean)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), Boolean)
- uid: CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Threading.LazyThreadSafetyMode)
  id: Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 171
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> func, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TResult}}
      description: Function to memoize.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TArg5
      description: Type of argument 5
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), threadSafety As LazyThreadSafetyMode) As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Boolean)
  id: Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, Boolean)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 197
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> func, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TResult}}
      description: Function to memoize.
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TArg5
      description: Type of argument 5
    - id: TArg6
      description: Type of argument 6
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), threadSafe As Boolean = False) As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), System.Boolean)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), Boolean)
- uid: CodeJam.Algorithms.Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Threading.LazyThreadSafetyMode)
  id: Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 217
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> func, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TResult}}
      description: Function to memoize.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TArg5
      description: Type of argument 5
    - id: TArg6
      description: Type of argument 6
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), threadSafety As LazyThreadSafetyMode) As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean)
  commentId: M:CodeJam.Algorithms.Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean)
  id: Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, Boolean)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, Boolean)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 244
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> func, bool threadSafe = false)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TArg7},{TResult}}
      description: Function to memoize.
    - id: threadSafe
      type: System.Boolean
      description: If true - returns thread safe implementation
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TArg5
      description: Type of argument 5
    - id: TArg6
      description: Type of argument 6
    - id: TArg7
      description: Type of argument 7
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TArg7},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), threadSafe As Boolean = False) As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), System.Boolean)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), Boolean)
- uid: CodeJam.Algorithms.Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Algorithms.Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.LazyThreadSafetyMode)
  id: Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.LazyThreadSafetyMode)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, LazyThreadSafetyMode)
  nameWithType: Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, LazyThreadSafetyMode)
  fullName: CodeJam.Algorithms.Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Memoize.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memoize
    path: ../Main/src/Algorithms/Algorithms.Memoize.generated.cs
    startLine: 265
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCaches function value for specific arguments.\n"
  example: []
  syntax:
    content: public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> func, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: func
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TArg7},{TResult}}
      description: Function to memoize.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: TArg1
      description: Type of argument 1
    - id: TArg2
      description: Type of argument 2
    - id: TArg3
      description: Type of argument 3
    - id: TArg4
      description: Type of argument 4
    - id: TArg5
      description: Type of argument 5
    - id: TArg6
      description: Type of argument 6
    - id: TArg7
      description: Type of argument 7
    - id: TResult
      description: Type of result
    return:
      type: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TArg7},{TResult}}
      description: Memoized function
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(func As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), threadSafety As LazyThreadSafetyMode) As Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)
  overload: CodeJam.Algorithms.Memoize*
  nameWithType.vb: Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), System.Threading.LazyThreadSafetyMode)
  name.vb: Memoize(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)(Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult), LazyThreadSafetyMode)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single)
  id: UpperBound(System.Collections.Generic.IList{System.Single},System.Single)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<Single>, Single)
  nameWithType: Algorithms.UpperBound(IList<Single>, Single)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 27
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<float> list, float value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Single), value As Single) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.Single), System.Single)
  name.vb: UpperBound(IList(Of Single), Single)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<Single>, Single, Int32)
  nameWithType: Algorithms.UpperBound(IList<Single>, Single, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.Single>, System.Single, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 39
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<float> list, float value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Single), value As Single, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of Single), Single, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.Single), System.Single, System.Int32)
  name.vb: UpperBound(IList(Of Single), Single, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<Single>, Single, Int32, Int32)
  nameWithType: Algorithms.UpperBound(IList<Single>, Single, Int32, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.Single>, System.Single, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 52
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<float> list, float value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Single), value As Single, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of Single), Single, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.Single), System.Single, System.Int32, System.Int32)
  name.vb: UpperBound(IList(Of Single), Single, Int32, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double)
  id: UpperBound(System.Collections.Generic.IList{System.Double},System.Double)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<Double>, Double)
  nameWithType: Algorithms.UpperBound(IList<Double>, Double)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 95
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<double> list, double value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Double), value As Double) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.Double), System.Double)
  name.vb: UpperBound(IList(Of Double), Double)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<Double>, Double, Int32)
  nameWithType: Algorithms.UpperBound(IList<Double>, Double, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.Double>, System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 107
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<double> list, double value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Double), value As Double, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of Double), Double, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.Double), System.Double, System.Int32)
  name.vb: UpperBound(IList(Of Double), Double, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<Double>, Double, Int32, Int32)
  nameWithType: Algorithms.UpperBound(IList<Double>, Double, Int32, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.Double>, System.Double, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 120
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<double> list, double value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Double), value As Double, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of Double), Double, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.Double), System.Double, System.Int32, System.Int32)
  name.vb: UpperBound(IList(Of Double), Double, Int32, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  id: UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<TimeSpan>, TimeSpan)
  nameWithType: Algorithms.UpperBound(IList<TimeSpan>, TimeSpan)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 163
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<TimeSpan> list, TimeSpan value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of TimeSpan), value As TimeSpan) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of TimeSpan), TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan)
  name.vb: UpperBound(IList(Of TimeSpan), TimeSpan)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<TimeSpan>, TimeSpan, Int32)
  nameWithType: Algorithms.UpperBound(IList<TimeSpan>, TimeSpan, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 175
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<TimeSpan> list, TimeSpan value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of TimeSpan), value As TimeSpan, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of TimeSpan), TimeSpan, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan, System.Int32)
  name.vb: UpperBound(IList(Of TimeSpan), TimeSpan, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<TimeSpan>, TimeSpan, Int32, Int32)
  nameWithType: Algorithms.UpperBound(IList<TimeSpan>, TimeSpan, Int32, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 188
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<TimeSpan> list, TimeSpan value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of TimeSpan), value As TimeSpan, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of TimeSpan), TimeSpan, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan, System.Int32, System.Int32)
  name.vb: UpperBound(IList(Of TimeSpan), TimeSpan, Int32, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  id: UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<DateTime>, DateTime)
  nameWithType: Algorithms.UpperBound(IList<DateTime>, DateTime)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.DateTime>, System.DateTime)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 231
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<DateTime> list, DateTime value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Date), value As Date) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of DateTime), DateTime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.DateTime), System.DateTime)
  name.vb: UpperBound(IList(Of DateTime), DateTime)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<DateTime>, DateTime, Int32)
  nameWithType: Algorithms.UpperBound(IList<DateTime>, DateTime, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.DateTime>, System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 243
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<DateTime> list, DateTime value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Date), value As Date, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of DateTime), DateTime, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.DateTime), System.DateTime, System.Int32)
  name.vb: UpperBound(IList(Of DateTime), DateTime, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<DateTime>, DateTime, Int32, Int32)
  nameWithType: Algorithms.UpperBound(IList<DateTime>, DateTime, Int32, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.DateTime>, System.DateTime, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 256
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<DateTime> list, DateTime value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of Date), value As Date, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of DateTime), DateTime, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.DateTime), System.DateTime, System.Int32, System.Int32)
  name.vb: UpperBound(IList(Of DateTime), DateTime, Int32, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  id: UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<DateTimeOffset>, DateTimeOffset)
  nameWithType: Algorithms.UpperBound(IList<DateTimeOffset>, DateTimeOffset)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 299
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<DateTimeOffset> list, DateTimeOffset value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of DateTimeOffset), value As DateTimeOffset) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of DateTimeOffset), DateTimeOffset)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset)
  name.vb: UpperBound(IList(Of DateTimeOffset), DateTimeOffset)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<DateTimeOffset>, DateTimeOffset, Int32)
  nameWithType: Algorithms.UpperBound(IList<DateTimeOffset>, DateTimeOffset, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 311
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of DateTimeOffset), value As DateTimeOffset, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of DateTimeOffset), DateTimeOffset, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset, System.Int32)
  name.vb: UpperBound(IList(Of DateTimeOffset), DateTimeOffset, Int32)
- uid: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  id: UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32)
  nameWithType: Algorithms.UpperBound(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32)
  fullName: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.generated.cs
    startLine: 324
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(list As IList(Of DateTimeOffset), value As DateTimeOffset, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(IList(Of DateTimeOffset), DateTimeOffset, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset, System.Int32, System.Int32)
  name.vb: UpperBound(IList(Of DateTimeOffset), DateTimeOffset, Int32, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single)
  id: LowerBound(System.Collections.Generic.IList{System.Single},System.Single)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<Single>, Single)
  nameWithType: Algorithms.LowerBound(IList<Single>, Single)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.Single>, System.Single)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 27
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<float> list, float value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Single), value As Single) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of Single), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.Single), System.Single)
  name.vb: LowerBound(IList(Of Single), Single)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<Single>, Single, Int32)
  nameWithType: Algorithms.LowerBound(IList<Single>, Single, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.Single>, System.Single, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 39
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<float> list, float value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Single), value As Single, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of Single), Single, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.Single), System.Single, System.Int32)
  name.vb: LowerBound(IList(Of Single), Single, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<Single>, Single, Int32, Int32)
  nameWithType: Algorithms.LowerBound(IList<Single>, Single, Int32, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.Single>, System.Single, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 52
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<float> list, float value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Single}
      description: The sorted list
    - id: value
      type: System.Single
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Single), value As Single, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of Single), Single, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.Single), System.Single, System.Int32, System.Int32)
  name.vb: LowerBound(IList(Of Single), Single, Int32, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double)
  id: LowerBound(System.Collections.Generic.IList{System.Double},System.Double)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<Double>, Double)
  nameWithType: Algorithms.LowerBound(IList<Double>, Double)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 85
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<double> list, double value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Double), value As Double) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.Double), System.Double)
  name.vb: LowerBound(IList(Of Double), Double)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<Double>, Double, Int32)
  nameWithType: Algorithms.LowerBound(IList<Double>, Double, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.Double>, System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 97
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<double> list, double value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Double), value As Double, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of Double), Double, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.Double), System.Double, System.Int32)
  name.vb: LowerBound(IList(Of Double), Double, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<Double>, Double, Int32, Int32)
  nameWithType: Algorithms.LowerBound(IList<Double>, Double, Int32, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.Double>, System.Double, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 110
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<double> list, double value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.Double}
      description: The sorted list
    - id: value
      type: System.Double
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Double), value As Double, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of Double), Double, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.Double), System.Double, System.Int32, System.Int32)
  name.vb: LowerBound(IList(Of Double), Double, Int32, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  id: LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<TimeSpan>, TimeSpan)
  nameWithType: Algorithms.LowerBound(IList<TimeSpan>, TimeSpan)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 143
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<TimeSpan> list, TimeSpan value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of TimeSpan), value As TimeSpan) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of TimeSpan), TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan)
  name.vb: LowerBound(IList(Of TimeSpan), TimeSpan)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<TimeSpan>, TimeSpan, Int32)
  nameWithType: Algorithms.LowerBound(IList<TimeSpan>, TimeSpan, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 155
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<TimeSpan> list, TimeSpan value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of TimeSpan), value As TimeSpan, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of TimeSpan), TimeSpan, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan, System.Int32)
  name.vb: LowerBound(IList(Of TimeSpan), TimeSpan, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<TimeSpan>, TimeSpan, Int32, Int32)
  nameWithType: Algorithms.LowerBound(IList<TimeSpan>, TimeSpan, Int32, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.TimeSpan>, System.TimeSpan, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 168
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<TimeSpan> list, TimeSpan value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.TimeSpan}
      description: The sorted list
    - id: value
      type: System.TimeSpan
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of TimeSpan), value As TimeSpan, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of TimeSpan), TimeSpan, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.TimeSpan), System.TimeSpan, System.Int32, System.Int32)
  name.vb: LowerBound(IList(Of TimeSpan), TimeSpan, Int32, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  id: LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<DateTime>, DateTime)
  nameWithType: Algorithms.LowerBound(IList<DateTime>, DateTime)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.DateTime>, System.DateTime)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 201
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<DateTime> list, DateTime value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Date), value As Date) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of DateTime), DateTime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.DateTime), System.DateTime)
  name.vb: LowerBound(IList(Of DateTime), DateTime)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<DateTime>, DateTime, Int32)
  nameWithType: Algorithms.LowerBound(IList<DateTime>, DateTime, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.DateTime>, System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 213
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<DateTime> list, DateTime value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Date), value As Date, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of DateTime), DateTime, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.DateTime), System.DateTime, System.Int32)
  name.vb: LowerBound(IList(Of DateTime), DateTime, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<DateTime>, DateTime, Int32, Int32)
  nameWithType: Algorithms.LowerBound(IList<DateTime>, DateTime, Int32, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.DateTime>, System.DateTime, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 226
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<DateTime> list, DateTime value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTime}
      description: The sorted list
    - id: value
      type: System.DateTime
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of Date), value As Date, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of DateTime), DateTime, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.DateTime), System.DateTime, System.Int32, System.Int32)
  name.vb: LowerBound(IList(Of DateTime), DateTime, Int32, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  id: LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<DateTimeOffset>, DateTimeOffset)
  nameWithType: Algorithms.LowerBound(IList<DateTimeOffset>, DateTimeOffset)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 259
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<DateTimeOffset> list, DateTimeOffset value)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of DateTimeOffset), value As DateTimeOffset) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of DateTimeOffset), DateTimeOffset)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset)
  name.vb: LowerBound(IList(Of DateTimeOffset), DateTimeOffset)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<DateTimeOffset>, DateTimeOffset, Int32)
  nameWithType: Algorithms.LowerBound(IList<DateTimeOffset>, DateTimeOffset, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 271
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of DateTimeOffset), value As DateTimeOffset, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of DateTimeOffset), DateTimeOffset, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset, System.Int32)
  name.vb: LowerBound(IList(Of DateTimeOffset), DateTimeOffset, Int32)
- uid: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  id: LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32)
  nameWithType: Algorithms.LowerBound(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32)
  fullName: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList<System.DateTimeOffset>, System.DateTimeOffset, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.generated.cs
    startLine: 284
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex, int endIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{System.DateTimeOffset}
      description: The sorted list
    - id: value
      type: System.DateTimeOffset
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(list As IList(Of DateTimeOffset), value As DateTimeOffset, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(IList(Of DateTimeOffset), DateTimeOffset, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList(Of System.DateTimeOffset), System.DateTimeOffset, System.Int32, System.Int32)
  name.vb: LowerBound(IList(Of DateTimeOffset), DateTimeOffset, Int32, Int32)
- uid: CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1)
  commentId: M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1)
  id: LowerBound``2(System.Collections.Generic.IList{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound<TElement, TValue>(IList<TElement>, TValue)
  nameWithType: Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue)
  fullName: CodeJam.Algorithms.LowerBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.IComparable.cs
    startLine: 21
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: 'public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(Of TElement, TValue)(IList(Of TElement), TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue)
  name.vb: LowerBound(Of TElement, TValue)(IList(Of TElement), TValue)
- uid: CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  id: LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32)
  nameWithType: Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32)
  fullName: CodeJam.Algorithms.LowerBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.IComparable.cs
    startLine: 40
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: 'public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    typeParameters:
    - id: TElement
      description: >
        The list element type

        <remarks>Should implement IComparable&lt;TValue></remarks>
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32)
  name.vb: LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32)
- uid: CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  id: LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32)
  nameWithType: Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32)
  fullName: CodeJam.Algorithms.LowerBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.IComparable.cs
    startLine: 62
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: 'public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Int32)
  name.vb: LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32)
- uid: CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Predicate{``0})
  commentId: M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Predicate{``0})
  id: PartitionPoint``1(System.Collections.Generic.IList{``0},System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: PartitionPoint<T>(IList<T>, Predicate<T>)
  nameWithType: Algorithms.PartitionPoint<T>(IList<T>, Predicate<T>)
  fullName: CodeJam.Algorithms.PartitionPoint<T>(System.Collections.Generic.IList<T>, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.PartitionPoint.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: PartitionPoint
    path: ../Main/src/Algorithms/Algorithms.PartitionPoint.cs
    startLine: 18
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the index i in the range [0, list.Count - 1] such that\npredicate(list[j]) = true for j &lt; i\nand predicate(list[k]) = false for k >= i\nor list.Count if no such i exists\n<remarks>The list should be partitioned according to the predicate</remarks>\n"
  example: []
  syntax:
    content: public static int PartitionPoint<T>(this IList<T> list, Predicate<T> predicate)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: The sorted list
    - id: predicate
      type: System.Predicate{{T}}
      description: The predicate
    typeParameters:
    - id: T
      description: The list element type
    return:
      type: System.Int32
      description: The partition point
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PartitionPoint(Of T)(list As IList(Of T), predicate As Predicate(Of T)) As Integer
  overload: CodeJam.Algorithms.PartitionPoint*
  nameWithType.vb: Algorithms.PartitionPoint(Of T)(IList(Of T), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.PartitionPoint(Of T)(System.Collections.Generic.IList(Of T), System.Predicate(Of T))
  name.vb: PartitionPoint(Of T)(IList(Of T), Predicate(Of T))
- uid: CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})
  commentId: M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})
  id: PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: PartitionPoint<T>(IList<T>, Int32, Predicate<T>)
  nameWithType: Algorithms.PartitionPoint<T>(IList<T>, Int32, Predicate<T>)
  fullName: CodeJam.Algorithms.PartitionPoint<T>(System.Collections.Generic.IList<T>, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.PartitionPoint.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: PartitionPoint
    path: ../Main/src/Algorithms/Algorithms.PartitionPoint.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the index i in the range [startIndex, list.Count - 1] such that\npredicate(list[j]) = true for j &lt; i\nand predicate(list[k]) = false for k >= i\nor list.Count if no such i exists\n<remarks>The list should be partitioned according to the predicate</remarks>\n"
  example: []
  syntax:
    content: public static int PartitionPoint<T>(this IList<T> list, int startIndex, Predicate<T> predicate)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: The sorted list
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: predicate
      type: System.Predicate{{T}}
      description: The predicate
    typeParameters:
    - id: T
      description: The list element type
    return:
      type: System.Int32
      description: The partition point
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PartitionPoint(Of T)(list As IList(Of T), startIndex As Integer, predicate As Predicate(Of T)) As Integer
  overload: CodeJam.Algorithms.PartitionPoint*
  nameWithType.vb: Algorithms.PartitionPoint(Of T)(IList(Of T), Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.PartitionPoint(Of T)(System.Collections.Generic.IList(Of T), System.Int32, System.Predicate(Of T))
  name.vb: PartitionPoint(Of T)(IList(Of T), Int32, Predicate(Of T))
- uid: CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})
  id: PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: PartitionPoint<T>(IList<T>, Int32, Int32, Predicate<T>)
  nameWithType: Algorithms.PartitionPoint<T>(IList<T>, Int32, Int32, Predicate<T>)
  fullName: CodeJam.Algorithms.PartitionPoint<T>(System.Collections.Generic.IList<T>, System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.PartitionPoint.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: PartitionPoint
    path: ../Main/src/Algorithms/Algorithms.PartitionPoint.cs
    startLine: 49
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the index i in the range [startIndex, endIndex - 1] such that\npredicate(list[j]) = true for j &lt; i\nand predicate(list[k]) = false for k >= i\nor endIndex if no such i exists\n<remarks>The list should be partitioned according to the predicate</remarks>\n"
  example: []
  syntax:
    content: public static int PartitionPoint<T>(this IList<T> list, int startIndex, int endIndex, Predicate<T> predicate)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: The sorted list
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    - id: predicate
      type: System.Predicate{{T}}
      description: The predicate
    typeParameters:
    - id: T
      description: The list element type
    return:
      type: System.Int32
      description: The partition point
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PartitionPoint(Of T)(list As IList(Of T), startIndex As Integer, endIndex As Integer, predicate As Predicate(Of T)) As Integer
  overload: CodeJam.Algorithms.PartitionPoint*
  nameWithType.vb: Algorithms.PartitionPoint(Of T)(IList(Of T), Int32, Int32, Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.PartitionPoint(Of T)(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: PartitionPoint(Of T)(IList(Of T), Int32, Int32, Predicate(Of T))
- uid: CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  id: LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.LowerBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.Comparer.cs
    startLine: 19
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(Of TElement, TValue)(list As IList(Of TElement), value As TValue, comparer As Func(Of TElement, TValue, Integer)) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Func(Of TElement, TValue, System.Int32))
  name.vb: LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  id: LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.LowerBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.Comparer.cs
    startLine: 37
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(Of TElement, TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, comparer As Func(Of TElement, TValue, Integer)) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Func(Of TElement, TValue, System.Int32))
  name.vb: LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  id: LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.LowerBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Int32, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.LowerBound.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LowerBound
    path: ../Main/src/Algorithms/Algorithms.LowerBound.Comparer.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The lower bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerBound(Of TElement, TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, endIndex As Integer, comparer As Func(Of TElement, TValue, Integer)) As Integer
  overload: CodeJam.Algorithms.LowerBound*
  nameWithType.vb: Algorithms.LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.LowerBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Int32, System.Func(Of TElement, TValue, System.Int32))
  name.vb: LowerBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.Swap``1(``0@,``0@)
  commentId: M:CodeJam.Algorithms.Swap``1(``0@,``0@)
  id: Swap``1(``0@,``0@)
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: Swap<T>(ref T, ref T)
  nameWithType: Algorithms.Swap<T>(ref T, ref T)
  fullName: CodeJam.Algorithms.Swap<T>(ref T, ref T)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.Swap.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Swap
    path: ../Main/src/Algorithms/Algorithms.Swap.cs
    startLine: 16
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nSwaps two objects\n"
  example: []
  syntax:
    content: public static void Swap<T>(ref T value1, ref T value2)
    parameters:
    - id: value1
      type: '{T}'
      description: First value to swap.
    - id: value2
      type: '{T}'
      description: Second value to swap.
    typeParameters:
    - id: T
      description: Type of values
    content.vb: Public Shared Sub Swap(Of T)(ByRef value1 As T, ByRef value2 As T)
  overload: CodeJam.Algorithms.Swap*
  nameWithType.vb: Algorithms.Swap(Of T)(ByRef T, ByRef T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.Swap(Of T)(ByRef T, ByRef T)
  name.vb: Swap(Of T)(ByRef T, ByRef T)
- uid: CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1)
  commentId: M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1)
  id: UpperBound``2(System.Collections.Generic.IList{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound<TElement, TValue>(IList<TElement>, TValue)
  nameWithType: Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue)
  fullName: CodeJam.Algorithms.UpperBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.IComparable.cs
    startLine: 21
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: 'public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(Of TElement, TValue)(IList(Of TElement), TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue)
  name.vb: UpperBound(Of TElement, TValue)(IList(Of TElement), TValue)
- uid: CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  id: UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32)
  nameWithType: Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32)
  fullName: CodeJam.Algorithms.UpperBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.IComparable.cs
    startLine: 39
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: 'public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32)
  name.vb: UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32)
- uid: CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  commentId: M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  id: UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32)
  nameWithType: Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32)
  fullName: CodeJam.Algorithms.UpperBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.IComparable.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.IComparable.cs
    startLine: 61
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: 'public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex)where TElement : IComparable<TValue>'
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    typeParameters:
    - id: TElement
      description: "\nThe list element type\n<remarks>Should implement IComparable&lt;TValue></remarks>\n"
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(Of TElement As IComparable(Of TValue), TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, endIndex As Integer) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Int32)
  name.vb: UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32)
- uid: CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  id: UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.UpperBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
    startLine: 19
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [0, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(Of TElement, TValue)(list As IList(Of TElement), value As TValue, comparer As Func(Of TElement, TValue, Integer)) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Func(Of TElement, TValue, System.Int32))
  name.vb: UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  id: UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.UpperBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
    startLine: 37
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value\nor list.Count if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(Of TElement, TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, comparer As Func(Of TElement, TValue, Integer)) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Func(Of TElement, TValue, System.Int32))
  name.vb: UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Func(Of TElement, TValue, Int32))
- uid: CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  commentId: M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  id: UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})
  isExtensionMethod: true
  parent: CodeJam.Algorithms
  langs:
  - csharp
  - vb
  name: UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>)
  nameWithType: Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>)
  fullName: CodeJam.Algorithms.UpperBound<TElement, TValue>(System.Collections.Generic.IList<TElement>, TValue, System.Int32, System.Int32, System.Func<TElement, TValue, System.Int32>)
  type: Method
  source:
    remote:
      path: Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UpperBound
    path: ../Main/src/Algorithms/Algorithms.UpperBound.Comparer.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value\nor endIndex if no such i exists\n"
  example: []
  syntax:
    content: public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex, Func<TElement, TValue, int> comparer)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TElement}}
      description: The sorted list
    - id: value
      type: '{TValue}'
      description: The value to compare
    - id: startIndex
      type: System.Int32
      description: The minimum index
    - id: endIndex
      type: System.Int32
      description: The upper bound for the index (not included)
    - id: comparer
      type: System.Func{{TElement},{TValue},System.Int32}
      description: The function with the Comparer&lt;T>.Compare semantics
    typeParameters:
    - id: TElement
      description: The list element type
    - id: TValue
      description: The type of the value
    return:
      type: System.Int32
      description: The upper bound for the value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperBound(Of TElement, TValue)(list As IList(Of TElement), value As TValue, startIndex As Integer, endIndex As Integer, comparer As Func(Of TElement, TValue, Integer)) As Integer
  overload: CodeJam.Algorithms.UpperBound*
  nameWithType.vb: Algorithms.UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32, Func(Of TElement, TValue, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Algorithms.UpperBound(Of TElement, TValue)(System.Collections.Generic.IList(Of TElement), TValue, System.Int32, System.Int32, System.Func(Of TElement, TValue, System.Int32))
  name.vb: UpperBound(Of TElement, TValue)(IList(Of TElement), TValue, Int32, Int32, Func(Of TElement, TValue, Int32))
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Algorithms.EqualRange*
  commentId: Overload:CodeJam.Algorithms.EqualRange
  isExternal: false
  name: EqualRange
  nameWithType: Algorithms.EqualRange
  fullName: CodeJam.Algorithms.EqualRange
- uid: System.Collections.Generic.IList{{TElement}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TElement>
  nameWithType: IList<TElement>
  fullName: System.Collections.Generic.IList<TElement>
  nameWithType.vb: IList(Of TElement)
  fullName.vb: System.Collections.Generic.IList(Of TElement)
  name.vb: IList(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CodeJam.Ranges.Range{System.Int32}
  commentId: T:CodeJam.Ranges.Range{System.Int32}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`1
  name: Range<Int32>
  nameWithType: Range<Int32>
  fullName: CodeJam.Ranges.Range<System.Int32>
  nameWithType.vb: Range(Of Int32)
  fullName.vb: CodeJam.Ranges.Range(Of System.Int32)
  name.vb: Range(Of Int32)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CodeJam.Ranges.Range`1
  commentId: T:CodeJam.Ranges.Range`1
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{{TElement},{TValue},System.Int32}
  commentId: T:System.Func{``0,``1,System.Int32}
  parent: System
  definition: System.Func`3
  name: Func<TElement, TValue, Int32>
  nameWithType: Func<TElement, TValue, Int32>
  fullName: System.Func<TElement, TValue, System.Int32>
  nameWithType.vb: Func(Of TElement, TValue, Int32)
  fullName.vb: System.Func(Of TElement, TValue, System.Int32)
  name.vb: Func(Of TElement, TValue, Int32)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.Single}
  commentId: T:System.Collections.Generic.IList{System.Single}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Single>
  nameWithType: IList<Single>
  fullName: System.Collections.Generic.IList<System.Single>
  nameWithType.vb: IList(Of Single)
  fullName.vb: System.Collections.Generic.IList(Of System.Single)
  name.vb: IList(Of Single)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Generic.IList{System.Double}
  commentId: T:System.Collections.Generic.IList{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Double>
  nameWithType: IList<Double>
  fullName: System.Collections.Generic.IList<System.Double>
  nameWithType.vb: IList(Of Double)
  fullName.vb: System.Collections.Generic.IList(Of System.Double)
  name.vb: IList(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.IList{System.TimeSpan}
  commentId: T:System.Collections.Generic.IList{System.TimeSpan}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TimeSpan>
  nameWithType: IList<TimeSpan>
  fullName: System.Collections.Generic.IList<System.TimeSpan>
  nameWithType.vb: IList(Of TimeSpan)
  fullName.vb: System.Collections.Generic.IList(Of System.TimeSpan)
  name.vb: IList(Of TimeSpan)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Collections.Generic.IList{System.DateTime}
  commentId: T:System.Collections.Generic.IList{System.DateTime}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DateTime>
  nameWithType: IList<DateTime>
  fullName: System.Collections.Generic.IList<System.DateTime>
  nameWithType.vb: IList(Of DateTime)
  fullName.vb: System.Collections.Generic.IList(Of System.DateTime)
  name.vb: IList(Of DateTime)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Collections.Generic.IList{System.DateTimeOffset}
  commentId: T:System.Collections.Generic.IList{System.DateTimeOffset}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DateTimeOffset>
  nameWithType: IList<DateTimeOffset>
  fullName: System.Collections.Generic.IList<System.DateTimeOffset>
  nameWithType.vb: IList(Of DateTimeOffset)
  fullName.vb: System.Collections.Generic.IList(Of System.DateTimeOffset)
  name.vb: IList(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: CodeJam.Algorithms.Memoize*
  commentId: Overload:CodeJam.Algorithms.Memoize
  isExternal: false
  name: Memoize
  nameWithType: Algorithms.Memoize
  fullName: CodeJam.Algorithms.Memoize
- uid: System.Func{{TArg},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TArg, TResult>
  nameWithType: Func<TArg, TResult>
  fullName: System.Func<TArg, TResult>
  nameWithType.vb: Func(Of TArg, TResult)
  fullName.vb: System.Func(Of TArg, TResult)
  name.vb: Func(Of TArg, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TArg}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TArg>
  nameWithType: IEqualityComparer<TArg>
  fullName: System.Collections.Generic.IEqualityComparer<TArg>
  nameWithType.vb: IEqualityComparer(Of TArg)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TArg)
  name.vb: IEqualityComparer(Of TArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.LazyThreadSafetyMode
  commentId: T:System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: true
  name: LazyThreadSafetyMode
  nameWithType: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Func{{TArg1},{TArg2},{TResult}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  name: Func<TArg1, TArg2, TResult>
  nameWithType: Func<TArg1, TArg2, TResult>
  fullName: System.Func<TArg1, TArg2, TResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TResult)
  fullName.vb: System.Func(Of TArg1, TArg2, TResult)
  name.vb: Func(Of TArg1, TArg2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},{TResult}}
  commentId: T:System.Func{``0,``1,``2,``3}
  parent: System
  definition: System.Func`4
  name: Func<TArg1, TArg2, TArg3, TResult>
  nameWithType: Func<TArg1, TArg2, TArg3, TResult>
  fullName: System.Func<TArg1, TArg2, TArg3, TResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, TResult)
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, TResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TResult}}
  commentId: T:System.Func{``0,``1,``2,``3,``4}
  parent: System
  definition: System.Func`5
  name: Func<TArg1, TArg2, TArg3, TArg4, TResult>
  nameWithType: Func<TArg1, TArg2, TArg3, TArg4, TResult>
  fullName: System.Func<TArg1, TArg2, TArg3, TArg4, TResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TResult)
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, TArg4, TResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TResult}}
  commentId: T:System.Func{``0,``1,``2,``3,``4,``5}
  parent: System
  definition: System.Func`6
  name: Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>
  nameWithType: Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>
  fullName: System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg5
    nameWithType: TArg5
    fullName: TArg5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg5
    nameWithType: TArg5
    fullName: TArg5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`6
  commentId: T:System.Func`6
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TResult}}
  commentId: T:System.Func{``0,``1,``2,``3,``4,``5,``6}
  parent: System
  definition: System.Func`7
  name: Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>
  nameWithType: Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>
  fullName: System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg5
    nameWithType: TArg5
    fullName: TArg5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg6
    nameWithType: TArg6
    fullName: TArg6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg5
    nameWithType: TArg5
    fullName: TArg5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg6
    nameWithType: TArg6
    fullName: TArg6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`7
  commentId: T:System.Func`7
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},{TArg4},{TArg5},{TArg6},{TArg7},{TResult}}
  commentId: T:System.Func{``0,``1,``2,``3,``4,``5,``6,``7}
  parent: System
  definition: System.Func`8
  name: Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>
  nameWithType: Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>
  fullName: System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult)
  spec.csharp:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg5
    nameWithType: TArg5
    fullName: TArg5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg6
    nameWithType: TArg6
    fullName: TArg6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg7
    nameWithType: TArg7
    fullName: TArg7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg4
    nameWithType: TArg4
    fullName: TArg4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg5
    nameWithType: TArg5
    fullName: TArg5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg6
    nameWithType: TArg6
    fullName: TArg6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg7
    nameWithType: TArg7
    fullName: TArg7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`8
  commentId: T:System.Func`8
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Algorithms.UpperBound*
  commentId: Overload:CodeJam.Algorithms.UpperBound
  isExternal: false
  name: UpperBound
  nameWithType: Algorithms.UpperBound
  fullName: CodeJam.Algorithms.UpperBound
- uid: CodeJam.Algorithms.LowerBound*
  commentId: Overload:CodeJam.Algorithms.LowerBound
  isExternal: false
  name: LowerBound
  nameWithType: Algorithms.LowerBound
  fullName: CodeJam.Algorithms.LowerBound
- uid: CodeJam.Algorithms.PartitionPoint*
  commentId: Overload:CodeJam.Algorithms.PartitionPoint
  isExternal: false
  name: PartitionPoint
  nameWithType: Algorithms.PartitionPoint
  fullName: CodeJam.Algorithms.PartitionPoint
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Algorithms.Swap*
  commentId: Overload:CodeJam.Algorithms.Swap
  isExternal: false
  name: Swap
  nameWithType: Algorithms.Swap
  fullName: CodeJam.Algorithms.Swap
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
