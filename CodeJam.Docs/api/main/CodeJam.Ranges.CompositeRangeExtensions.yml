### YamlMime:ManagedReference
items:
- uid: CodeJam.Ranges.CompositeRangeExtensions
  commentId: T:CodeJam.Ranges.CompositeRangeExtensions
  id: CompositeRangeExtensions
  parent: CodeJam.Ranges
  children:
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  - CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  - CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  - CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.CompositeRange{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``2(CodeJam.Ranges.CompositeRange{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  - CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  - CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0}})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,``0})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0,``1}})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  - CodeJam.Ranges.CompositeRangeExtensions.TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.CompositeRange{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  - CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  - CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``1,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys``2(CodeJam.Ranges.CompositeRange{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  - CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2})
  - CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2},System.Func{``0,``2})
  langs:
  - csharp
  - vb
  name: CompositeRangeExtensions
  nameWithType: CompositeRangeExtensions
  fullName: CodeJam.Ranges.CompositeRangeExtensions
  type: Class
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CompositeRangeExtensions
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extension methods for <xref href="CodeJam.Ranges.CompositeRange%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static class CompositeRangeExtensions
    content.vb: Public Module CompositeRangeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,``0})
  id: ToCompositeRange``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>)
  nameWithType: CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T, TKey>(System.Collections.Generic.IEnumerable<TKey>, System.Func<TKey, T>, System.Func<TKey, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRange
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Converts sequence of elements to the composite range.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ToCompositeRange<T, TKey>(this IEnumerable<TKey> source, Func<TKey, T> fromValueSelector, Func<TKey, T> toValueSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TKey}}
      description: Original collection.
    - id: fromValueSelector
      type: System.Func{{TKey},{T}}
      description: Callback to obtain a value for the From boundary.
    - id: toValueSelector
      type: System.Func{{TKey},{T}}
      description: Callback to obtain a value for the To boundary.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A new composite range with keys filled from the original collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRange(Of T, TKey)(source As IEnumerable(Of TKey), fromValueSelector As Func(Of TKey, T), toValueSelector As Func(Of TKey, T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(IEnumerable(Of TKey), Func(Of TKey, T), Func(Of TKey, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(System.Collections.Generic.IEnumerable(Of TKey), System.Func(Of TKey, T), System.Func(Of TKey, T))
  name.vb: ToCompositeRange(Of T, TKey)(IEnumerable(Of TKey), Func(Of TKey, T), Func(Of TKey, T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``2})
  id: ToCompositeRange``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>)
  nameWithType: CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, System.Func<TSource, T>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRange
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 40
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Converts sequence of elements to the composite range.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ToCompositeRange<TSource, T, TKey>(this IEnumerable<TSource> source, Func<TSource, T> fromValueSelector, Func<TSource, T> toValueSelector, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Original collection.
    - id: fromValueSelector
      type: System.Func{{TSource},{T}}
      description: Callback to obtain a value for the From boundary.
    - id: toValueSelector
      type: System.Func{{TSource},{T}}
      description: Callback to obtain a value for the To boundary.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: Callback to obtain a value for the range key.
    typeParameters:
    - id: TSource
      description: The type of the values in original collection.
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A new composite range with keys filled from the original collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRange(Of TSource, T, TKey)(source As IEnumerable(Of TSource), fromValueSelector As Func(Of TSource, T), toValueSelector As Func(Of TSource, T), keySelector As Func(Of TSource, TKey)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of TSource, T, TKey)(IEnumerable(Of TSource), Func(Of TSource, T), Func(Of TSource, T), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of TSource, T, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), System.Func(Of TSource, T), System.Func(Of TSource, TKey))
  name.vb: ToCompositeRange(Of TSource, T, TKey)(IEnumerable(Of TSource), Func(Of TSource, T), Func(Of TSource, T), Func(Of TSource, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToCompositeRangeFrom``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  nameWithType: CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRangeFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 61
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nConverts sequence of elements to the composite range using only From boundary.\nThe To boundary value is taken from the next item in sequence (+∞ for the last item in sequence)\n"
  example: []
  syntax:
    content: public static CompositeRange<T, TSource> ToCompositeRangeFrom<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> fromValueSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Original collection.
    - id: fromValueSelector
      type: System.Func{{TSource},{T}}
      description: Callback to obtain a value for the From boundary.
    typeParameters:
    - id: TSource
      description: The type of the values in original collection.
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TSource}}
      description: A new composite range with keys filled from the original collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRangeFrom(Of TSource, T)(source As IEnumerable(Of TSource), fromValueSelector As Func(Of TSource, T)) As CompositeRange(Of T, TSource)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRangeFrom(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T))
  name.vb: ToCompositeRangeFrom(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToCompositeRangeFrom``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>)
  nameWithType: CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRangeFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 78
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nConverts sequence of elements to the composite range using only From boundary.\nThe To boundary value is taken from the next item in sequence (+∞ for the last item in sequence)\n"
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ToCompositeRangeFrom<TSource, T, TKey>(this IEnumerable<TSource> source, Func<TSource, T> fromValueSelector, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Original collection.
    - id: fromValueSelector
      type: System.Func{{TSource},{T}}
      description: Callback to obtain a value for the From boundary.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: Callback to obtain a value for the range key.
    typeParameters:
    - id: TSource
      description: The type of the values in original collection.
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A new composite range with keys filled from the original collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRangeFrom(Of TSource, T, TKey)(source As IEnumerable(Of TSource), fromValueSelector As Func(Of TSource, T), keySelector As Func(Of TSource, TKey)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRangeFrom(Of TSource, T, TKey)(IEnumerable(Of TSource), Func(Of TSource, T), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom(Of TSource, T, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), System.Func(Of TSource, TKey))
  name.vb: ToCompositeRangeFrom(Of TSource, T, TKey)(IEnumerable(Of TSource), Func(Of TSource, T), Func(Of TSource, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToCompositeRangeTo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  nameWithType: CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRangeTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 132
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nConverts sequence of elements to the composite range using only To boundary.\nThe From boundary value is taken from the previous item in sequence (-∞ for the last item in sequence).\n"
  example: []
  syntax:
    content: public static CompositeRange<T, TSource> ToCompositeRangeTo<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> toValueSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Original collection.
    - id: toValueSelector
      type: System.Func{{TSource},{T}}
      description: Callback to obtain a value for the To boundary.
    typeParameters:
    - id: TSource
      description: The type of the values in original collection.
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TSource}}
      description: A new composite range with keys filled from the original collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRangeTo(Of TSource, T)(source As IEnumerable(Of TSource), toValueSelector As Func(Of TSource, T)) As CompositeRange(Of T, TSource)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRangeTo(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo(Of TSource, T)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T))
  name.vb: ToCompositeRangeTo(Of TSource, T)(IEnumerable(Of TSource), Func(Of TSource, T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToCompositeRangeTo``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>)
  nameWithType: CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, T>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRangeTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 149
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nConverts sequence of elements to the composite range using only To boundary.\nThe From boundary value is taken from the previous item in sequence (-∞ for the last item in sequence).\n"
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ToCompositeRangeTo<TSource, T, TKey>(this IEnumerable<TSource> source, Func<TSource, T> toValueSelector, Func<TSource, TKey> keySelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Original collection.
    - id: toValueSelector
      type: System.Func{{TSource},{T}}
      description: Callback to obtain a value for the To boundary.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: Callback to obtain a value for the range key.
    typeParameters:
    - id: TSource
      description: The type of the values in original collection.
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A new composite range with keys filled from the original collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRangeTo(Of TSource, T, TKey)(source As IEnumerable(Of TSource), toValueSelector As Func(Of TSource, T), keySelector As Func(Of TSource, TKey)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRangeTo(Of TSource, T, TKey)(IEnumerable(Of TSource), Func(Of TSource, T), Func(Of TSource, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo(Of TSource, T, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, T), System.Func(Of TSource, TKey))
  name.vb: ToCompositeRangeTo(Of TSource, T, TKey)(IEnumerable(Of TSource), Func(Of TSource, T), Func(Of TSource, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  id: WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithKeys<T, TKey2>(CompositeRange<T>, TKey2)
  nameWithType: CompositeRangeExtensions.WithKeys<T, TKey2>(CompositeRange<T>, TKey2)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, TKey2)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithKeys
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 198
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new composite range with the key specified.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey2> WithKeys<T, TKey2>(this CompositeRange<T> compositeRange, TKey2 key)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: key
      type: '{TKey2}'
      description: The value of the new key.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey2
      description: The type of the new key.
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey2}}
      description: A new composite range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithKeys(Of T, TKey2)(compositeRange As CompositeRange(Of T), key As TKey2) As CompositeRange(Of T, TKey2)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithKeys*
  nameWithType.vb: CompositeRangeExtensions.WithKeys(Of T, TKey2)(CompositeRange(Of T), TKey2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithKeys(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), TKey2)
  name.vb: WithKeys(Of T, TKey2)(CompositeRange(Of T), TKey2)
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  id: WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, TKey2)
  nameWithType: CompositeRangeExtensions.WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, TKey2)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys<T, TKey, TKey2>(CodeJam.Ranges.CompositeRange<T, TKey>, TKey2)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithKeys
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 211
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new composite range with the key specified.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey2> WithKeys<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, TKey2 key)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: key
      type: '{TKey2}'
      description: The value of the new key.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the new key.
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey2}}
      description: A new composite range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithKeys(Of T, TKey, TKey2)(compositeRange As CompositeRange(Of T, TKey), key As TKey2) As CompositeRange(Of T, TKey2)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithKeys*
  nameWithType.vb: CompositeRangeExtensions.WithKeys(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), TKey2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithKeys(Of T, TKey, TKey2)(CodeJam.Ranges.CompositeRange(Of T, TKey), TKey2)
  name.vb: WithKeys(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), TKey2)
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``1,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``1,``2})
  id: WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, Func<TKey, TKey2>)
  nameWithType: CompositeRangeExtensions.WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, Func<TKey, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys<T, TKey, TKey2>(CodeJam.Ranges.CompositeRange<T, TKey>, System.Func<TKey, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithKeys
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 225
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new composite range with the key specified.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey2> WithKeys<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Func<TKey, TKey2> keySelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: keySelector
      type: System.Func{{TKey},{TKey2}}
      description: Callback to obtain a value for the range key.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the new key.
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey2}}
      description: A new composite range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithKeys(Of T, TKey, TKey2)(compositeRange As CompositeRange(Of T, TKey), keySelector As Func(Of TKey, TKey2)) As CompositeRange(Of T, TKey2)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithKeys*
  nameWithType.vb: CompositeRangeExtensions.WithKeys(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Func(Of TKey, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithKeys(Of T, TKey, TKey2)(CodeJam.Ranges.CompositeRange(Of T, TKey), System.Func(Of TKey, TKey2))
  name.vb: WithKeys(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Func(Of TKey, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys``2(CodeJam.Ranges.CompositeRange{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys``2(CodeJam.Ranges.CompositeRange{``0,``1})
  id: WithoutKeys``2(CodeJam.Ranges.CompositeRange{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithoutKeys<T, TKey>(CompositeRange<T, TKey>)
  nameWithType: CompositeRangeExtensions.WithoutKeys<T, TKey>(CompositeRange<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithoutKeys
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 238
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Removes keys from the composite range.
  example: []
  syntax:
    content: public static CompositeRange<T> WithoutKeys<T, TKey>(this CompositeRange<T, TKey> compositeRange)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A new composite range without associated keys.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithoutKeys(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys*
  nameWithType.vb: CompositeRangeExtensions.WithoutKeys(Of T, TKey)(CompositeRange(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey))
  name.vb: WithoutKeys(Of T, TKey)(CompositeRange(Of T, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.Range{``0})
  id: GetComplementation``1(CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetComplementation<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.GetComplementation<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T>(CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetComplementation
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 253
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns complementation composite range.\nResult range contains result of (infinityRange.Exclude(<code data-dev-comment-type=\"paramref\" class=\"paramref\">range</code>).\n"
  example: []
  syntax:
    content: public static CompositeRange<T> GetComplementation<T>(this Range<T> range)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Complementation composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetComplementation(Of T)(range As Range(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation*
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T)(Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: GetComplementation(Of T)(Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  id: GetComplementation``2(CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetComplementation<T, TKey>(Range<T, TKey>)
  nameWithType: CompositeRangeExtensions.GetComplementation<T, TKey>(Range<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T, TKey>(CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetComplementation
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 265
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns complementation composite range.\nResult range contains result of (infinityRange.Exclude(<code data-dev-comment-type=\"paramref\" class=\"paramref\">range</code>).\n"
  example: []
  syntax:
    content: public static CompositeRange<T> GetComplementation<T, TKey>(this Range<T, TKey> range)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Complementation composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetComplementation(Of T, TKey)(range As Range(Of T, TKey)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation*
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T, TKey)(Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: GetComplementation(Of T, TKey)(Range(Of T, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  id: GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetComplementation<T>(CompositeRange<T>)
  nameWithType: CompositeRangeExtensions.GetComplementation<T>(CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T>(CodeJam.Ranges.CompositeRange<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetComplementation
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 276
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns complementation composite range.\nResult range contains result of (infinityRange.Exclude(<code data-dev-comment-type=\"paramref\" class=\"paramref\">compositeRange</code>).\n"
  example: []
  syntax:
    content: public static CompositeRange<T> GetComplementation<T>(this CompositeRange<T> compositeRange)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Complementation composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetComplementation(Of T)(compositeRange As CompositeRange(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation*
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T)(CompositeRange(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T)(CodeJam.Ranges.CompositeRange(Of T))
  name.vb: GetComplementation(Of T)(CompositeRange(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.CompositeRange{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.CompositeRange{``0,``1})
  id: GetComplementation``2(CodeJam.Ranges.CompositeRange{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetComplementation<T, TKey>(CompositeRange<T, TKey>)
  nameWithType: CompositeRangeExtensions.GetComplementation<T, TKey>(CompositeRange<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetComplementation
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.cs
    startLine: 288
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns complementation composite range.\nResult range contains result of (infinityRange.Exclude(<code data-dev-comment-type=\"paramref\" class=\"paramref\">compositeRange</code>).\n"
  example: []
  syntax:
    content: public static CompositeRange<T> GetComplementation<T, TKey>(this CompositeRange<T, TKey> compositeRange)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Complementation composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetComplementation(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation*
  nameWithType.vb: CompositeRangeExtensions.GetComplementation(Of T, TKey)(CompositeRange(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey))
  name.vb: GetComplementation(Of T, TKey)(CompositeRange(Of T, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(CodeJam.Ranges.Range{``0})
  id: ToCompositeRange``1(CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRange<T>(Range<T>)
  nameWithType: CompositeRangeExtensions.ToCompositeRange<T>(Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T>(CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRange
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Converts range to the composite range.
  example: []
  syntax:
    content: public static CompositeRange<T> ToCompositeRange<T>(this Range<T> range)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The range.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A new composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRange(Of T)(range As Range(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of T)(Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T)(CodeJam.Ranges.Range(Of T))
  name.vb: ToCompositeRange(Of T)(Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0}})
  id: ToCompositeRange``1(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0}})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRange<T>(IEnumerable<Range<T>>)
  nameWithType: CompositeRangeExtensions.ToCompositeRange<T>(IEnumerable<Range<T>>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T>(System.Collections.Generic.IEnumerable<CodeJam.Ranges.Range<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRange
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 31
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Converts sequence of elements to the composite range.
  example: []
  syntax:
    content: public static CompositeRange<T> ToCompositeRange<T>(this IEnumerable<Range<T>> ranges)
    parameters:
    - id: ranges
      type: System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{{T}}}
      description: The ranges.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A new composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRange(Of T)(ranges As IEnumerable(Of Range(Of T))) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of T)(IEnumerable(Of Range(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T)(System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.Range(Of T)))
  name.vb: ToCompositeRange(Of T)(IEnumerable(Of Range(Of T)))
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: MakeInclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeInclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive<T>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeInclusive
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces exclusive boundaries with inclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static CompositeRange<T> MakeInclusive<T>(this CompositeRange<T> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A range with inclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeInclusive(Of T)(compositeRange As CompositeRange(Of T), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive*
  nameWithType.vb: CompositeRangeExtensions.MakeInclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive(Of T)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: MakeExclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeExclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive<T>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeExclusive
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 67
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces inclusive boundaries with exclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static CompositeRange<T> MakeExclusive<T>(this CompositeRange<T> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A range with exclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeExclusive(Of T)(compositeRange As CompositeRange(Of T), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive*
  nameWithType.vb: CompositeRangeExtensions.MakeExclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive(Of T)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T)(CompositeRange(Of T), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  id: WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, T2>(CompositeRange<T>, Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, T2>(CompositeRange<T>, Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 88
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new composite range with the key specified.
  example: []
  syntax:
    content: public static CompositeRange<T2> WithValues<T, T2>(this CompositeRange<T> compositeRange, Func<T, T2> newValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: newValueSelector
      type: System.Func{{T},{T2}}
      description: The value of the new key.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: T2
      description: The type of new range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T2}}
      description: A new composite range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, T2)(compositeRange As CompositeRange(Of T), newValueSelector As Func(Of T, T2)) As CompositeRange(Of T2)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithValues*
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  id: WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, T2>(CompositeRange<T>, Func<T, T2>, Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, T2>(CompositeRange<T>, Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, T2>(CodeJam.Ranges.CompositeRange<T>, System.Func<T, T2>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 103
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new composite range with the key specified.
  example: []
  syntax:
    content: public static CompositeRange<T2> WithValues<T, T2>(this CompositeRange<T> compositeRange, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the From boundary. Used if boundary has a value.
    - id: toValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the To boundary. Used if boundary has a value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: T2
      description: The type of new range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T2}}
      description: A new composite range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, T2)(compositeRange As CompositeRange(Of T), fromValueSelector As Func(Of T, T2), toValueSelector As Func(Of T, T2)) As CompositeRange(Of T2)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithValues*
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, T2)(CodeJam.Ranges.CompositeRange(Of T), System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(CompositeRange(Of T), Func(Of T, T2), Func(Of T, T2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  id: GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersections<T>(CompositeRange<T>)
  nameWithType: CompositeRangeExtensions.GetIntersections<T>(CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections<T>(CodeJam.Ranges.CompositeRange<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersections
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 125
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns all range intersections from the composite range.
  example: []
  syntax:
    content: public static IEnumerable<RangeIntersection<T>> GetIntersections<T>(this CompositeRange<T> compositeRange)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Collections.Generic.IEnumerable{CodeJam.Ranges.RangeIntersection{{T}}}
      description: All range intersections from the composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersections(Of T)(compositeRange As CompositeRange(Of T)) As IEnumerable(Of RangeIntersection(Of T))
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections*
  nameWithType.vb: CompositeRangeExtensions.GetIntersections(Of T)(CompositeRange(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections(Of T)(CodeJam.Ranges.CompositeRange(Of T))
  name.vb: GetIntersections(Of T)(CompositeRange(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  id: GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(CodeJam.Ranges.CompositeRange<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 189
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static Range<T>[] GetIntersection<T>(this CompositeRange<T> compositeRange, T value)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}[]
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T)(compositeRange As CompositeRange(Of T), value As T) As Range(Of T)()
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(CompositeRange(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: GetIntersection(Of T)(CompositeRange(Of T), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  id: GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 218
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static RangeIntersection<T> GetIntersection<T>(this CompositeRange<T> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.RangeIntersection{{T}}
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T)(compositeRange As CompositeRange(Of T), from As T, to As T) As RangeIntersection(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(CompositeRange(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: GetIntersection(Of T)(CompositeRange(Of T), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  id: GetIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 227
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static RangeIntersection<T> GetIntersection<T>(this CompositeRange<T> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.RangeIntersection{{T}}
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T)(compositeRange As CompositeRange(Of T), other As Range(Of T)) As RangeIntersection(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T)(CompositeRange(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: GetIntersection(Of T)(CompositeRange(Of T), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  id: GetIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 244
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static RangeIntersection<T> GetIntersection<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey2
      description: The type of the other range key
    return:
      type: CodeJam.Ranges.RangeIntersection{{T}}
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T, TKey2)(compositeRange As CompositeRange(Of T), other As Range(Of T, TKey2)) As RangeIntersection(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: GetIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  id: Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 287
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains the specified value.
  example: []
  syntax:
    content: public static bool Contains<T>(this CompositeRange<T> compositeRange, T value)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(compositeRange As CompositeRange(Of T), value As T) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: Contains(Of T)(CompositeRange(Of T), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 297
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T>(this CompositeRange<T> compositeRange, RangeBoundaryFrom<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(compositeRange As CompositeRange(Of T), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 307
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T>(this CompositeRange<T> compositeRange, RangeBoundaryTo<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(compositeRange As CompositeRange(Of T), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  id: Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 318
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T>(this CompositeRange<T> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(compositeRange As CompositeRange(Of T), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: Contains(Of T)(CompositeRange(Of T), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  id: Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Contains<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 327
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T>(this CompositeRange<T> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(compositeRange As CompositeRange(Of T), other As Range(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T)(CompositeRange(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T)(CompositeRange(Of T), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  id: Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 345
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey2
      description: The type of the other range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey2)(compositeRange As CompositeRange(Of T), other As Range(Of T, TKey2)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Contains(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  id: Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Contains<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 357
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: 'public static bool Contains<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T), other As TCompositeRange) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: Contains(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  id: HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.HasIntersection<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 401
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite  has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T>(this CompositeRange<T> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T)(compositeRange As CompositeRange(Of T), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T)(CompositeRange(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: HasIntersection(Of T)(CompositeRange(Of T), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  id: HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 412
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T>(this CompositeRange<T> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T)(compositeRange As CompositeRange(Of T), other As Range(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T)(CompositeRange(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: HasIntersection(Of T)(CompositeRange(Of T), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  id: HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 430
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey2
      description: The type of the other range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TKey2)(compositeRange As CompositeRange(Of T), other As Range(Of T, TKey2)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: HasIntersection(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  id: HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 442
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range has intersection with another range.
  example: []
  syntax:
    content: 'public static bool HasIntersection<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T), other As TCompositeRange) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: HasIntersection(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  id: Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Union<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 485
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing all subranges.
  example: []
  syntax:
    content: public static CompositeRange<T> Union<T>(this CompositeRange<T> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to union with.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A union range containing all subranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T)(compositeRange As CompositeRange(Of T), other As Range(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Union*
  nameWithType.vb: CompositeRangeExtensions.Union(Of T)(CompositeRange(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Union(Of T)(CompositeRange(Of T), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  id: Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T>(CompositeRange<T>, CompositeRange<T>)
  nameWithType: CompositeRangeExtensions.Union<T>(CompositeRange<T>, CompositeRange<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.CompositeRange<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 494
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing all subranges.
  example: []
  syntax:
    content: public static CompositeRange<T> Union<T>(this CompositeRange<T> compositeRange, CompositeRange<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The range to union with.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A union range containing all subranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T)(compositeRange As CompositeRange(Of T), other As CompositeRange(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Union*
  nameWithType.vb: CompositeRangeExtensions.Union(Of T)(CompositeRange(Of T), CompositeRange(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.CompositeRange(Of T))
  name.vb: Union(Of T)(CompositeRange(Of T), CompositeRange(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  id: ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>(CodeJam.Ranges.CompositeRange<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 544
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T> ExtendFrom<T>(this CompositeRange<T> compositeRange, T from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T)(compositeRange As CompositeRange(Of T), from As T) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom*
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T)(CompositeRange(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: ExtendFrom(Of T)(CompositeRange(Of T), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: ExtendFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 555
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T> ExtendFrom<T>(this CompositeRange<T> compositeRange, RangeBoundaryFrom<T> from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T)(compositeRange As CompositeRange(Of T), from As RangeBoundaryFrom(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom*
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  id: ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.ExtendTo<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>(CodeJam.Ranges.CompositeRange<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 579
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T> ExtendTo<T>(this CompositeRange<T> compositeRange, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T)(compositeRange As CompositeRange(Of T), to As T) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo*
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T)(CompositeRange(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: ExtendTo(Of T)(CompositeRange(Of T), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: ExtendTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.ExtendTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 590
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T> ExtendTo<T>(this CompositeRange<T> compositeRange, RangeBoundaryTo<T> to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T)(compositeRange As CompositeRange(Of T), to As RangeBoundaryTo(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo*
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  id: Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.Intersect<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 615
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static CompositeRange<T> Intersect<T>(this CompositeRange<T> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T)(compositeRange As CompositeRange(Of T), from As T, to As T) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T)(CompositeRange(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: Intersect(Of T)(CompositeRange(Of T), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  id: Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Intersect<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 624
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static CompositeRange<T> Intersect<T>(this CompositeRange<T> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T)(compositeRange As CompositeRange(Of T), other As Range(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T)(CompositeRange(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Intersect(Of T)(CompositeRange(Of T), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  id: Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Intersect<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 641
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static CompositeRange<T> Intersect<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey2
      description: The type of the other range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TKey2)(compositeRange As CompositeRange(Of T), other As Range(Of T, TKey2)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Intersect(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  id: Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Intersect<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 651
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: 'public static CompositeRange<T> Intersect<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T), other As TCompositeRange) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: Intersect(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  id: TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.TrimFrom<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>(CodeJam.Ranges.CompositeRange<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 719
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T> TrimFrom<T>(this CompositeRange<T> compositeRange, T from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A range trimmed with a new From boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T)(compositeRange As CompositeRange(Of T), from As T) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom*
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T)(CompositeRange(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: TrimFrom(Of T)(CompositeRange(Of T), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: TrimFrom``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.TrimFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 728
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T> TrimFrom<T>(this CompositeRange<T> compositeRange, RangeBoundaryFrom<T> from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A range trimmed with a new From boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T)(compositeRange As CompositeRange(Of T), from As RangeBoundaryFrom(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom*
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T)(CompositeRange(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  id: TrimTo``1(CodeJam.Ranges.CompositeRange{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T>(CompositeRange<T>, T)
  nameWithType: CompositeRangeExtensions.TrimTo<T>(CompositeRange<T>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>(CodeJam.Ranges.CompositeRange<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 737
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T> TrimTo<T>(this CompositeRange<T> compositeRange, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A range trimmed with a new To boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T)(compositeRange As CompositeRange(Of T), to As T) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimTo*
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T)(CompositeRange(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), T)
  name.vb: TrimTo(Of T)(CompositeRange(Of T), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: TrimTo``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.TrimTo<T>(CompositeRange<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 746
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T> TrimTo<T>(this CompositeRange<T> compositeRange, RangeBoundaryTo<T> to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: A range trimmed with a new To boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T)(compositeRange As CompositeRange(Of T), to As RangeBoundaryTo(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimTo*
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T)(CompositeRange(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  id: Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T>(CompositeRange<T>, T, T)
  nameWithType: CompositeRangeExtensions.Except<T>(CompositeRange<T>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>(CodeJam.Ranges.CompositeRange<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 756
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: public static CompositeRange<T> Except<T>(this CompositeRange<T> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T)(compositeRange As CompositeRange(Of T), from As T, to As T) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T)(CompositeRange(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)(CodeJam.Ranges.CompositeRange(Of T), T, T)
  name.vb: Except(Of T)(CompositeRange(Of T), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  id: Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T>(CompositeRange<T>, Range<T>)
  nameWithType: CompositeRangeExtensions.Except<T>(CompositeRange<T>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 765
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: public static CompositeRange<T> Except<T>(this CompositeRange<T> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T)(compositeRange As CompositeRange(Of T), other As Range(Of T)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T)(CompositeRange(Of T), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T))
  name.vb: Except(Of T)(CompositeRange(Of T), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  id: Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Except<T, TKey2>(CompositeRange<T>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey2>(CodeJam.Ranges.CompositeRange<T>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 782
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: public static CompositeRange<T> Except<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey2
      description: The type of the other range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T, TKey2)(compositeRange As CompositeRange(Of T), other As Range(Of T, TKey2)) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey2)(CodeJam.Ranges.CompositeRange(Of T), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Except(Of T, TKey2)(CompositeRange(Of T), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  id: Except``2(CodeJam.Ranges.CompositeRange{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Except<T, TCompositeRange>(CompositeRange<T>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TCompositeRange>(CodeJam.Ranges.CompositeRange<T>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.NoKey.cs
    startLine: 792
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: 'public static CompositeRange<T> Except<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.CompositeRange{{T}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T), other As TCompositeRange) As CompositeRange(Of T)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T), TCompositeRange)
  name.vb: Except(Of T, TCompositeRange)(CompositeRange(Of T), TCompositeRange)
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  id: ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRange<T, TKey>(Range<T, TKey>)
  nameWithType: CompositeRangeExtensions.ToCompositeRange<T, TKey>(Range<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T, TKey>(CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRange
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Converts range to the composite range.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ToCompositeRange<T, TKey>(this Range<T, TKey> range)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The range.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A new composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRange(Of T, TKey)(range As Range(Of T, TKey)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: ToCompositeRange(Of T, TKey)(Range(Of T, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0,``1}})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0,``1}})
  id: ToCompositeRange``2(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0,``1}})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ToCompositeRange<T, TKey>(IEnumerable<Range<T, TKey>>)
  nameWithType: CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<Range<T, TKey>>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange<T, TKey>(System.Collections.Generic.IEnumerable<CodeJam.Ranges.Range<T, TKey>>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToCompositeRange
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 42
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Converts sequence of elements to the composite range.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ToCompositeRange<T, TKey>(this IEnumerable<Range<T, TKey>> ranges)
    parameters:
    - id: ranges
      type: System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{{T},{TKey}}}
      description: The ranges.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A new composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCompositeRange(Of T, TKey)(ranges As IEnumerable(Of Range(Of T, TKey))) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange*
  nameWithType.vb: CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(IEnumerable(Of Range(Of T, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange(Of T, TKey)(System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.Range(Of T, TKey)))
  name.vb: ToCompositeRange(Of T, TKey)(IEnumerable(Of Range(Of T, TKey)))
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeInclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: MakeInclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeInclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeInclusive
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces exclusive boundaries with inclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> MakeInclusive<T, TKey>(this CompositeRange<T, TKey> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A range with inclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeInclusive(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive*
  nameWithType.vb: CompositeRangeExtensions.MakeInclusive(Of T, TKey)(CompositeRange(Of T, TKey), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T, TKey)(CompositeRange(Of T, TKey), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeExclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: MakeExclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>)
  nameWithType: CompositeRangeExtensions.MakeExclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeExclusive
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 80
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces inclusive boundaries with exclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> MakeExclusive<T, TKey>(this CompositeRange<T, TKey> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A range with exclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeExclusive(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive*
  nameWithType.vb: CompositeRangeExtensions.MakeExclusive(Of T, TKey)(CompositeRange(Of T, TKey), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T, TKey)(CompositeRange(Of T, TKey), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2})
  id: WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, TKey, T2>(CodeJam.Ranges.CompositeRange<T, TKey>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 102
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new composite range with the key specified.
  example: []
  syntax:
    content: public static CompositeRange<T2, TKey> WithValues<T, TKey, T2>(this CompositeRange<T, TKey> compositeRange, Func<T, T2> newValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: newValueSelector
      type: System.Func{{T},{T2}}
      description: The value of the new key.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: T2
      description: The type of new range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T2},{TKey}}
      description: A new composite range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, TKey, T2)(compositeRange As CompositeRange(Of T, TKey), newValueSelector As Func(Of T, T2)) As CompositeRange(Of T2, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithValues*
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, TKey, T2)(CompositeRange(Of T, TKey), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, TKey, T2)(CodeJam.Ranges.CompositeRange(Of T, TKey), System.Func(Of T, T2))
  name.vb: WithValues(Of T, TKey, T2)(CompositeRange(Of T, TKey), Func(Of T, T2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2},System.Func{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2},System.Func{``0,``2})
  id: WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2},System.Func{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>, Func<T, T2>)
  nameWithType: CompositeRangeExtensions.WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues<T, TKey, T2>(CodeJam.Ranges.CompositeRange<T, TKey>, System.Func<T, T2>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 118
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new composite range with the key specified.
  example: []
  syntax:
    content: public static CompositeRange<T2, TKey> WithValues<T, TKey, T2>(this CompositeRange<T, TKey> compositeRange, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the From boundary. Used if boundary has a value.
    - id: toValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the To boundary. Used if boundary has a value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: T2
      description: The type of new range values.
    return:
      type: CodeJam.Ranges.CompositeRange{{T2},{TKey}}
      description: A new composite range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, TKey, T2)(compositeRange As CompositeRange(Of T, TKey), fromValueSelector As Func(Of T, T2), toValueSelector As Func(Of T, T2)) As CompositeRange(Of T2, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.WithValues*
  nameWithType.vb: CompositeRangeExtensions.WithValues(Of T, TKey, T2)(CompositeRange(Of T, TKey), Func(Of T, T2), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.WithValues(Of T, TKey, T2)(CodeJam.Ranges.CompositeRange(Of T, TKey), System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, TKey, T2)(CompositeRange(Of T, TKey), Func(Of T, T2), Func(Of T, T2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``2(CodeJam.Ranges.CompositeRange{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``2(CodeJam.Ranges.CompositeRange{``0,``1})
  id: GetIntersections``2(CodeJam.Ranges.CompositeRange{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersections<T, TKey>(CompositeRange<T, TKey>)
  nameWithType: CompositeRangeExtensions.GetIntersections<T, TKey>(CompositeRange<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersections
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 141
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns all range intersections from the composite range.
  example: []
  syntax:
    content: public static IEnumerable<RangeIntersection<T, TKey>> GetIntersections<T, TKey>(this CompositeRange<T, TKey> compositeRange)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Collections.Generic.IEnumerable{CodeJam.Ranges.RangeIntersection{{T},{TKey}}}
      description: All range intersections from the composite range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersections(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey)) As IEnumerable(Of RangeIntersection(Of T, TKey))
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections*
  nameWithType.vb: CompositeRangeExtensions.GetIntersections(Of T, TKey)(CompositeRange(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey))
  name.vb: GetIntersections(Of T, TKey)(CompositeRange(Of T, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  id: GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T, TKey>(CompositeRange<T, TKey>, T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey>(CompositeRange<T, TKey>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 206
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static Range<T, TKey>[] GetIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, T value)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}[]
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), value As T) As Range(Of T, TKey)()
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T, TKey)(CompositeRange(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T)
  name.vb: GetIntersection(Of T, TKey)(CompositeRange(Of T, TKey), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  id: GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T, TKey>(CompositeRange<T, TKey>, T, T)
  nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey>(CompositeRange<T, TKey>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 236
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static RangeIntersection<T, TKey> GetIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.RangeIntersection{{T},{TKey}}
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As T, to As T) As RangeIntersection(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T, T)
  name.vb: GetIntersection(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  id: GetIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 246
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static RangeIntersection<T, TKey> GetIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.RangeIntersection{{T},{TKey}}
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T)) As RangeIntersection(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T))
  name.vb: GetIntersection(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  id: GetIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: GetIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.GetIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection<T, TKey, TKey2>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 264
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns ranges that has intersections with passed range.
  example: []
  syntax:
    content: public static RangeIntersection<T, TKey> GetIntersection<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the other range key
    return:
      type: CodeJam.Ranges.RangeIntersection{{T},{TKey}}
      description: Ranges that has intersections with passed range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetIntersection(Of T, TKey, TKey2)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T, TKey2)) As RangeIntersection(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  nameWithType.vb: CompositeRangeExtensions.GetIntersection(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection(Of T, TKey, TKey2)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: GetIntersection(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  id: Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(CompositeRange<T, TKey>, T)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 309
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains the specified value.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, T value)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), value As T) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey)(CompositeRange(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T)
  name.vb: Contains(Of T, TKey)(CompositeRange(Of T, TKey), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 320
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryFrom<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 331
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryTo<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  id: Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(CompositeRange<T, TKey>, T, T)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 343
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T, T)
  name.vb: Contains(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  id: Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 353
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  id: Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey, TKey2>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 372
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the other range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey, TKey2)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T, TKey2)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey, TKey2)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Contains(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  id: Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Contains<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains<T, TKey, TCompositeRange>(CodeJam.Ranges.CompositeRange<T, TKey>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 385
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range contains another range.
  example: []
  syntax:
    content: 'public static bool Contains<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T, TKey), other As TCompositeRange) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  nameWithType.vb: CompositeRangeExtensions.Contains(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Contains(Of T, TKey, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T, TKey), TCompositeRange)
  name.vb: Contains(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  id: HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TKey>(CompositeRange<T, TKey>, T, T)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey>(CompositeRange<T, TKey>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 430
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite  has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T, T)
  name.vb: HasIntersection(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  id: HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 442
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T))
  name.vb: HasIntersection(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  id: HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey, TKey2>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 461
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the other range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TKey, TKey2)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T, TKey2)) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey, TKey2)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: HasIntersection(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  id: HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.HasIntersection<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection<T, TKey, TCompositeRange>(CodeJam.Ranges.CompositeRange<T, TKey>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 474
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the composite range has intersection with another range.
  example: []
  syntax:
    content: 'public static bool HasIntersection<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the composite range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TKey, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T, TKey), other As TCompositeRange) As Boolean
  overload: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  nameWithType.vb: CompositeRangeExtensions.HasIntersection(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection(Of T, TKey, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T, TKey), TCompositeRange)
  name.vb: HasIntersection(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``1})
  id: Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T, TKey>(CompositeRange<T, TKey>, Range<T, TKey>)
  nameWithType: CompositeRangeExtensions.Union<T, TKey>(CompositeRange<T, TKey>, Range<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 518
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing all subranges.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Union<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The range to union with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A union range containing all subranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T, TKey)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Union*
  nameWithType.vb: CompositeRangeExtensions.Union(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Union(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.CompositeRange{``0,``1})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.CompositeRange{``0,``1})
  id: Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.CompositeRange{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T, TKey>(CompositeRange<T, TKey>, CompositeRange<T, TKey>)
  nameWithType: CompositeRangeExtensions.Union<T, TKey>(CompositeRange<T, TKey>, CompositeRange<T, TKey>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.CompositeRange<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 528
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing all subranges.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Union<T, TKey>(this CompositeRange<T, TKey> compositeRange, CompositeRange<T, TKey> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The range to union with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A union range containing all subranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As CompositeRange(Of T, TKey)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Union*
  nameWithType.vb: CompositeRangeExtensions.Union(Of T, TKey)(CompositeRange(Of T, TKey), CompositeRange(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Union(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.CompositeRange(Of T, TKey))
  name.vb: Union(Of T, TKey)(CompositeRange(Of T, TKey), CompositeRange(Of T, TKey))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  id: ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T, TKey>(CompositeRange<T, TKey>, T)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T, TKey>(CompositeRange<T, TKey>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 579
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ExtendFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As T) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom*
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T, TKey)(CompositeRange(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T)
  name.vb: ExtendFrom(Of T, TKey)(CompositeRange(Of T, TKey), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: ExtendFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.ExtendFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 591
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ExtendFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryFrom<T> from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As RangeBoundaryFrom(Of T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom*
  nameWithType.vb: CompositeRangeExtensions.ExtendFrom(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  id: ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T, TKey>(CompositeRange<T, TKey>, T)
  nameWithType: CompositeRangeExtensions.ExtendTo<T, TKey>(CompositeRange<T, TKey>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 616
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ExtendTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), to As T) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo*
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T, TKey)(CompositeRange(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T)
  name.vb: ExtendTo(Of T, TKey)(CompositeRange(Of T, TKey), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: ExtendTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.ExtendTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 628
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> ExtendTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryTo<T> to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), to As RangeBoundaryTo(Of T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo*
  nameWithType.vb: CompositeRangeExtensions.ExtendTo(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  id: Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TKey>(CompositeRange<T, TKey>, T, T)
  nameWithType: CompositeRangeExtensions.Intersect<T, TKey>(CompositeRange<T, TKey>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 654
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Intersect<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As T, to As T) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T, T)
  name.vb: Intersect(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  id: Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  nameWithType: CompositeRangeExtensions.Intersect<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 664
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Intersect<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T))
  name.vb: Intersect(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  id: Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Intersect<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey, TKey2>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 682
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Intersect<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the other range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TKey, TKey2)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T, TKey2)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey, TKey2)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Intersect(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  id: Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Intersect<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect<T, TKey, TCompositeRange>(CodeJam.Ranges.CompositeRange<T, TKey>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 693
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: 'public static CompositeRange<T, TKey> Intersect<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TKey, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T, TKey), other As TCompositeRange) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  nameWithType.vb: CompositeRangeExtensions.Intersect(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Intersect(Of T, TKey, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T, TKey), TCompositeRange)
  name.vb: Intersect(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  id: TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T, TKey>(CompositeRange<T, TKey>, T)
  nameWithType: CompositeRangeExtensions.TrimFrom<T, TKey>(CompositeRange<T, TKey>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 762
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> TrimFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A range trimmed with a new From boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As T) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom*
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T, TKey)(CompositeRange(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T)
  name.vb: TrimFrom(Of T, TKey)(CompositeRange(Of T, TKey), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: TrimFrom``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: CompositeRangeExtensions.TrimFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 772
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> TrimFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryFrom<T> from)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A range trimmed with a new From boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As RangeBoundaryFrom(Of T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom*
  nameWithType.vb: CompositeRangeExtensions.TrimFrom(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  id: TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T, TKey>(CompositeRange<T, TKey>, T)
  nameWithType: CompositeRangeExtensions.TrimTo<T, TKey>(CompositeRange<T, TKey>, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 782
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> TrimTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A range trimmed with a new To boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), to As T) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimTo*
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T, TKey)(CompositeRange(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T)
  name.vb: TrimTo(Of T, TKey)(CompositeRange(Of T, TKey), T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: TrimTo``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: CompositeRangeExtensions.TrimTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 792
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> TrimTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryTo<T> to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: A range trimmed with a new To boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), to As RangeBoundaryTo(Of T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.TrimTo*
  nameWithType.vb: CompositeRangeExtensions.TrimTo(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.TrimTo(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T, TKey)(CompositeRange(Of T, TKey), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  id: Except``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T, TKey>(CompositeRange<T, TKey>, T, T)
  nameWithType: CompositeRangeExtensions.Except<T, TKey>(CompositeRange<T, TKey>, T, T)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 803
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Except<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), from As T, to As T) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), T, T)
  name.vb: Except(Of T, TKey)(CompositeRange(Of T, TKey), T, T)
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  id: Except``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  nameWithType: CompositeRangeExtensions.Except<T, TKey>(CompositeRange<T, TKey>, Range<T>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 813
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Except<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T, TKey)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T))
  name.vb: Except(Of T, TKey)(CompositeRange(Of T, TKey), Range(Of T))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  id: Except``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  nameWithType: CompositeRangeExtensions.Except<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey, TKey2>(CodeJam.Ranges.CompositeRange<T, TKey>, CodeJam.Ranges.Range<T, TKey2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 831
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: public static CompositeRange<T, TKey> Except<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other)
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the other range key
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T, TKey, TKey2)(compositeRange As CompositeRange(Of T, TKey), other As Range(Of T, TKey2)) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey, TKey2)(CodeJam.Ranges.CompositeRange(Of T, TKey), CodeJam.Ranges.Range(Of T, TKey2))
  name.vb: Except(Of T, TKey, TKey2)(CompositeRange(Of T, TKey), Range(Of T, TKey2))
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  commentId: M:CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  id: Except``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.CompositeRangeExtensions
  langs:
  - csharp
  - vb
  name: Except<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  nameWithType: CompositeRangeExtensions.Except<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange)
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except<T, TKey, TCompositeRange>(CodeJam.Ranges.CompositeRange<T, TKey>, TCompositeRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Except
    path: ../Main/src/Ranges/[RangeExtensions]/CompositeRangeExtensions.WithKey.generated.cs
    startLine: 842
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns source range with other range excluded.
  example: []
  syntax:
    content: 'public static CompositeRange<T, TKey> Except<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T>'
    parameters:
    - id: compositeRange
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: The source range.
    - id: other
      type: '{TCompositeRange}'
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TCompositeRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.CompositeRange{{T},{TKey}}
      description: Source range with other range excluded.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T, TKey, TCompositeRange As ICompositeRange(Of T))(compositeRange As CompositeRange(Of T, TKey), other As TCompositeRange) As CompositeRange(Of T, TKey)
  overload: CodeJam.Ranges.CompositeRangeExtensions.Except*
  nameWithType.vb: CompositeRangeExtensions.Except(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.CompositeRangeExtensions.Except(Of T, TKey, TCompositeRange)(CodeJam.Ranges.CompositeRange(Of T, TKey), TCompositeRange)
  name.vb: Except(Of T, TKey, TCompositeRange)(CompositeRange(Of T, TKey), TCompositeRange)
references:
- uid: CodeJam.Ranges.CompositeRange`1
  commentId: T:CodeJam.Ranges.CompositeRange`1
  parent: CodeJam.Ranges
  isExternal: false
  name: CompositeRange<T>
  nameWithType: CompositeRange<T>
  fullName: CodeJam.Ranges.CompositeRange<T>
  nameWithType.vb: CompositeRange(Of T)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T)
  name.vb: CompositeRange(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange
  isExternal: false
  name: ToCompositeRange
  nameWithType: CompositeRangeExtensions.ToCompositeRange
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  nameWithType.vb: IEnumerable(Of TKey)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TKey},{T}}
  commentId: T:System.Func{``1,``0}
  parent: System
  definition: System.Func`2
  name: Func<TKey, T>
  nameWithType: Func<TKey, T>
  fullName: System.Func<TKey, T>
  nameWithType.vb: Func(Of TKey, T)
  fullName.vb: System.Func(Of TKey, T)
  name.vb: Func(Of TKey, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange{{T},{TKey}}
  commentId: T:CodeJam.Ranges.CompositeRange{``0,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.CompositeRange`2
  name: CompositeRange<T, TKey>
  nameWithType: CompositeRange<T, TKey>
  fullName: CodeJam.Ranges.CompositeRange<T, TKey>
  nameWithType.vb: CompositeRange(Of T, TKey)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T, TKey)
  name.vb: CompositeRange(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange`2
  commentId: T:CodeJam.Ranges.CompositeRange`2
  parent: CodeJam.Ranges
  isExternal: false
  name: CompositeRange<T, TKey>
  nameWithType: CompositeRange<T, TKey>
  fullName: CodeJam.Ranges.CompositeRange<T, TKey>
  nameWithType.vb: CompositeRange(Of T, TKey)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T, TKey)
  name.vb: CompositeRange(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{T}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, T>
  nameWithType: Func<TSource, T>
  fullName: System.Func<TSource, T>
  nameWithType.vb: Func(Of TSource, T)
  fullName.vb: System.Func(Of TSource, T)
  name.vb: Func(Of TSource, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullName.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom
  isExternal: false
  name: ToCompositeRangeFrom
  nameWithType: CompositeRangeExtensions.ToCompositeRangeFrom
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeFrom
- uid: CodeJam.Ranges.CompositeRange{{T},{TSource}}
  commentId: T:CodeJam.Ranges.CompositeRange{``1,``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.CompositeRange`2
  name: CompositeRange<T, TSource>
  nameWithType: CompositeRange<T, TSource>
  fullName: CodeJam.Ranges.CompositeRange<T, TSource>
  nameWithType.vb: CompositeRange(Of T, TSource)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T, TSource)
  name.vb: CompositeRange(Of T, TSource)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo
  isExternal: false
  name: ToCompositeRangeTo
  nameWithType: CompositeRangeExtensions.ToCompositeRangeTo
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRangeTo
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithKeys*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.WithKeys
  isExternal: false
  name: WithKeys
  nameWithType: CompositeRangeExtensions.WithKeys
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithKeys
- uid: CodeJam.Ranges.CompositeRange{{T}}
  commentId: T:CodeJam.Ranges.CompositeRange{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.CompositeRange`1
  name: CompositeRange<T>
  nameWithType: CompositeRange<T>
  fullName: CodeJam.Ranges.CompositeRange<T>
  nameWithType.vb: CompositeRange(Of T)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T)
  name.vb: CompositeRange(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey2}'
  commentId: '!:TKey2'
  definition: TKey2
  name: TKey2
  nameWithType: TKey2
  fullName: TKey2
- uid: CodeJam.Ranges.CompositeRange{{T},{TKey2}}
  commentId: T:CodeJam.Ranges.CompositeRange{``0,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.CompositeRange`2
  name: CompositeRange<T, TKey2>
  nameWithType: CompositeRange<T, TKey2>
  fullName: CodeJam.Ranges.CompositeRange<T, TKey2>
  nameWithType.vb: CompositeRange(Of T, TKey2)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T, TKey2)
  name.vb: CompositeRange(Of T, TKey2)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey2
  isExternal: false
  name: TKey2
  nameWithType: TKey2
  fullName: TKey2
- uid: System.Func{{TKey},{TKey2}}
  commentId: T:System.Func{``1,``2}
  parent: System
  definition: System.Func`2
  name: Func<TKey, TKey2>
  nameWithType: Func<TKey, TKey2>
  fullName: System.Func<TKey, TKey2>
  nameWithType.vb: Func(Of TKey, TKey2)
  fullName.vb: System.Func(Of TKey, TKey2)
  name.vb: Func(Of TKey, TKey2)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys
  isExternal: false
  name: WithoutKeys
  nameWithType: CompositeRangeExtensions.WithoutKeys
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation
  isExternal: false
  name: GetComplementation
  nameWithType: CompositeRangeExtensions.GetComplementation
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetComplementation
- uid: CodeJam.Ranges.Range{{T}}
  commentId: T:CodeJam.Ranges.Range{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`1
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`1
  commentId: T:CodeJam.Ranges.Range`1
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range{{T},{TKey}}
  commentId: T:CodeJam.Ranges.Range{``0,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`2
  name: Range<T, TKey>
  nameWithType: Range<T, TKey>
  fullName: CodeJam.Ranges.Range<T, TKey>
  nameWithType.vb: Range(Of T, TKey)
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey)
  name.vb: Range(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2
  commentId: T:CodeJam.Ranges.Range`2
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T, TKey>
  nameWithType: Range<T, TKey>
  fullName: CodeJam.Ranges.Range<T, TKey>
  nameWithType.vb: Range(Of T, TKey)
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey)
  name.vb: Range(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Range<T>>
  nameWithType: IEnumerable<Range<T>>
  fullName: System.Collections.Generic.IEnumerable<CodeJam.Ranges.Range<T>>
  nameWithType.vb: IEnumerable(Of Range(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.Range(Of T))
  name.vb: IEnumerable(Of Range(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive
  isExternal: false
  name: MakeInclusive
  nameWithType: CompositeRangeExtensions.MakeInclusive
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive
- uid: System.Func{{T},{T}}
  commentId: T:System.Func{`0,`0}
  parent: System
  definition: System.Func`2
  name: Func<T, T>
  nameWithType: Func<T, T>
  fullName: System.Func<T, T>
  nameWithType.vb: Func(Of T, T)
  fullName.vb: System.Func(Of T, T)
  name.vb: Func(Of T, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive
  isExternal: false
  name: MakeExclusive
  nameWithType: CompositeRangeExtensions.MakeExclusive
  fullName: CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive
- uid: CodeJam.Ranges.CompositeRangeExtensions.WithValues*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.WithValues
  isExternal: false
  name: WithValues
  nameWithType: CompositeRangeExtensions.WithValues
  fullName: CodeJam.Ranges.CompositeRangeExtensions.WithValues
- uid: System.Func{{T},{T2}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  name: Func<T, T2>
  nameWithType: Func<T, T2>
  fullName: System.Func<T, T2>
  nameWithType.vb: Func(Of T, T2)
  fullName.vb: System.Func(Of T, T2)
  name.vb: Func(Of T, T2)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange{{T2}}
  commentId: T:CodeJam.Ranges.CompositeRange{``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.CompositeRange`1
  name: CompositeRange<T2>
  nameWithType: CompositeRange<T2>
  fullName: CodeJam.Ranges.CompositeRange<T2>
  nameWithType.vb: CompositeRange(Of T2)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T2)
  name.vb: CompositeRange(Of T2)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`1
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.GetIntersections
  isExternal: false
  name: GetIntersections
  nameWithType: CompositeRangeExtensions.GetIntersections
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersections
- uid: System.Collections.Generic.IEnumerable{CodeJam.Ranges.RangeIntersection{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{CodeJam.Ranges.RangeIntersection{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RangeIntersection<T>>
  nameWithType: IEnumerable<RangeIntersection<T>>
  fullName: System.Collections.Generic.IEnumerable<CodeJam.Ranges.RangeIntersection<T>>
  nameWithType.vb: IEnumerable(Of RangeIntersection(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.RangeIntersection(Of T))
  name.vb: IEnumerable(Of RangeIntersection(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.RangeIntersection`1
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.RangeIntersection`1
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.GetIntersection
  isExternal: false
  name: GetIntersection
  nameWithType: CompositeRangeExtensions.GetIntersection
  fullName: CodeJam.Ranges.CompositeRangeExtensions.GetIntersection
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Ranges.Range{{T}}[]
  name: Range<T>[]
  nameWithType: Range<T>[]
  fullName: CodeJam.Ranges.Range<T>[]
  nameWithType.vb: Range(Of T)()
  fullName.vb: CodeJam.Ranges.Range(Of T)()
  name.vb: Range(Of T)()
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Ranges.RangeIntersection{{T}}
  commentId: T:CodeJam.Ranges.RangeIntersection{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeIntersection`1
  name: RangeIntersection<T>
  nameWithType: RangeIntersection<T>
  fullName: CodeJam.Ranges.RangeIntersection<T>
  nameWithType.vb: RangeIntersection(Of T)
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T)
  name.vb: RangeIntersection(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeIntersection`1
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeIntersection`1
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1
  commentId: T:CodeJam.Ranges.RangeIntersection`1
  isExternal: false
  name: RangeIntersection<T>
  nameWithType: RangeIntersection<T>
  fullName: CodeJam.Ranges.RangeIntersection<T>
  nameWithType.vb: RangeIntersection(Of T)
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T)
  name.vb: RangeIntersection(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeIntersection`1
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeIntersection`1
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range{{T},{TKey2}}
  commentId: T:CodeJam.Ranges.Range{``0,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`2
  name: Range<T, TKey2>
  nameWithType: Range<T, TKey2>
  fullName: CodeJam.Ranges.Range<T, TKey2>
  nameWithType.vb: Range(Of T, TKey2)
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey2)
  name.vb: Range(Of T, TKey2)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRangeExtensions.Contains*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.Contains
  isExternal: false
  name: Contains
  nameWithType: CompositeRangeExtensions.Contains
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Ranges.RangeBoundaryFrom{{T}}
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryFrom`1
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  nameWithType.vb: RangeBoundaryFrom(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  nameWithType.vb: RangeBoundaryFrom(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryTo{{T}}
  commentId: T:CodeJam.Ranges.RangeBoundaryTo{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryTo`1
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryTo`1
  commentId: T:CodeJam.Ranges.RangeBoundaryTo`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TCompositeRange}'
  commentId: '!:TCompositeRange'
  definition: TCompositeRange
  name: TCompositeRange
  nameWithType: TCompositeRange
  fullName: TCompositeRange
- uid: TCompositeRange
  isExternal: false
  name: TCompositeRange
  nameWithType: TCompositeRange
  fullName: TCompositeRange
- uid: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection
  isExternal: false
  name: HasIntersection
  nameWithType: CompositeRangeExtensions.HasIntersection
  fullName: CodeJam.Ranges.CompositeRangeExtensions.HasIntersection
- uid: CodeJam.Ranges.CompositeRangeExtensions.Union*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.Union
  isExternal: false
  name: Union
  nameWithType: CompositeRangeExtensions.Union
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Union
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom
  isExternal: false
  name: ExtendFrom
  nameWithType: CompositeRangeExtensions.ExtendFrom
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendFrom
- uid: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.ExtendTo
  isExternal: false
  name: ExtendTo
  nameWithType: CompositeRangeExtensions.ExtendTo
  fullName: CodeJam.Ranges.CompositeRangeExtensions.ExtendTo
- uid: CodeJam.Ranges.CompositeRangeExtensions.Intersect*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.Intersect
  isExternal: false
  name: Intersect
  nameWithType: CompositeRangeExtensions.Intersect
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Intersect
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.TrimFrom
  isExternal: false
  name: TrimFrom
  nameWithType: CompositeRangeExtensions.TrimFrom
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimFrom
- uid: CodeJam.Ranges.CompositeRangeExtensions.TrimTo*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.TrimTo
  isExternal: false
  name: TrimTo
  nameWithType: CompositeRangeExtensions.TrimTo
  fullName: CodeJam.Ranges.CompositeRangeExtensions.TrimTo
- uid: CodeJam.Ranges.CompositeRangeExtensions.Except*
  commentId: Overload:CodeJam.Ranges.CompositeRangeExtensions.Except
  isExternal: false
  name: Except
  nameWithType: CompositeRangeExtensions.Except
  fullName: CodeJam.Ranges.CompositeRangeExtensions.Except
- uid: System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{{T},{TKey}}}
  commentId: T:System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0,``1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Range<T, TKey>>
  nameWithType: IEnumerable<Range<T, TKey>>
  fullName: System.Collections.Generic.IEnumerable<CodeJam.Ranges.Range<T, TKey>>
  nameWithType.vb: IEnumerable(Of Range(Of T, TKey))
  fullName.vb: System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.Range(Of T, TKey))
  name.vb: IEnumerable(Of Range(Of T, TKey))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.CompositeRange{{T2},{TKey}}
  commentId: T:CodeJam.Ranges.CompositeRange{``2,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.CompositeRange`2
  name: CompositeRange<T2, TKey>
  nameWithType: CompositeRange<T2, TKey>
  fullName: CodeJam.Ranges.CompositeRange<T2, TKey>
  nameWithType.vb: CompositeRange(Of T2, TKey)
  fullName.vb: CodeJam.Ranges.CompositeRange(Of T2, TKey)
  name.vb: CompositeRange(Of T2, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.CompositeRange`2
    name: CompositeRange
    nameWithType: CompositeRange
    fullName: CodeJam.Ranges.CompositeRange
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{CodeJam.Ranges.RangeIntersection{{T},{TKey}}}
  commentId: T:System.Collections.Generic.IEnumerable{CodeJam.Ranges.RangeIntersection{``0,``1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RangeIntersection<T, TKey>>
  nameWithType: IEnumerable<RangeIntersection<T, TKey>>
  fullName: System.Collections.Generic.IEnumerable<CodeJam.Ranges.RangeIntersection<T, TKey>>
  nameWithType.vb: IEnumerable(Of RangeIntersection(Of T, TKey))
  fullName.vb: System.Collections.Generic.IEnumerable(Of CodeJam.Ranges.RangeIntersection(Of T, TKey))
  name.vb: IEnumerable(Of RangeIntersection(Of T, TKey))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.RangeIntersection`2
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.RangeIntersection`2
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range{{T},{TKey}}[]
  name: Range<T, TKey>[]
  nameWithType: Range<T, TKey>[]
  fullName: CodeJam.Ranges.Range<T, TKey>[]
  nameWithType.vb: Range(Of T, TKey)()
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey)()
  name.vb: Range(Of T, TKey)()
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.Ranges.RangeIntersection{{T},{TKey}}
  commentId: T:CodeJam.Ranges.RangeIntersection{``0,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeIntersection`2
  name: RangeIntersection<T, TKey>
  nameWithType: RangeIntersection<T, TKey>
  fullName: CodeJam.Ranges.RangeIntersection<T, TKey>
  nameWithType.vb: RangeIntersection(Of T, TKey)
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T, TKey)
  name.vb: RangeIntersection(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeIntersection`2
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeIntersection`2
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`2
  commentId: T:CodeJam.Ranges.RangeIntersection`2
  isExternal: false
  name: RangeIntersection<T, TKey>
  nameWithType: RangeIntersection<T, TKey>
  fullName: CodeJam.Ranges.RangeIntersection<T, TKey>
  nameWithType.vb: RangeIntersection(Of T, TKey)
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T, TKey)
  name.vb: RangeIntersection(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeIntersection`2
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeIntersection`2
    name: RangeIntersection
    nameWithType: RangeIntersection
    fullName: CodeJam.Ranges.RangeIntersection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
