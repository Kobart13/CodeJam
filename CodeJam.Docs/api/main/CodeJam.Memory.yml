### YamlMime:ManagedReference
items:
- uid: CodeJam.Memory
  commentId: T:CodeJam.Memory
  id: Memory
  parent: CodeJam
  children:
  - CodeJam.Memory.Compare(System.Byte*,System.Byte*,System.Int32)
  - CodeJam.Memory.CompareInline(System.Byte*,System.Byte*,System.Int32)
  langs:
  - csharp
  - vb
  name: Memory
  nameWithType: Memory
  fullName: CodeJam.Memory
  type: Class
  source:
    remote:
      path: Main/src/Utilities/Memory.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Memory
    path: ../Main/src/Utilities/Memory.cs
    startLine: 11
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe utility class for working with arrays of primitive types.\n"
  example: []
  syntax:
    content: public static class Memory
    content.vb: Public Module Memory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Memory.Compare(System.Byte*,System.Byte*,System.Int32)
  commentId: M:CodeJam.Memory.Compare(System.Byte*,System.Byte*,System.Int32)
  id: Compare(System.Byte*,System.Byte*,System.Int32)
  parent: CodeJam.Memory
  langs:
  - csharp
  - vb
  name: Compare(Byte*, Byte*, Int32)
  nameWithType: Memory.Compare(Byte*, Byte*, Int32)
  fullName: CodeJam.Memory.Compare(System.Byte*, System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Utilities/Memory.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Compare
    path: ../Main/src/Utilities/Memory.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nDetermines whether the first count of bytes of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">p1</code> is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">p2</code>.\n"
  example: []
  syntax:
    content: public static bool Compare(byte *p1, byte *p2, int count)
    parameters:
    - id: p1
      type: System.Byte*
      description: The first buffer to compare.
    - id: p2
      type: System.Byte*
      description: The second buffer to compare.
    - id: count
      type: System.Int32
      description: The number of bytes to compare.
    return:
      type: System.Boolean
      description: "\ntrue if all count bytes of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">p1</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">p2</code> are equal; otherwise, false.\n"
    content.vb: Public Shared Function Compare(p1 As Byte *, p2 As Byte *, count As Integer) As Boolean
  overload: CodeJam.Memory.Compare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Memory.CompareInline(System.Byte*,System.Byte*,System.Int32)
  commentId: M:CodeJam.Memory.CompareInline(System.Byte*,System.Byte*,System.Int32)
  id: CompareInline(System.Byte*,System.Byte*,System.Int32)
  parent: CodeJam.Memory
  langs:
  - csharp
  - vb
  name: CompareInline(Byte*, Byte*, Int32)
  nameWithType: Memory.CompareInline(Byte*, Byte*, Int32)
  fullName: CodeJam.Memory.CompareInline(System.Byte*, System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Utilities/Memory.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CompareInline
    path: ../Main/src/Utilities/Memory.cs
    startLine: 39
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nDetermines whether the first count of bytes of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">p1</code> is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">p2</code>.\n"
  remarks: "\nThis is a forced inline version, use with care.\n"
  example: []
  syntax:
    content: public static bool CompareInline(byte *p1, byte *p2, int count)
    parameters:
    - id: p1
      type: System.Byte*
      description: The first buffer to compare.
    - id: p2
      type: System.Byte*
      description: The second buffer to compare.
    - id: count
      type: System.Int32
      description: The number of bytes to compare.
    return:
      type: System.Boolean
      description: "\ntrue if all count bytes of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">p1</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">p2</code> are equal; otherwise, false.\n"
    content.vb: Public Shared Function CompareInline(p1 As Byte *, p2 As Byte *, count As Integer) As Boolean
  overload: CodeJam.Memory.CompareInline*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Memory.Compare*
  commentId: Overload:CodeJam.Memory.Compare
  isExternal: false
  name: Compare
  nameWithType: Memory.Compare
  fullName: CodeJam.Memory.Compare
- uid: System.Byte*
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Memory.CompareInline*
  commentId: Overload:CodeJam.Memory.CompareInline
  isExternal: false
  name: CompareInline
  nameWithType: Memory.CompareInline
  fullName: CodeJam.Memory.CompareInline
