### YamlMime:ManagedReference
items:
- uid: CodeJam.Ranges.RangeBoundaryToKind
  commentId: T:CodeJam.Ranges.RangeBoundaryToKind
  id: RangeBoundaryToKind
  parent: CodeJam.Ranges
  children:
  - CodeJam.Ranges.RangeBoundaryToKind.Empty
  - CodeJam.Ranges.RangeBoundaryToKind.Exclusive
  - CodeJam.Ranges.RangeBoundaryToKind.Inclusive
  - CodeJam.Ranges.RangeBoundaryToKind.Infinite
  langs:
  - csharp
  - vb
  name: RangeBoundaryToKind
  nameWithType: RangeBoundaryToKind
  fullName: CodeJam.Ranges.RangeBoundaryToKind
  type: Enum
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RangeBoundaryToKind
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
    startLine: 53
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The kind of To range boundary.
  example: []
  syntax:
    content: 'public enum RangeBoundaryToKind : byte'
    content.vb: Public Enum RangeBoundaryToKind As Byte
  extensionMethods:
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsFlagSet``1(CodeJam.Ranges.RangeBoundaryToKind)
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsAnyFlagUnset``1(CodeJam.Ranges.RangeBoundaryToKind)
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsAnyFlagSet``1(CodeJam.Ranges.RangeBoundaryToKind)
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsFlagUnset``1(CodeJam.Ranges.RangeBoundaryToKind)
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.SetFlag``1(CodeJam.Ranges.RangeBoundaryToKind)
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.ClearFlag``1(CodeJam.Ranges.RangeBoundaryToKind)
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.SetFlag``1(CodeJam.Ranges.RangeBoundaryToKind,System.Boolean)
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.NullableHelper.AsNullable``1
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Strings.StringExtensions.ToInvariantString``1
  - CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: CodeJam.Ranges.RangeBoundaryToKind.Empty
  commentId: F:CodeJam.Ranges.RangeBoundaryToKind.Empty
  id: Empty
  parent: CodeJam.Ranges.RangeBoundaryToKind
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: RangeBoundaryToKind.Empty
  fullName: CodeJam.Ranges.RangeBoundaryToKind.Empty
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Empty
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Empty,                    &apos;∅&apos;.
  example: []
  syntax:
    content: Empty = 0
    return:
      type: CodeJam.Ranges.RangeBoundaryToKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: CodeJam.Ranges.RangeBoundaryToKind.Exclusive
  commentId: F:CodeJam.Ranges.RangeBoundaryToKind.Exclusive
  id: Exclusive
  parent: CodeJam.Ranges.RangeBoundaryToKind
  langs:
  - csharp
  - vb
  name: Exclusive
  nameWithType: RangeBoundaryToKind.Exclusive
  fullName: CodeJam.Ranges.RangeBoundaryToKind.Exclusive
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Exclusive
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
    startLine: 59
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Less than value,          &apos;??,b)&apos;,   x &lt; b.
  example: []
  syntax:
    content: Exclusive = 2
    return:
      type: CodeJam.Ranges.RangeBoundaryToKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: CodeJam.Ranges.RangeBoundaryToKind.Inclusive
  commentId: F:CodeJam.Ranges.RangeBoundaryToKind.Inclusive
  id: Inclusive
  parent: CodeJam.Ranges.RangeBoundaryToKind
  langs:
  - csharp
  - vb
  name: Inclusive
  nameWithType: RangeBoundaryToKind.Inclusive
  fullName: CodeJam.Ranges.RangeBoundaryToKind.Inclusive
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Inclusive
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
    startLine: 62
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Less than or equal to,    &apos;??,b]&apos;,   x &lt;= b.
  example: []
  syntax:
    content: Inclusive = 8
    return:
      type: CodeJam.Ranges.RangeBoundaryToKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: CodeJam.Ranges.RangeBoundaryToKind.Infinite
  commentId: F:CodeJam.Ranges.RangeBoundaryToKind.Infinite
  id: Infinite
  parent: CodeJam.Ranges.RangeBoundaryToKind
  langs:
  - csharp
  - vb
  name: Infinite
  nameWithType: RangeBoundaryToKind.Infinite
  fullName: CodeJam.Ranges.RangeBoundaryToKind.Infinite
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Infinite
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryKind.cs
    startLine: 65
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: PositiveInfinity,         &apos;??,+∞)&apos;,  no To limit.
  example: []
  syntax:
    content: Infinite = 32
    return:
      type: CodeJam.Ranges.RangeBoundaryToKind
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsFlagSet``1(CodeJam.Ranges.RangeBoundaryToKind)
  commentId: M:CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
  parent: CodeJam.EnumHelper
  definition: CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
  name: IsFlagSet<RangeBoundaryToKind>(RangeBoundaryToKind)
  nameWithType: EnumHelper.IsFlagSet<RangeBoundaryToKind>(RangeBoundaryToKind)
  fullName: CodeJam.EnumHelper.IsFlagSet<CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.RangeBoundaryToKind)
  nameWithType.vb: EnumHelper.IsFlagSet(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  fullName.vb: CodeJam.EnumHelper.IsFlagSet(Of CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.RangeBoundaryToKind)
  name.vb: IsFlagSet(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsFlagSet``1(``0)
    name: IsFlagSet<RangeBoundaryToKind>
    nameWithType: EnumHelper.IsFlagSet<RangeBoundaryToKind>
    fullName: CodeJam.EnumHelper.IsFlagSet<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsFlagSet``1(``0)
    name: IsFlagSet(Of RangeBoundaryToKind)
    nameWithType: EnumHelper.IsFlagSet(Of RangeBoundaryToKind)
    fullName: CodeJam.EnumHelper.IsFlagSet(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsAnyFlagUnset``1(CodeJam.Ranges.RangeBoundaryToKind)
  commentId: M:CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
  parent: CodeJam.EnumHelper
  definition: CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
  name: IsAnyFlagUnset<RangeBoundaryToKind>(RangeBoundaryToKind)
  nameWithType: EnumHelper.IsAnyFlagUnset<RangeBoundaryToKind>(RangeBoundaryToKind)
  fullName: CodeJam.EnumHelper.IsAnyFlagUnset<CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.RangeBoundaryToKind)
  nameWithType.vb: EnumHelper.IsAnyFlagUnset(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  fullName.vb: CodeJam.EnumHelper.IsAnyFlagUnset(Of CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.RangeBoundaryToKind)
  name.vb: IsAnyFlagUnset(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsAnyFlagUnset``1(``0)
    name: IsAnyFlagUnset<RangeBoundaryToKind>
    nameWithType: EnumHelper.IsAnyFlagUnset<RangeBoundaryToKind>
    fullName: CodeJam.EnumHelper.IsAnyFlagUnset<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsAnyFlagUnset``1(``0)
    name: IsAnyFlagUnset(Of RangeBoundaryToKind)
    nameWithType: EnumHelper.IsAnyFlagUnset(Of RangeBoundaryToKind)
    fullName: CodeJam.EnumHelper.IsAnyFlagUnset(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsAnyFlagSet``1(CodeJam.Ranges.RangeBoundaryToKind)
  commentId: M:CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
  parent: CodeJam.EnumHelper
  definition: CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
  name: IsAnyFlagSet<RangeBoundaryToKind>(RangeBoundaryToKind)
  nameWithType: EnumHelper.IsAnyFlagSet<RangeBoundaryToKind>(RangeBoundaryToKind)
  fullName: CodeJam.EnumHelper.IsAnyFlagSet<CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.RangeBoundaryToKind)
  nameWithType.vb: EnumHelper.IsAnyFlagSet(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  fullName.vb: CodeJam.EnumHelper.IsAnyFlagSet(Of CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.RangeBoundaryToKind)
  name.vb: IsAnyFlagSet(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsAnyFlagSet``1(``0)
    name: IsAnyFlagSet<RangeBoundaryToKind>
    nameWithType: EnumHelper.IsAnyFlagSet<RangeBoundaryToKind>
    fullName: CodeJam.EnumHelper.IsAnyFlagSet<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsAnyFlagSet``1(``0)
    name: IsAnyFlagSet(Of RangeBoundaryToKind)
    nameWithType: EnumHelper.IsAnyFlagSet(Of RangeBoundaryToKind)
    fullName: CodeJam.EnumHelper.IsAnyFlagSet(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.IsFlagUnset``1(CodeJam.Ranges.RangeBoundaryToKind)
  commentId: M:CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
  parent: CodeJam.EnumHelper
  definition: CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
  name: IsFlagUnset<RangeBoundaryToKind>(RangeBoundaryToKind)
  nameWithType: EnumHelper.IsFlagUnset<RangeBoundaryToKind>(RangeBoundaryToKind)
  fullName: CodeJam.EnumHelper.IsFlagUnset<CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.RangeBoundaryToKind)
  nameWithType.vb: EnumHelper.IsFlagUnset(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  fullName.vb: CodeJam.EnumHelper.IsFlagUnset(Of CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.RangeBoundaryToKind)
  name.vb: IsFlagUnset(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsFlagUnset``1(``0)
    name: IsFlagUnset<RangeBoundaryToKind>
    nameWithType: EnumHelper.IsFlagUnset<RangeBoundaryToKind>
    fullName: CodeJam.EnumHelper.IsFlagUnset<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsFlagUnset``1(``0)
    name: IsFlagUnset(Of RangeBoundaryToKind)
    nameWithType: EnumHelper.IsFlagUnset(Of RangeBoundaryToKind)
    fullName: CodeJam.EnumHelper.IsFlagUnset(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.SetFlag``1(CodeJam.Ranges.RangeBoundaryToKind)
  commentId: M:CodeJam.EnumHelper.SetFlag``1(``0,``0)
  parent: CodeJam.EnumHelper
  definition: CodeJam.EnumHelper.SetFlag``1(``0,``0)
  name: SetFlag<RangeBoundaryToKind>(RangeBoundaryToKind)
  nameWithType: EnumHelper.SetFlag<RangeBoundaryToKind>(RangeBoundaryToKind)
  fullName: CodeJam.EnumHelper.SetFlag<CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.RangeBoundaryToKind)
  nameWithType.vb: EnumHelper.SetFlag(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  fullName.vb: CodeJam.EnumHelper.SetFlag(Of CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.RangeBoundaryToKind)
  name.vb: SetFlag(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  spec.csharp:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0)
    name: SetFlag<RangeBoundaryToKind>
    nameWithType: EnumHelper.SetFlag<RangeBoundaryToKind>
    fullName: CodeJam.EnumHelper.SetFlag<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0)
    name: SetFlag(Of RangeBoundaryToKind)
    nameWithType: EnumHelper.SetFlag(Of RangeBoundaryToKind)
    fullName: CodeJam.EnumHelper.SetFlag(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.ClearFlag``1(CodeJam.Ranges.RangeBoundaryToKind)
  commentId: M:CodeJam.EnumHelper.ClearFlag``1(``0,``0)
  parent: CodeJam.EnumHelper
  definition: CodeJam.EnumHelper.ClearFlag``1(``0,``0)
  name: ClearFlag<RangeBoundaryToKind>(RangeBoundaryToKind)
  nameWithType: EnumHelper.ClearFlag<RangeBoundaryToKind>(RangeBoundaryToKind)
  fullName: CodeJam.EnumHelper.ClearFlag<CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.RangeBoundaryToKind)
  nameWithType.vb: EnumHelper.ClearFlag(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  fullName.vb: CodeJam.EnumHelper.ClearFlag(Of CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.RangeBoundaryToKind)
  name.vb: ClearFlag(Of RangeBoundaryToKind)(RangeBoundaryToKind)
  spec.csharp:
  - uid: CodeJam.EnumHelper.ClearFlag``1(``0)
    name: ClearFlag<RangeBoundaryToKind>
    nameWithType: EnumHelper.ClearFlag<RangeBoundaryToKind>
    fullName: CodeJam.EnumHelper.ClearFlag<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.ClearFlag``1(``0)
    name: ClearFlag(Of RangeBoundaryToKind)
    nameWithType: EnumHelper.ClearFlag(Of RangeBoundaryToKind)
    fullName: CodeJam.EnumHelper.ClearFlag(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.EnumHelper.SetFlag``1(CodeJam.Ranges.RangeBoundaryToKind,System.Boolean)
  commentId: M:CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
  parent: CodeJam.EnumHelper
  definition: CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
  name: SetFlag<RangeBoundaryToKind>(RangeBoundaryToKind, Boolean)
  nameWithType: EnumHelper.SetFlag<RangeBoundaryToKind>(RangeBoundaryToKind, Boolean)
  fullName: CodeJam.EnumHelper.SetFlag<CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.RangeBoundaryToKind, System.Boolean)
  nameWithType.vb: EnumHelper.SetFlag(Of RangeBoundaryToKind)(RangeBoundaryToKind, Boolean)
  fullName.vb: CodeJam.EnumHelper.SetFlag(Of CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.RangeBoundaryToKind, System.Boolean)
  name.vb: SetFlag(Of RangeBoundaryToKind)(RangeBoundaryToKind, Boolean)
  spec.csharp:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0,System.Boolean)
    name: SetFlag<RangeBoundaryToKind>
    nameWithType: EnumHelper.SetFlag<RangeBoundaryToKind>
    fullName: CodeJam.EnumHelper.SetFlag<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0,System.Boolean)
    name: SetFlag(Of RangeBoundaryToKind)
    nameWithType: EnumHelper.SetFlag(Of RangeBoundaryToKind)
    fullName: CodeJam.EnumHelper.SetFlag(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryToKind
    name: RangeBoundaryToKind
    nameWithType: RangeBoundaryToKind
    fullName: CodeJam.Ranges.RangeBoundaryToKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.NullableHelper.AsNullable``1
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  parent: CodeJam.NullableHelper
  definition: CodeJam.NullableHelper.AsNullable``1(``0)
  name: AsNullable<RangeBoundaryToKind>()
  nameWithType: NullableHelper.AsNullable<RangeBoundaryToKind>()
  fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.RangeBoundaryToKind>()
  nameWithType.vb: NullableHelper.AsNullable(Of RangeBoundaryToKind)()
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.RangeBoundaryToKind)()
  name.vb: AsNullable(Of RangeBoundaryToKind)()
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable<RangeBoundaryToKind>
    nameWithType: NullableHelper.AsNullable<RangeBoundaryToKind>
    fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable(Of RangeBoundaryToKind)
    nameWithType: NullableHelper.AsNullable(Of RangeBoundaryToKind)
    fullName: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, RangeBoundaryToKind>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, RangeBoundaryToKind>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, RangeBoundaryToKind)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, RangeBoundaryToKind)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, RangeBoundaryToKind>
    nameWithType: RangeExtensions.Contains<T, RangeBoundaryToKind>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, RangeBoundaryToKind)
    nameWithType: RangeExtensions.Contains(Of T, RangeBoundaryToKind)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, RangeBoundaryToKind>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, RangeBoundaryToKind>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, RangeBoundaryToKind)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, RangeBoundaryToKind)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, RangeBoundaryToKind>
    nameWithType: RangeExtensions.StartsAfter<T, RangeBoundaryToKind>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, RangeBoundaryToKind)
    nameWithType: RangeExtensions.StartsAfter(Of T, RangeBoundaryToKind)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, RangeBoundaryToKind>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, RangeBoundaryToKind>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, RangeBoundaryToKind)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, RangeBoundaryToKind)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, RangeBoundaryToKind>
    nameWithType: RangeExtensions.EndsBefore<T, RangeBoundaryToKind>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, RangeBoundaryToKind)
    nameWithType: RangeExtensions.EndsBefore(Of T, RangeBoundaryToKind)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, RangeBoundaryToKind>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, RangeBoundaryToKind>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, RangeBoundaryToKind)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, RangeBoundaryToKind)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, RangeBoundaryToKind>
    nameWithType: RangeExtensions.Contains<T, TKey, RangeBoundaryToKind>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, RangeBoundaryToKind)
    nameWithType: RangeExtensions.Contains(Of T, TKey, RangeBoundaryToKind)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, RangeBoundaryToKind>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, RangeBoundaryToKind>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, RangeBoundaryToKind)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, RangeBoundaryToKind)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, RangeBoundaryToKind>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, RangeBoundaryToKind>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, RangeBoundaryToKind)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, RangeBoundaryToKind)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, RangeBoundaryToKind>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, RangeBoundaryToKind>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.RangeBoundaryToKind>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, RangeBoundaryToKind)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.RangeBoundaryToKind)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, RangeBoundaryToKind)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, RangeBoundaryToKind>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, RangeBoundaryToKind>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, RangeBoundaryToKind)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, RangeBoundaryToKind)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Strings.StringExtensions.ToInvariantString``1
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  name: ToInvariantString<RangeBoundaryToKind>()
  nameWithType: StringExtensions.ToInvariantString<RangeBoundaryToKind>()
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryToKind>()
  nameWithType.vb: StringExtensions.ToInvariantString(Of RangeBoundaryToKind)()
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryToKind)()
  name.vb: ToInvariantString(Of RangeBoundaryToKind)()
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString<RangeBoundaryToKind>
    nameWithType: StringExtensions.ToInvariantString<RangeBoundaryToKind>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString(Of RangeBoundaryToKind)
    nameWithType: StringExtensions.ToInvariantString(Of RangeBoundaryToKind)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryToKind.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  name: ToInvariantString<RangeBoundaryToKind>(String)
  nameWithType: StringExtensions.ToInvariantString<RangeBoundaryToKind>(String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryToKind>(System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of RangeBoundaryToKind)(String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryToKind)(System.String)
  name.vb: ToInvariantString(Of RangeBoundaryToKind)(String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString<RangeBoundaryToKind>
    nameWithType: StringExtensions.ToInvariantString<RangeBoundaryToKind>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryToKind>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString(Of RangeBoundaryToKind)
    nameWithType: StringExtensions.ToInvariantString(Of RangeBoundaryToKind)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryToKind)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
  isExternal: false
  name: IsFlagSet<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsFlagSet<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsFlagSet<TEnum>(TEnum, TEnum)
  nameWithType.vb: EnumHelper.IsFlagSet(Of TEnum)(TEnum, TEnum)
  fullName.vb: CodeJam.EnumHelper.IsFlagSet(Of TEnum)(TEnum, TEnum)
  name.vb: IsFlagSet(Of TEnum)(TEnum, TEnum)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
    name: IsFlagSet<TEnum>
    nameWithType: EnumHelper.IsFlagSet<TEnum>
    fullName: CodeJam.EnumHelper.IsFlagSet<TEnum>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsFlagSet``1(``0,``0)
    name: IsFlagSet(Of TEnum)
    nameWithType: EnumHelper.IsFlagSet(Of TEnum)
    fullName: CodeJam.EnumHelper.IsFlagSet(Of TEnum)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper
  commentId: T:CodeJam.EnumHelper
  parent: CodeJam
  isExternal: false
  name: EnumHelper
  nameWithType: EnumHelper
  fullName: CodeJam.EnumHelper
- uid: CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
  isExternal: false
  name: IsAnyFlagUnset<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsAnyFlagUnset<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsAnyFlagUnset<TEnum>(TEnum, TEnum)
  nameWithType.vb: EnumHelper.IsAnyFlagUnset(Of TEnum)(TEnum, TEnum)
  fullName.vb: CodeJam.EnumHelper.IsAnyFlagUnset(Of TEnum)(TEnum, TEnum)
  name.vb: IsAnyFlagUnset(Of TEnum)(TEnum, TEnum)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
    name: IsAnyFlagUnset<TEnum>
    nameWithType: EnumHelper.IsAnyFlagUnset<TEnum>
    fullName: CodeJam.EnumHelper.IsAnyFlagUnset<TEnum>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)
    name: IsAnyFlagUnset(Of TEnum)
    nameWithType: EnumHelper.IsAnyFlagUnset(Of TEnum)
    fullName: CodeJam.EnumHelper.IsAnyFlagUnset(Of TEnum)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
  isExternal: false
  name: IsAnyFlagSet<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsAnyFlagSet<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsAnyFlagSet<TEnum>(TEnum, TEnum)
  nameWithType.vb: EnumHelper.IsAnyFlagSet(Of TEnum)(TEnum, TEnum)
  fullName.vb: CodeJam.EnumHelper.IsAnyFlagSet(Of TEnum)(TEnum, TEnum)
  name.vb: IsAnyFlagSet(Of TEnum)(TEnum, TEnum)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
    name: IsAnyFlagSet<TEnum>
    nameWithType: EnumHelper.IsAnyFlagSet<TEnum>
    fullName: CodeJam.EnumHelper.IsAnyFlagSet<TEnum>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)
    name: IsAnyFlagSet(Of TEnum)
    nameWithType: EnumHelper.IsAnyFlagSet(Of TEnum)
    fullName: CodeJam.EnumHelper.IsAnyFlagSet(Of TEnum)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
  isExternal: false
  name: IsFlagUnset<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.IsFlagUnset<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.IsFlagUnset<TEnum>(TEnum, TEnum)
  nameWithType.vb: EnumHelper.IsFlagUnset(Of TEnum)(TEnum, TEnum)
  fullName.vb: CodeJam.EnumHelper.IsFlagUnset(Of TEnum)(TEnum, TEnum)
  name.vb: IsFlagUnset(Of TEnum)(TEnum, TEnum)
  spec.csharp:
  - uid: CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
    name: IsFlagUnset<TEnum>
    nameWithType: EnumHelper.IsFlagUnset<TEnum>
    fullName: CodeJam.EnumHelper.IsFlagUnset<TEnum>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)
    name: IsFlagUnset(Of TEnum)
    nameWithType: EnumHelper.IsFlagUnset(Of TEnum)
    fullName: CodeJam.EnumHelper.IsFlagUnset(Of TEnum)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper.SetFlag``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.SetFlag``1(``0,``0)
  isExternal: false
  name: SetFlag<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.SetFlag<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.SetFlag<TEnum>(TEnum, TEnum)
  nameWithType.vb: EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum)
  fullName.vb: CodeJam.EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum)
  name.vb: SetFlag(Of TEnum)(TEnum, TEnum)
  spec.csharp:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0,``0)
    name: SetFlag<TEnum>
    nameWithType: EnumHelper.SetFlag<TEnum>
    fullName: CodeJam.EnumHelper.SetFlag<TEnum>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0,``0)
    name: SetFlag(Of TEnum)
    nameWithType: EnumHelper.SetFlag(Of TEnum)
    fullName: CodeJam.EnumHelper.SetFlag(Of TEnum)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper.ClearFlag``1(``0,``0)
  commentId: M:CodeJam.EnumHelper.ClearFlag``1(``0,``0)
  isExternal: false
  name: ClearFlag<TEnum>(TEnum, TEnum)
  nameWithType: EnumHelper.ClearFlag<TEnum>(TEnum, TEnum)
  fullName: CodeJam.EnumHelper.ClearFlag<TEnum>(TEnum, TEnum)
  nameWithType.vb: EnumHelper.ClearFlag(Of TEnum)(TEnum, TEnum)
  fullName.vb: CodeJam.EnumHelper.ClearFlag(Of TEnum)(TEnum, TEnum)
  name.vb: ClearFlag(Of TEnum)(TEnum, TEnum)
  spec.csharp:
  - uid: CodeJam.EnumHelper.ClearFlag``1(``0,``0)
    name: ClearFlag<TEnum>
    nameWithType: EnumHelper.ClearFlag<TEnum>
    fullName: CodeJam.EnumHelper.ClearFlag<TEnum>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.ClearFlag``1(``0,``0)
    name: ClearFlag(Of TEnum)
    nameWithType: EnumHelper.ClearFlag(Of TEnum)
    fullName: CodeJam.EnumHelper.ClearFlag(Of TEnum)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
  commentId: M:CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
  isExternal: true
  name: SetFlag<TEnum>(TEnum, TEnum, Boolean)
  nameWithType: EnumHelper.SetFlag<TEnum>(TEnum, TEnum, Boolean)
  fullName: CodeJam.EnumHelper.SetFlag<TEnum>(TEnum, TEnum, System.Boolean)
  nameWithType.vb: EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum, Boolean)
  fullName.vb: CodeJam.EnumHelper.SetFlag(Of TEnum)(TEnum, TEnum, System.Boolean)
  name.vb: SetFlag(Of TEnum)(TEnum, TEnum, Boolean)
  spec.csharp:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
    name: SetFlag<TEnum>
    nameWithType: EnumHelper.SetFlag<TEnum>
    fullName: CodeJam.EnumHelper.SetFlag<TEnum>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)
    name: SetFlag(Of TEnum)
    nameWithType: EnumHelper.SetFlag(Of TEnum)
    fullName: CodeJam.EnumHelper.SetFlag(Of TEnum)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnum
    nameWithType: TEnum
    fullName: TEnum
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper.AsNullable``1(``0)
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  isExternal: false
  name: AsNullable<T>(T)
  nameWithType: NullableHelper.AsNullable<T>(T)
  fullName: CodeJam.NullableHelper.AsNullable<T>(T)
  nameWithType.vb: NullableHelper.AsNullable(Of T)(T)
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of T)(T)
  name.vb: AsNullable(Of T)(T)
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable<T>
    nameWithType: NullableHelper.AsNullable<T>
    fullName: CodeJam.NullableHelper.AsNullable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable(Of T)
    nameWithType: NullableHelper.AsNullable(Of T)
    fullName: CodeJam.NullableHelper.AsNullable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper
  commentId: T:CodeJam.NullableHelper
  parent: CodeJam
  isExternal: false
  name: NullableHelper
  nameWithType: NullableHelper
  fullName: CodeJam.NullableHelper
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  isExternal: false
  name: ToInvariantString<T>(T)
  nameWithType: StringExtensions.ToInvariantString<T>(T)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T)
  name.vb: ToInvariantString(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions
  commentId: T:CodeJam.Strings.StringExtensions
  parent: CodeJam.Strings
  isExternal: false
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: CodeJam.Strings.StringExtensions
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  isExternal: true
  name: ToInvariantString<T>(T, String)
  nameWithType: StringExtensions.ToInvariantString<T>(T, String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T, System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T, String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T, System.String)
  name.vb: ToInvariantString(Of T)(T, String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.Strings
  commentId: N:CodeJam.Strings
  isExternal: false
  name: CodeJam.Strings
  nameWithType: CodeJam.Strings
  fullName: CodeJam.Strings
- uid: CodeJam.Ranges.RangeBoundaryToKind
  commentId: T:CodeJam.Ranges.RangeBoundaryToKind
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryToKind
  nameWithType: RangeBoundaryToKind
  fullName: CodeJam.Ranges.RangeBoundaryToKind
