### YamlMime:ManagedReference
items:
- uid: CodeJam.Reflection.TypeAccessor
  commentId: T:CodeJam.Reflection.TypeAccessor
  id: TypeAccessor
  parent: CodeJam.Reflection
  children:
  - CodeJam.Reflection.TypeAccessor.AddMember(CodeJam.Reflection.MemberAccessor)
  - CodeJam.Reflection.TypeAccessor.CreateInstance
  - CodeJam.Reflection.TypeAccessor.GetAccessor(System.Type)
  - CodeJam.Reflection.TypeAccessor.GetAccessor``1
  - CodeJam.Reflection.TypeAccessor.Item(System.Int32)
  - CodeJam.Reflection.TypeAccessor.Item(System.String)
  - CodeJam.Reflection.TypeAccessor.Members
  - CodeJam.Reflection.TypeAccessor.Type
  langs:
  - csharp
  - vb
  name: TypeAccessor
  nameWithType: TypeAccessor
  fullName: CodeJam.Reflection.TypeAccessor
  type: Class
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TypeAccessor
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 13
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nProvides fast access to type and its members.\n"
  example: []
  syntax:
    content: public abstract class TypeAccessor
    content.vb: Public MustInherit Class TypeAccessor
  inheritance:
  - System.Object
  derivedClasses:
  - CodeJam.Reflection.TypeAccessor`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: CodeJam.Reflection.TypeAccessor.AddMember(CodeJam.Reflection.MemberAccessor)
  commentId: M:CodeJam.Reflection.TypeAccessor.AddMember(CodeJam.Reflection.MemberAccessor)
  id: AddMember(CodeJam.Reflection.MemberAccessor)
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: AddMember(MemberAccessor)
  nameWithType: TypeAccessor.AddMember(MemberAccessor)
  fullName: CodeJam.Reflection.TypeAccessor.AddMember(CodeJam.Reflection.MemberAccessor)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AddMember
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nAdds <xref href=\"CodeJam.Reflection.MemberAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected void AddMember(MemberAccessor member)
    parameters:
    - id: member
      type: CodeJam.Reflection.MemberAccessor
      description: Instance of <xref href="CodeJam.Reflection.MemberAccessor" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Sub AddMember(member As MemberAccessor)
  overload: CodeJam.Reflection.TypeAccessor.AddMember*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CodeJam.Reflection.TypeAccessor.CreateInstance
  commentId: M:CodeJam.Reflection.TypeAccessor.CreateInstance
  id: CreateInstance
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: CreateInstance()
  nameWithType: TypeAccessor.CreateInstance()
  fullName: CodeJam.Reflection.TypeAccessor.CreateInstance()
  type: Method
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CreateInstance
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 40
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nCreates an instance of the accessed type.\n"
  example: []
  syntax:
    content: public virtual object CreateInstance()
    return:
      type: System.Object
      description: An instance of the accessed type.
    content.vb: Public Overridable Function CreateInstance As Object
  overload: CodeJam.Reflection.TypeAccessor.CreateInstance*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CodeJam.Reflection.TypeAccessor.Type
  commentId: P:CodeJam.Reflection.TypeAccessor.Type
  id: Type
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: TypeAccessor.Type
  fullName: CodeJam.Reflection.TypeAccessor.Type
  type: Property
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Type
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 50
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nType to access.\n"
  example: []
  syntax:
    content: public abstract Type Type { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public MustOverride ReadOnly Property Type As Type
  overload: CodeJam.Reflection.TypeAccessor.Type*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: CodeJam.Reflection.TypeAccessor.Members
  commentId: P:CodeJam.Reflection.TypeAccessor.Members
  id: Members
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: Members
  nameWithType: TypeAccessor.Members
  fullName: CodeJam.Reflection.TypeAccessor.Members
  type: Property
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Members
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 55
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nType members.\n"
  example: []
  syntax:
    content: public List<MemberAccessor> Members { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{CodeJam.Reflection.MemberAccessor}
    content.vb: Public ReadOnly Property Members As List(Of MemberAccessor)
  overload: CodeJam.Reflection.TypeAccessor.Members*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.TypeAccessor.Item(System.String)
  commentId: P:CodeJam.Reflection.TypeAccessor.Item(System.String)
  id: Item(System.String)
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: TypeAccessor.Item[String]
  fullName: CodeJam.Reflection.TypeAccessor.Item[System.String]
  type: Property
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: this[]
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 68
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns <xref href=\"CodeJam.Reflection.MemberAccessor\" data-throw-if-not-resolved=\"false\"></xref> by its name.\n"
  example: []
  syntax:
    content: public MemberAccessor this[string memberName] { get; }
    parameters:
    - id: memberName
      type: System.String
      description: Member name.
    return:
      type: CodeJam.Reflection.MemberAccessor
      description: Instance of <xref href="CodeJam.Reflection.MemberAccessor" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Item(memberName As String) As MemberAccessor
  overload: CodeJam.Reflection.TypeAccessor.Item*
  nameWithType.vb: TypeAccessor.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Reflection.TypeAccessor.Item(System.String)
  name.vb: Item(String)
- uid: CodeJam.Reflection.TypeAccessor.Item(System.Int32)
  commentId: P:CodeJam.Reflection.TypeAccessor.Item(System.Int32)
  id: Item(System.Int32)
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: TypeAccessor.Item[Int32]
  fullName: CodeJam.Reflection.TypeAccessor.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: this[]
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 81
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns <xref href=\"CodeJam.Reflection.MemberAccessor\" data-throw-if-not-resolved=\"false\"></xref> by index.\n"
  example: []
  syntax:
    content: public MemberAccessor this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: Member index.
    return:
      type: CodeJam.Reflection.MemberAccessor
      description: Instance of <xref href="CodeJam.Reflection.MemberAccessor" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Item(index As Integer) As MemberAccessor
  overload: CodeJam.Reflection.TypeAccessor.Item*
  nameWithType.vb: TypeAccessor.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Reflection.TypeAccessor.Item(System.Int32)
  name.vb: Item(Int32)
- uid: CodeJam.Reflection.TypeAccessor.GetAccessor(System.Type)
  commentId: M:CodeJam.Reflection.TypeAccessor.GetAccessor(System.Type)
  id: GetAccessor(System.Type)
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: GetAccessor(Type)
  nameWithType: TypeAccessor.GetAccessor(Type)
  fullName: CodeJam.Reflection.TypeAccessor.GetAccessor(System.Type)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetAccessor
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 95
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nCreates an instance of <xref href=\"CodeJam.Reflection.TypeAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static TypeAccessor GetAccessor(Type type)
    parameters:
    - id: type
      type: System.Type
      description: Type to access.
    return:
      type: CodeJam.Reflection.TypeAccessor
      description: Instance of <xref href="CodeJam.Reflection.TypeAccessor" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetAccessor(type As Type) As TypeAccessor
  overload: CodeJam.Reflection.TypeAccessor.GetAccessor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Reflection.TypeAccessor.GetAccessor``1
  commentId: M:CodeJam.Reflection.TypeAccessor.GetAccessor``1
  id: GetAccessor``1
  parent: CodeJam.Reflection.TypeAccessor
  langs:
  - csharp
  - vb
  name: GetAccessor<T>()
  nameWithType: TypeAccessor.GetAccessor<T>()
  fullName: CodeJam.Reflection.TypeAccessor.GetAccessor<T>()
  type: Method
  source:
    remote:
      path: Main/src/Reflection/TypeAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetAccessor
    path: ../Main/src/Reflection/TypeAccessor.cs
    startLine: 116
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nCreates an instance of <xref href=\"CodeJam.Reflection.TypeAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static TypeAccessor<T> GetAccessor<T>()
    typeParameters:
    - id: T
      description: Type to access.
    return:
      type: CodeJam.Reflection.TypeAccessor{{T}}
      description: Instance of <xref href="CodeJam.Reflection.TypeAccessor" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetAccessor(Of T) As TypeAccessor(Of T)
  overload: CodeJam.Reflection.TypeAccessor.GetAccessor*
  nameWithType.vb: TypeAccessor.GetAccessor(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Reflection.TypeAccessor.GetAccessor(Of T)()
  name.vb: GetAccessor(Of T)()
references:
- uid: CodeJam.Reflection
  commentId: N:CodeJam.Reflection
  isExternal: false
  name: CodeJam.Reflection
  nameWithType: CodeJam.Reflection
  fullName: CodeJam.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, TypeAccessor>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, TypeAccessor>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Reflection.TypeAccessor>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TypeAccessor)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Reflection.TypeAccessor)(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TypeAccessor)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, TypeAccessor>
    nameWithType: RangeExtensions.Contains<T, TypeAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Reflection.TypeAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TypeAccessor)
    nameWithType: RangeExtensions.Contains(Of T, TypeAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Reflection.TypeAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, TypeAccessor>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TypeAccessor>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Reflection.TypeAccessor>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TypeAccessor)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Reflection.TypeAccessor)(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TypeAccessor)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TypeAccessor>
    nameWithType: RangeExtensions.StartsAfter<T, TypeAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Reflection.TypeAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TypeAccessor)
    nameWithType: RangeExtensions.StartsAfter(Of T, TypeAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Reflection.TypeAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, TypeAccessor>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TypeAccessor>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Reflection.TypeAccessor>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TypeAccessor)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Reflection.TypeAccessor)(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TypeAccessor)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TypeAccessor>
    nameWithType: RangeExtensions.EndsBefore<T, TypeAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Reflection.TypeAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TypeAccessor)
    nameWithType: RangeExtensions.EndsBefore(Of T, TypeAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Reflection.TypeAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, TypeAccessor>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TypeAccessor>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Reflection.TypeAccessor>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TypeAccessor)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Reflection.TypeAccessor)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TypeAccessor)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TypeAccessor>
    nameWithType: RangeExtensions.Contains<T, TKey, TypeAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Reflection.TypeAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TypeAccessor)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TypeAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Reflection.TypeAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, TypeAccessor>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TypeAccessor>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Reflection.TypeAccessor>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TypeAccessor)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Reflection.TypeAccessor)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TypeAccessor)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TypeAccessor>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TypeAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Reflection.TypeAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TypeAccessor)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TypeAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Reflection.TypeAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.TypeAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, TypeAccessor>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TypeAccessor>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Reflection.TypeAccessor>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TypeAccessor)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Reflection.TypeAccessor)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TypeAccessor)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TypeAccessor>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TypeAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Reflection.TypeAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TypeAccessor)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TypeAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Reflection.TypeAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Reflection.MemberAccessor
  commentId: T:CodeJam.Reflection.MemberAccessor
  parent: CodeJam.Reflection
  isExternal: false
  name: MemberAccessor
  nameWithType: MemberAccessor
  fullName: CodeJam.Reflection.MemberAccessor
- uid: CodeJam.Reflection.TypeAccessor.AddMember*
  commentId: Overload:CodeJam.Reflection.TypeAccessor.AddMember
  isExternal: false
  name: AddMember
  nameWithType: TypeAccessor.AddMember
  fullName: CodeJam.Reflection.TypeAccessor.AddMember
- uid: CodeJam.Reflection.TypeAccessor.CreateInstance*
  commentId: Overload:CodeJam.Reflection.TypeAccessor.CreateInstance
  isExternal: false
  name: CreateInstance
  nameWithType: TypeAccessor.CreateInstance
  fullName: CodeJam.Reflection.TypeAccessor.CreateInstance
- uid: CodeJam.Reflection.TypeAccessor.Type*
  commentId: Overload:CodeJam.Reflection.TypeAccessor.Type
  isExternal: false
  name: Type
  nameWithType: TypeAccessor.Type
  fullName: CodeJam.Reflection.TypeAccessor.Type
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: CodeJam.Reflection.TypeAccessor.Members*
  commentId: Overload:CodeJam.Reflection.TypeAccessor.Members
  isExternal: false
  name: Members
  nameWithType: TypeAccessor.Members
  fullName: CodeJam.Reflection.TypeAccessor.Members
- uid: System.Collections.Generic.List{CodeJam.Reflection.MemberAccessor}
  commentId: T:System.Collections.Generic.List{CodeJam.Reflection.MemberAccessor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MemberAccessor>
  nameWithType: List<MemberAccessor>
  fullName: System.Collections.Generic.List<CodeJam.Reflection.MemberAccessor>
  nameWithType.vb: List(Of MemberAccessor)
  fullName.vb: System.Collections.Generic.List(Of CodeJam.Reflection.MemberAccessor)
  name.vb: List(Of MemberAccessor)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Reflection.MemberAccessor
    name: MemberAccessor
    nameWithType: MemberAccessor
    fullName: CodeJam.Reflection.MemberAccessor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Reflection.MemberAccessor
    name: MemberAccessor
    nameWithType: MemberAccessor
    fullName: CodeJam.Reflection.MemberAccessor
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Reflection.TypeAccessor.Item*
  commentId: Overload:CodeJam.Reflection.TypeAccessor.Item
  isExternal: false
  name: Item
  nameWithType: TypeAccessor.Item
  fullName: CodeJam.Reflection.TypeAccessor.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CodeJam.Reflection.TypeAccessor
  commentId: T:CodeJam.Reflection.TypeAccessor
  parent: CodeJam.Reflection
  isExternal: false
  name: TypeAccessor
  nameWithType: TypeAccessor
  fullName: CodeJam.Reflection.TypeAccessor
- uid: CodeJam.Reflection.TypeAccessor.GetAccessor*
  commentId: Overload:CodeJam.Reflection.TypeAccessor.GetAccessor
  isExternal: false
  name: GetAccessor
  nameWithType: TypeAccessor.GetAccessor
  fullName: CodeJam.Reflection.TypeAccessor.GetAccessor
- uid: CodeJam.Reflection.TypeAccessor{{T}}
  commentId: T:CodeJam.Reflection.TypeAccessor{``0}
  parent: CodeJam.Reflection
  definition: CodeJam.Reflection.TypeAccessor`1
  name: TypeAccessor<T>
  nameWithType: TypeAccessor<T>
  fullName: CodeJam.Reflection.TypeAccessor<T>
  nameWithType.vb: TypeAccessor(Of T)
  fullName.vb: CodeJam.Reflection.TypeAccessor(Of T)
  name.vb: TypeAccessor(Of T)
  spec.csharp:
  - uid: CodeJam.Reflection.TypeAccessor`1
    name: TypeAccessor
    nameWithType: TypeAccessor
    fullName: CodeJam.Reflection.TypeAccessor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Reflection.TypeAccessor`1
    name: TypeAccessor
    nameWithType: TypeAccessor
    fullName: CodeJam.Reflection.TypeAccessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.TypeAccessor`1
  commentId: T:CodeJam.Reflection.TypeAccessor`1
  parent: CodeJam.Reflection
  isExternal: false
  name: TypeAccessor<T>
  nameWithType: TypeAccessor<T>
  fullName: CodeJam.Reflection.TypeAccessor<T>
  nameWithType.vb: TypeAccessor(Of T)
  fullName.vb: CodeJam.Reflection.TypeAccessor(Of T)
  name.vb: TypeAccessor(Of T)
  spec.csharp:
  - uid: CodeJam.Reflection.TypeAccessor`1
    name: TypeAccessor
    nameWithType: TypeAccessor
    fullName: CodeJam.Reflection.TypeAccessor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Reflection.TypeAccessor`1
    name: TypeAccessor
    nameWithType: TypeAccessor
    fullName: CodeJam.Reflection.TypeAccessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
