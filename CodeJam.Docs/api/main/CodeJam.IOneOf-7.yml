### YamlMime:ManagedReference
items:
- uid: CodeJam.IOneOf`7
  commentId: T:CodeJam.IOneOf`7
  id: IOneOf`7
  parent: CodeJam
  children:
  - CodeJam.IOneOf`7.Do(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6})
  - CodeJam.IOneOf`7.GetValue``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0})
  - CodeJam.IOneOf`7.IsCase1
  - CodeJam.IOneOf`7.IsCase2
  - CodeJam.IOneOf`7.IsCase3
  - CodeJam.IOneOf`7.IsCase4
  - CodeJam.IOneOf`7.IsCase5
  - CodeJam.IOneOf`7.IsCase6
  - CodeJam.IOneOf`7.IsCase7
  langs:
  - csharp
  - vb
  name: IOneOf<T1, T2, T3, T4, T5, T6, T7>
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>
  type: Interface
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IOneOf
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 275
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCommon interface for <xref href=\"CodeJam.OneOf%607\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"CodeJam.ValueOneOf%607\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface IOneOf<T1, T2, T3, T4, T5, T6, T7>
    typeParameters:
    - id: T1
      description: Type of case 1
    - id: T2
      description: Type of case 2
    - id: T3
      description: Type of case 3
    - id: T4
      description: Type of case 4
    - id: T5
      description: Type of case 5
    - id: T6
      description: Type of case 6
    - id: T7
      description: Type of case 7
    content.vb: Public Interface IOneOf(Of T1, T2, T3, T4, T5, T6, T7)
  extensionMethods:
  - CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7)
  name.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7)
- uid: CodeJam.IOneOf`7.GetValue``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0})
  commentId: M:CodeJam.IOneOf`7.GetValue``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0})
  id: GetValue``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0})
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>)
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>)
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.GetValue<TResult>(System.Func<T1, TResult>, System.Func<T2, TResult>, System.Func<T3, TResult>, System.Func<T4, TResult>, System.Func<T5, TResult>, System.Func<T6, TResult>, System.Func<T7, TResult>)
  type: Method
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetValue
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 288
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCalls func for actual type argument and returns calculated value.\n"
  example: []
  syntax:
    content: TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector, Func<T7, TResult> case7Selector)
    parameters:
    - id: case1Selector
      type: System.Func{{T1},{TResult}}
      description: Calculation function for <code data-dev-comment-type="typeparamref" class="typeparamref">T1</code>
    - id: case2Selector
      type: System.Func{{T2},{TResult}}
      description: Calculation function for <code data-dev-comment-type="typeparamref" class="typeparamref">T2</code>
    - id: case3Selector
      type: System.Func{{T3},{TResult}}
      description: Calculation function for <code data-dev-comment-type="typeparamref" class="typeparamref">T3</code>
    - id: case4Selector
      type: System.Func{{T4},{TResult}}
      description: Calculation function for <code data-dev-comment-type="typeparamref" class="typeparamref">T4</code>
    - id: case5Selector
      type: System.Func{{T5},{TResult}}
      description: Calculation function for <code data-dev-comment-type="typeparamref" class="typeparamref">T5</code>
    - id: case6Selector
      type: System.Func{{T6},{TResult}}
      description: Calculation function for <code data-dev-comment-type="typeparamref" class="typeparamref">T6</code>
    - id: case7Selector
      type: System.Func{{T7},{TResult}}
      description: Calculation function for <code data-dev-comment-type="typeparamref" class="typeparamref">T7</code>
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
      description: Calculated value.
    content.vb: Function GetValue(Of TResult)(case1Selector As Func(Of T1, TResult), case2Selector As Func(Of T2, TResult), case3Selector As Func(Of T3, TResult), case4Selector As Func(Of T4, TResult), case5Selector As Func(Of T5, TResult), case6Selector As Func(Of T6, TResult), case7Selector As Func(Of T7, TResult)) As TResult
  overload: CodeJam.IOneOf`7.GetValue*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).GetValue(Of TResult)(Func(Of T1, TResult), Func(Of T2, TResult), Func(Of T3, TResult), Func(Of T4, TResult), Func(Of T5, TResult), Func(Of T6, TResult), Func(Of T7, TResult))
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).GetValue(Of TResult)(System.Func(Of T1, TResult), System.Func(Of T2, TResult), System.Func(Of T3, TResult), System.Func(Of T4, TResult), System.Func(Of T5, TResult), System.Func(Of T6, TResult), System.Func(Of T7, TResult))
  name.vb: GetValue(Of TResult)(Func(Of T1, TResult), Func(Of T2, TResult), Func(Of T3, TResult), Func(Of T4, TResult), Func(Of T5, TResult), Func(Of T6, TResult), Func(Of T7, TResult))
- uid: CodeJam.IOneOf`7.Do(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6})
  commentId: M:CodeJam.IOneOf`7.Do(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6})
  id: Do(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6})
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>)
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>)
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.Do(System.Action<T1>, System.Action<T2>, System.Action<T3>, System.Action<T4>, System.Action<T5>, System.Action<T6>, System.Action<T7>)
  type: Method
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Do
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 300
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCalls action for actual type argument.\n"
  example: []
  syntax:
    content: void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action, Action<T7> case7Action)
    parameters:
    - id: case1Action
      type: System.Action{{T1}}
      description: Action for <code data-dev-comment-type="typeparamref" class="typeparamref">T1</code>
    - id: case2Action
      type: System.Action{{T2}}
      description: Action for <code data-dev-comment-type="typeparamref" class="typeparamref">T2</code>
    - id: case3Action
      type: System.Action{{T3}}
      description: Action for <code data-dev-comment-type="typeparamref" class="typeparamref">T3</code>
    - id: case4Action
      type: System.Action{{T4}}
      description: Action for <code data-dev-comment-type="typeparamref" class="typeparamref">T4</code>
    - id: case5Action
      type: System.Action{{T5}}
      description: Action for <code data-dev-comment-type="typeparamref" class="typeparamref">T5</code>
    - id: case6Action
      type: System.Action{{T6}}
      description: Action for <code data-dev-comment-type="typeparamref" class="typeparamref">T6</code>
    - id: case7Action
      type: System.Action{{T7}}
      description: Action for <code data-dev-comment-type="typeparamref" class="typeparamref">T7</code>
    content.vb: Sub Do(case1Action As Action(Of T1), case2Action As Action(Of T2), case3Action As Action(Of T3), case4Action As Action(Of T4), case5Action As Action(Of T5), case6Action As Action(Of T6), case7Action As Action(Of T7))
  overload: CodeJam.IOneOf`7.Do*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).Do(Action(Of T1), Action(Of T2), Action(Of T3), Action(Of T4), Action(Of T5), Action(Of T6), Action(Of T7))
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).Do(System.Action(Of T1), System.Action(Of T2), System.Action(Of T3), System.Action(Of T4), System.Action(Of T5), System.Action(Of T6), System.Action(Of T7))
  name.vb: Do(Action(Of T1), Action(Of T2), Action(Of T3), Action(Of T4), Action(Of T5), Action(Of T6), Action(Of T7))
- uid: CodeJam.IOneOf`7.IsCase1
  commentId: P:CodeJam.IOneOf`7.IsCase1
  id: IsCase1
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: IsCase1
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase1
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase1
  type: Property
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsCase1
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 305
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns <code>true</code> if class contains value of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T1</code>.\n"
  example: []
  syntax:
    content: bool IsCase1 { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCase1 As Boolean
  overload: CodeJam.IOneOf`7.IsCase1*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase1
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase1
- uid: CodeJam.IOneOf`7.IsCase2
  commentId: P:CodeJam.IOneOf`7.IsCase2
  id: IsCase2
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: IsCase2
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase2
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase2
  type: Property
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsCase2
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 310
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns <code>true</code> if class contains value of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T2</code>.\n"
  example: []
  syntax:
    content: bool IsCase2 { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCase2 As Boolean
  overload: CodeJam.IOneOf`7.IsCase2*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase2
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase2
- uid: CodeJam.IOneOf`7.IsCase3
  commentId: P:CodeJam.IOneOf`7.IsCase3
  id: IsCase3
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: IsCase3
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase3
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase3
  type: Property
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsCase3
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 315
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns <code>true</code> if class contains value of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T3</code>.\n"
  example: []
  syntax:
    content: bool IsCase3 { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCase3 As Boolean
  overload: CodeJam.IOneOf`7.IsCase3*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase3
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase3
- uid: CodeJam.IOneOf`7.IsCase4
  commentId: P:CodeJam.IOneOf`7.IsCase4
  id: IsCase4
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: IsCase4
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase4
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase4
  type: Property
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsCase4
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 320
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns <code>true</code> if class contains value of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T4</code>.\n"
  example: []
  syntax:
    content: bool IsCase4 { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCase4 As Boolean
  overload: CodeJam.IOneOf`7.IsCase4*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase4
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase4
- uid: CodeJam.IOneOf`7.IsCase5
  commentId: P:CodeJam.IOneOf`7.IsCase5
  id: IsCase5
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: IsCase5
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase5
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase5
  type: Property
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsCase5
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 325
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns <code>true</code> if class contains value of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T5</code>.\n"
  example: []
  syntax:
    content: bool IsCase5 { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCase5 As Boolean
  overload: CodeJam.IOneOf`7.IsCase5*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase5
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase5
- uid: CodeJam.IOneOf`7.IsCase6
  commentId: P:CodeJam.IOneOf`7.IsCase6
  id: IsCase6
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: IsCase6
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase6
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase6
  type: Property
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsCase6
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 330
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns <code>true</code> if class contains value of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T6</code>.\n"
  example: []
  syntax:
    content: bool IsCase6 { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCase6 As Boolean
  overload: CodeJam.IOneOf`7.IsCase6*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase6
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase6
- uid: CodeJam.IOneOf`7.IsCase7
  commentId: P:CodeJam.IOneOf`7.IsCase7
  id: IsCase7
  parent: CodeJam.IOneOf`7
  langs:
  - csharp
  - vb
  name: IsCase7
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase7
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase7
  type: Property
  source:
    remote:
      path: Main/src/Structures/OneOf/IOneOf.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsCase7
    path: ../Main/src/Structures/OneOf/IOneOf.generated.cs
    startLine: 335
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nReturns <code>true</code> if class contains value of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T7</code>.\n"
  example: []
  syntax:
    content: bool IsCase7 { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCase7 As Boolean
  overload: CodeJam.IOneOf`7.IsCase7*
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase7
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase7
references:
- uid: CodeJam.OneOf`7
  commentId: T:CodeJam.OneOf`7
  parent: CodeJam
  isExternal: false
  name: OneOf<T1, T2, T3, T4, T5, T6, T7>
  nameWithType: OneOf<T1, T2, T3, T4, T5, T6, T7>
  fullName: CodeJam.OneOf<T1, T2, T3, T4, T5, T6, T7>
  nameWithType.vb: OneOf(Of T1, T2, T3, T4, T5, T6, T7)
  fullName.vb: CodeJam.OneOf(Of T1, T2, T3, T4, T5, T6, T7)
  name.vb: OneOf(Of T1, T2, T3, T4, T5, T6, T7)
  spec.csharp:
  - uid: CodeJam.OneOf`7
    name: OneOf
    nameWithType: OneOf
    fullName: CodeJam.OneOf
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.OneOf`7
    name: OneOf
    nameWithType: OneOf
    fullName: CodeJam.OneOf
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.ValueOneOf`7
  commentId: T:CodeJam.ValueOneOf`7
  parent: CodeJam
  isExternal: false
  name: ValueOneOf<T1, T2, T3, T4, T5, T6, T7>
  nameWithType: ValueOneOf<T1, T2, T3, T4, T5, T6, T7>
  fullName: CodeJam.ValueOneOf<T1, T2, T3, T4, T5, T6, T7>
  nameWithType.vb: ValueOneOf(Of T1, T2, T3, T4, T5, T6, T7)
  fullName.vb: CodeJam.ValueOneOf(Of T1, T2, T3, T4, T5, T6, T7)
  name.vb: ValueOneOf(Of T1, T2, T3, T4, T5, T6, T7)
  spec.csharp:
  - uid: CodeJam.ValueOneOf`7
    name: ValueOneOf
    nameWithType: ValueOneOf
    fullName: CodeJam.ValueOneOf
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.ValueOneOf`7
    name: ValueOneOf
    nameWithType: ValueOneOf
    fullName: CodeJam.ValueOneOf
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    nameWithType: RangeExtensions.Contains<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    nameWithType: RangeExtensions.Contains(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    nameWithType: RangeExtensions.StartsAfter<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    nameWithType: RangeExtensions.StartsAfter(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    nameWithType: RangeExtensions.EndsBefore<T, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    nameWithType: RangeExtensions.EndsBefore(Of T, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    nameWithType: RangeExtensions.Contains<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    nameWithType: RangeExtensions.Contains(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOneOf`7.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, IOneOf<T1, T2, T3, T4, T5, T6, T7>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.IOneOf`7.GetValue*
  commentId: Overload:CodeJam.IOneOf`7.GetValue
  isExternal: false
  name: GetValue
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.GetValue
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.GetValue
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).GetValue
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).GetValue
- uid: System.Func{{T1},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<T1, TResult>
  nameWithType: Func<T1, TResult>
  fullName: System.Func<T1, TResult>
  nameWithType.vb: Func(Of T1, TResult)
  fullName.vb: System.Func(Of T1, TResult)
  name.vb: Func(Of T1, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T2},{TResult}}
  commentId: T:System.Func{`1,``0}
  parent: System
  definition: System.Func`2
  name: Func<T2, TResult>
  nameWithType: Func<T2, TResult>
  fullName: System.Func<T2, TResult>
  nameWithType.vb: Func(Of T2, TResult)
  fullName.vb: System.Func(Of T2, TResult)
  name.vb: Func(Of T2, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T3},{TResult}}
  commentId: T:System.Func{`2,``0}
  parent: System
  definition: System.Func`2
  name: Func<T3, TResult>
  nameWithType: Func<T3, TResult>
  fullName: System.Func<T3, TResult>
  nameWithType.vb: Func(Of T3, TResult)
  fullName.vb: System.Func(Of T3, TResult)
  name.vb: Func(Of T3, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T4},{TResult}}
  commentId: T:System.Func{`3,``0}
  parent: System
  definition: System.Func`2
  name: Func<T4, TResult>
  nameWithType: Func<T4, TResult>
  fullName: System.Func<T4, TResult>
  nameWithType.vb: Func(Of T4, TResult)
  fullName.vb: System.Func(Of T4, TResult)
  name.vb: Func(Of T4, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T5},{TResult}}
  commentId: T:System.Func{`4,``0}
  parent: System
  definition: System.Func`2
  name: Func<T5, TResult>
  nameWithType: Func<T5, TResult>
  fullName: System.Func<T5, TResult>
  nameWithType.vb: Func(Of T5, TResult)
  fullName.vb: System.Func(Of T5, TResult)
  name.vb: Func(Of T5, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T6},{TResult}}
  commentId: T:System.Func{`5,``0}
  parent: System
  definition: System.Func`2
  name: Func<T6, TResult>
  nameWithType: Func<T6, TResult>
  fullName: System.Func<T6, TResult>
  nameWithType.vb: Func(Of T6, TResult)
  fullName.vb: System.Func(Of T6, TResult)
  name.vb: Func(Of T6, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T7},{TResult}}
  commentId: T:System.Func{`6,``0}
  parent: System
  definition: System.Func`2
  name: Func<T7, TResult>
  nameWithType: Func<T7, TResult>
  fullName: System.Func<T7, TResult>
  nameWithType.vb: Func(Of T7, TResult)
  fullName.vb: System.Func(Of T7, TResult)
  name.vb: Func(Of T7, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: CodeJam.IOneOf`7.Do*
  commentId: Overload:CodeJam.IOneOf`7.Do
  isExternal: false
  name: Do
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.Do
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.Do
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).Do
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).Do
- uid: System.Action{{T1}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T1>
  nameWithType: Action<T1>
  fullName: System.Action<T1>
  nameWithType.vb: Action(Of T1)
  fullName.vb: System.Action(Of T1)
  name.vb: Action(Of T1)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T2}}
  commentId: T:System.Action{`1}
  parent: System
  definition: System.Action`1
  name: Action<T2>
  nameWithType: Action<T2>
  fullName: System.Action<T2>
  nameWithType.vb: Action(Of T2)
  fullName.vb: System.Action(Of T2)
  name.vb: Action(Of T2)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T3}}
  commentId: T:System.Action{`2}
  parent: System
  definition: System.Action`1
  name: Action<T3>
  nameWithType: Action<T3>
  fullName: System.Action<T3>
  nameWithType.vb: Action(Of T3)
  fullName.vb: System.Action(Of T3)
  name.vb: Action(Of T3)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T4}}
  commentId: T:System.Action{`3}
  parent: System
  definition: System.Action`1
  name: Action<T4>
  nameWithType: Action<T4>
  fullName: System.Action<T4>
  nameWithType.vb: Action(Of T4)
  fullName.vb: System.Action(Of T4)
  name.vb: Action(Of T4)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T5}}
  commentId: T:System.Action{`4}
  parent: System
  definition: System.Action`1
  name: Action<T5>
  nameWithType: Action<T5>
  fullName: System.Action<T5>
  nameWithType.vb: Action(Of T5)
  fullName.vb: System.Action(Of T5)
  name.vb: Action(Of T5)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T6}}
  commentId: T:System.Action{`5}
  parent: System
  definition: System.Action`1
  name: Action<T6>
  nameWithType: Action<T6>
  fullName: System.Action<T6>
  nameWithType.vb: Action(Of T6)
  fullName.vb: System.Action(Of T6)
  name.vb: Action(Of T6)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T7}}
  commentId: T:System.Action{`6}
  parent: System
  definition: System.Action`1
  name: Action<T7>
  nameWithType: Action<T7>
  fullName: System.Action<T7>
  nameWithType.vb: Action(Of T7)
  fullName.vb: System.Action(Of T7)
  name.vb: Action(Of T7)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOneOf`7.IsCase1*
  commentId: Overload:CodeJam.IOneOf`7.IsCase1
  isExternal: false
  name: IsCase1
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase1
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase1
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase1
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase1
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.IOneOf`7.IsCase2*
  commentId: Overload:CodeJam.IOneOf`7.IsCase2
  isExternal: false
  name: IsCase2
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase2
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase2
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase2
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase2
- uid: CodeJam.IOneOf`7.IsCase3*
  commentId: Overload:CodeJam.IOneOf`7.IsCase3
  isExternal: false
  name: IsCase3
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase3
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase3
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase3
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase3
- uid: CodeJam.IOneOf`7.IsCase4*
  commentId: Overload:CodeJam.IOneOf`7.IsCase4
  isExternal: false
  name: IsCase4
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase4
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase4
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase4
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase4
- uid: CodeJam.IOneOf`7.IsCase5*
  commentId: Overload:CodeJam.IOneOf`7.IsCase5
  isExternal: false
  name: IsCase5
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase5
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase5
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase5
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase5
- uid: CodeJam.IOneOf`7.IsCase6*
  commentId: Overload:CodeJam.IOneOf`7.IsCase6
  isExternal: false
  name: IsCase6
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase6
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase6
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase6
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase6
- uid: CodeJam.IOneOf`7.IsCase7*
  commentId: Overload:CodeJam.IOneOf`7.IsCase7
  isExternal: false
  name: IsCase7
  nameWithType: IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase7
  fullName: CodeJam.IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase7
  nameWithType.vb: IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase7
  fullName.vb: CodeJam.IOneOf(Of T1, T2, T3, T4, T5, T6, T7).IsCase7
