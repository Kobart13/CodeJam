### YamlMime:ManagedReference
items:
- uid: CodeJam.Reflection.InfoOf`1
  commentId: T:CodeJam.Reflection.InfoOf`1
  id: InfoOf`1
  parent: CodeJam.Reflection
  children:
  - CodeJam.Reflection.InfoOf`1.Constructor(System.Linq.Expressions.Expression{System.Func{`0}})
  - CodeJam.Reflection.InfoOf`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - CodeJam.Reflection.InfoOf`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - CodeJam.Reflection.InfoOf`1.Method(System.Linq.Expressions.Expression{System.Action{`0}})
  - CodeJam.Reflection.InfoOf`1.Method``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - CodeJam.Reflection.InfoOf`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  langs:
  - csharp
  - vb
  name: InfoOf<T>
  nameWithType: InfoOf<T>
  fullName: CodeJam.Reflection.InfoOf<T>
  type: Class
  source:
    remote:
      path: Main/src/Reflection/InfoOf`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: InfoOf
    path: ../Main/src/Reflection/InfoOf`1.cs
    startLine: 13
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nProvides a helper class to get the property, field, ctor or method from an expression.\n"
  example: []
  syntax:
    content: public static class InfoOf<T>
    typeParameters:
    - id: T
    content.vb: Public Module InfoOf(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: InfoOf(Of T)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: CodeJam.Reflection.InfoOf(Of T)
  name.vb: InfoOf(Of T)
- uid: CodeJam.Reflection.InfoOf`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:CodeJam.Reflection.InfoOf`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: CodeJam.Reflection.InfoOf`1
  langs:
  - csharp
  - vb
  name: Member<TValue>(Expression<Func<T, TValue>>)
  nameWithType: InfoOf<T>.Member<TValue>(Expression<Func<T, TValue>>)
  fullName: CodeJam.Reflection.InfoOf<T>.Member<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>>)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/InfoOf`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Member
    path: ../Main/src/Reflection/InfoOf`1.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns the property or field.\n"
  example: []
  syntax:
    content: public static MemberInfo Member<TValue>(Expression<Func<T, TValue>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},{TValue}}}
      description: The expression to analyze.
    typeParameters:
    - id: TValue
    return:
      type: System.Reflection.MemberInfo
      description: "\nThe <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: Public Shared Function Member(Of TValue)(expression As Expression(Of Func(Of T, TValue))) As MemberInfo
  overload: CodeJam.Reflection.InfoOf`1.Member*
  nameWithType.vb: InfoOf(Of T).Member(Of TValue)(Expression(Of Func(Of T, TValue)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Member(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of T, TValue)))
  name.vb: Member(Of TValue)(Expression(Of Func(Of T, TValue)))
- uid: CodeJam.Reflection.InfoOf`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:CodeJam.Reflection.InfoOf`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: CodeJam.Reflection.InfoOf`1
  langs:
  - csharp
  - vb
  name: Property<TValue>(Expression<Func<T, TValue>>)
  nameWithType: InfoOf<T>.Property<TValue>(Expression<Func<T, TValue>>)
  fullName: CodeJam.Reflection.InfoOf<T>.Property<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>>)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/InfoOf`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Property
    path: ../Main/src/Reflection/InfoOf`1.cs
    startLine: 34
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns the property.\n"
  example: []
  syntax:
    content: public static PropertyInfo Property<TValue>(Expression<Func<T, TValue>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},{TValue}}}
      description: The expression to analyze.
    typeParameters:
    - id: TValue
    return:
      type: System.Reflection.PropertyInfo
      description: "\nThe <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: Public Shared Function Property(Of TValue)(expression As Expression(Of Func(Of T, TValue))) As PropertyInfo
  overload: CodeJam.Reflection.InfoOf`1.Property*
  nameWithType.vb: InfoOf(Of T).Property(Of TValue)(Expression(Of Func(Of T, TValue)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Property(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of T, TValue)))
  name.vb: Property(Of TValue)(Expression(Of Func(Of T, TValue)))
- uid: CodeJam.Reflection.InfoOf`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:CodeJam.Reflection.InfoOf`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: CodeJam.Reflection.InfoOf`1
  langs:
  - csharp
  - vb
  name: Field<TValue>(Expression<Func<T, TValue>>)
  nameWithType: InfoOf<T>.Field<TValue>(Expression<Func<T, TValue>>)
  fullName: CodeJam.Reflection.InfoOf<T>.Field<TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>>)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/InfoOf`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Field
    path: ../Main/src/Reflection/InfoOf`1.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns the field.\n"
  example: []
  syntax:
    content: public static FieldInfo Field<TValue>(Expression<Func<T, TValue>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},{TValue}}}
      description: The expression to analyze.
    typeParameters:
    - id: TValue
    return:
      type: System.Reflection.FieldInfo
      description: "\nThe <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: Public Shared Function Field(Of TValue)(expression As Expression(Of Func(Of T, TValue))) As FieldInfo
  overload: CodeJam.Reflection.InfoOf`1.Field*
  nameWithType.vb: InfoOf(Of T).Field(Of TValue)(Expression(Of Func(Of T, TValue)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Field(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of T, TValue)))
  name.vb: Field(Of TValue)(Expression(Of Func(Of T, TValue)))
- uid: CodeJam.Reflection.InfoOf`1.Constructor(System.Linq.Expressions.Expression{System.Func{`0}})
  commentId: M:CodeJam.Reflection.InfoOf`1.Constructor(System.Linq.Expressions.Expression{System.Func{`0}})
  id: Constructor(System.Linq.Expressions.Expression{System.Func{`0}})
  parent: CodeJam.Reflection.InfoOf`1
  langs:
  - csharp
  - vb
  name: Constructor(Expression<Func<T>>)
  nameWithType: InfoOf<T>.Constructor(Expression<Func<T>>)
  fullName: CodeJam.Reflection.InfoOf<T>.Constructor(System.Linq.Expressions.Expression<System.Func<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/InfoOf`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Constructor
    path: ../Main/src/Reflection/InfoOf`1.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns the constructor.\n"
  example: []
  syntax:
    content: public static ConstructorInfo Constructor(Expression<Func<T>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T}}}
      description: The expression to analyze.
    return:
      type: System.Reflection.ConstructorInfo
      description: "\nThe <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: Public Shared Function Constructor(expression As Expression(Of Func(Of T))) As ConstructorInfo
  overload: CodeJam.Reflection.InfoOf`1.Constructor*
  nameWithType.vb: InfoOf(Of T).Constructor(Expression(Of Func(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Constructor(System.Linq.Expressions.Expression(Of System.Func(Of T)))
  name.vb: Constructor(Expression(Of Func(Of T)))
- uid: CodeJam.Reflection.InfoOf`1.Method``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:CodeJam.Reflection.InfoOf`1.Method``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Method``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: CodeJam.Reflection.InfoOf`1
  langs:
  - csharp
  - vb
  name: Method<TResult>(Expression<Func<T, TResult>>)
  nameWithType: InfoOf<T>.Method<TResult>(Expression<Func<T, TResult>>)
  fullName: CodeJam.Reflection.InfoOf<T>.Method<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/InfoOf`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Method
    path: ../Main/src/Reflection/InfoOf`1.cs
    startLine: 67
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns the method.\n"
  example: []
  syntax:
    content: public static MethodInfo Method<TResult>(Expression<Func<T, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
      description: The expression to analyze.
    typeParameters:
    - id: TResult
    return:
      type: System.Reflection.MethodInfo
      description: "\nThe <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: Public Shared Function Method(Of TResult)(expression As Expression(Of Func(Of T, TResult))) As MethodInfo
  overload: CodeJam.Reflection.InfoOf`1.Method*
  nameWithType.vb: InfoOf(Of T).Method(Of TResult)(Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Method(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Method(Of TResult)(Expression(Of Func(Of T, TResult)))
- uid: CodeJam.Reflection.InfoOf`1.Method(System.Linq.Expressions.Expression{System.Action{`0}})
  commentId: M:CodeJam.Reflection.InfoOf`1.Method(System.Linq.Expressions.Expression{System.Action{`0}})
  id: Method(System.Linq.Expressions.Expression{System.Action{`0}})
  parent: CodeJam.Reflection.InfoOf`1
  langs:
  - csharp
  - vb
  name: Method(Expression<Action<T>>)
  nameWithType: InfoOf<T>.Method(Expression<Action<T>>)
  fullName: CodeJam.Reflection.InfoOf<T>.Method(System.Linq.Expressions.Expression<System.Action<T>>)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/InfoOf`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Method
    path: ../Main/src/Reflection/InfoOf`1.cs
    startLine: 78
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nReturns the method.\n"
  example: []
  syntax:
    content: public static MethodInfo Method(Expression<Action<T>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Action{{T}}}
      description: The expression to analyze.
    return:
      type: System.Reflection.MethodInfo
      description: "\nThe <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
    content.vb: Public Shared Function Method(expression As Expression(Of Action(Of T))) As MethodInfo
  overload: CodeJam.Reflection.InfoOf`1.Method*
  nameWithType.vb: InfoOf(Of T).Method(Expression(Of Action(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Method(System.Linq.Expressions.Expression(Of System.Action(Of T)))
  name.vb: Method(Expression(Of Action(Of T)))
references:
- uid: CodeJam.Reflection
  commentId: N:CodeJam.Reflection
  isExternal: false
  name: CodeJam.Reflection
  nameWithType: CodeJam.Reflection
  fullName: CodeJam.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: CodeJam.Reflection.InfoOf`1.Member*
  commentId: Overload:CodeJam.Reflection.InfoOf`1.Member
  isExternal: false
  name: Member
  nameWithType: InfoOf<T>.Member
  fullName: CodeJam.Reflection.InfoOf<T>.Member
  nameWithType.vb: InfoOf(Of T).Member
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Member
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TValue>>
  nameWithType: Expression<Func<T, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TValue>>
  nameWithType.vb: Expression(Of Func(Of T, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TValue))
  name.vb: Expression(Of Func(Of T, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: CodeJam.Reflection.InfoOf`1.Property*
  commentId: Overload:CodeJam.Reflection.InfoOf`1.Property
  isExternal: false
  name: Property
  nameWithType: InfoOf<T>.Property
  fullName: CodeJam.Reflection.InfoOf<T>.Property
  nameWithType.vb: InfoOf(Of T).Property
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Property
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: CodeJam.Reflection.InfoOf`1.Field*
  commentId: Overload:CodeJam.Reflection.InfoOf`1.Field
  isExternal: false
  name: Field
  nameWithType: InfoOf<T>.Field
  fullName: CodeJam.Reflection.InfoOf<T>.Field
  nameWithType.vb: InfoOf(Of T).Field
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Field
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: CodeJam.Reflection.InfoOf`1.Constructor*
  commentId: Overload:CodeJam.Reflection.InfoOf`1.Constructor
  isExternal: false
  name: Constructor
  nameWithType: InfoOf<T>.Constructor
  fullName: CodeJam.Reflection.InfoOf<T>.Constructor
  nameWithType.vb: InfoOf(Of T).Constructor
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Constructor
- uid: System.Linq.Expressions.Expression{System.Func{{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T>>
  nameWithType: Expression<Func<T>>
  fullName: System.Linq.Expressions.Expression<System.Func<T>>
  nameWithType.vb: Expression(Of Func(Of T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T))
  name.vb: Expression(Of Func(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: CodeJam.Reflection.InfoOf`1.Method*
  commentId: Overload:CodeJam.Reflection.InfoOf`1.Method
  isExternal: false
  name: Method
  nameWithType: InfoOf<T>.Method
  fullName: CodeJam.Reflection.InfoOf<T>.Method
  nameWithType.vb: InfoOf(Of T).Method
  fullName.vb: CodeJam.Reflection.InfoOf(Of T).Method
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TResult>>
  nameWithType: Expression<Func<T, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TResult>>
  nameWithType.vb: Expression(Of Func(Of T, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TResult))
  name.vb: Expression(Of Func(Of T, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Action{{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Action{`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Action<T>>
  nameWithType: Expression<Action<T>>
  fullName: System.Linq.Expressions.Expression<System.Action<T>>
  nameWithType.vb: Expression(Of Action(Of T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Action(Of T))
  name.vb: Expression(Of Action(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
