### YamlMime:ManagedReference
items:
- uid: CodeJam.IO.DebugIoCode
  commentId: T:CodeJam.IO.DebugIoCode
  id: DebugIoCode
  parent: CodeJam.IO
  children:
  - CodeJam.IO.DebugIoCode.DirectoryExists(System.String,System.String)
  - CodeJam.IO.DebugIoCode.FileExists(System.String,System.String)
  - CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath(System.String,System.String)
  - CodeJam.IO.DebugIoCode.IsWellFormedContainerPath(System.String,System.String)
  - CodeJam.IO.DebugIoCode.IsWellFormedPath(System.String,System.String)
  - CodeJam.IO.DebugIoCode.IsWellFormedRelativePath(System.String,System.String)
  - CodeJam.IO.DebugIoCode.IsWellFormedSimpleName(System.String,System.String)
  - CodeJam.IO.DebugIoCode.PathIsFree(System.String)
  langs:
  - csharp
  - vb
  name: DebugIoCode
  nameWithType: DebugIoCode
  fullName: CodeJam.IO.DebugIoCode
  type: Class
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DebugIoCode
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: IO assertions class.
  example: []
  syntax:
    content: public static class DebugIoCode
    content.vb: Public Module DebugIoCode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.IO.DebugIoCode.IsWellFormedPath(System.String,System.String)
  commentId: M:CodeJam.IO.DebugIoCode.IsWellFormedPath(System.String,System.String)
  id: IsWellFormedPath(System.String,System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: IsWellFormedPath(String, String)
  nameWithType: DebugIoCode.IsWellFormedPath(String, String)
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedPath(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsWellFormedPath
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 29
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified path is either absolute or relative not rooted path.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void IsWellFormedPath(string path, string argName)
    parameters:
    - id: path
      type: System.String
      description: The path.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub IsWellFormedPath(path As String, argName As String)
  overload: CodeJam.IO.DebugIoCode.IsWellFormedPath*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath(System.String,System.String)
  commentId: M:CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath(System.String,System.String)
  id: IsWellFormedAbsolutePath(System.String,System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: IsWellFormedAbsolutePath(String, String)
  nameWithType: DebugIoCode.IsWellFormedAbsolutePath(String, String)
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsWellFormedAbsolutePath
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 43
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified path is well-formed full path.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void IsWellFormedAbsolutePath(string path, string argName)
    parameters:
    - id: path
      type: System.String
      description: The path.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub IsWellFormedAbsolutePath(path As String, argName As String)
  overload: CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.IO.DebugIoCode.IsWellFormedRelativePath(System.String,System.String)
  commentId: M:CodeJam.IO.DebugIoCode.IsWellFormedRelativePath(System.String,System.String)
  id: IsWellFormedRelativePath(System.String,System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: IsWellFormedRelativePath(String, String)
  nameWithType: DebugIoCode.IsWellFormedRelativePath(String, String)
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedRelativePath(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsWellFormedRelativePath
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified path is well-formed full path.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void IsWellFormedRelativePath(string path, string argName)
    parameters:
    - id: path
      type: System.String
      description: The path.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub IsWellFormedRelativePath(path As String, argName As String)
  overload: CodeJam.IO.DebugIoCode.IsWellFormedRelativePath*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.IO.DebugIoCode.IsWellFormedContainerPath(System.String,System.String)
  commentId: M:CodeJam.IO.DebugIoCode.IsWellFormedContainerPath(System.String,System.String)
  id: IsWellFormedContainerPath(System.String,System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: IsWellFormedContainerPath(String, String)
  nameWithType: DebugIoCode.IsWellFormedContainerPath(String, String)
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedContainerPath(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsWellFormedContainerPath
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 71
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified path is well formed and ends with directory or volume separator chars.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void IsWellFormedContainerPath(string path, string argName)
    parameters:
    - id: path
      type: System.String
      description: The path.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub IsWellFormedContainerPath(path As String, argName As String)
  overload: CodeJam.IO.DebugIoCode.IsWellFormedContainerPath*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.IO.DebugIoCode.IsWellFormedSimpleName(System.String,System.String)
  commentId: M:CodeJam.IO.DebugIoCode.IsWellFormedSimpleName(System.String,System.String)
  id: IsWellFormedSimpleName(System.String,System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: IsWellFormedSimpleName(String, String)
  nameWithType: DebugIoCode.IsWellFormedSimpleName(String, String)
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedSimpleName(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsWellFormedSimpleName
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 85
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified path is well-formed simple name.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void IsWellFormedSimpleName(string path, string argName)
    parameters:
    - id: path
      type: System.String
      description: The path.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub IsWellFormedSimpleName(path As String, argName As String)
  overload: CodeJam.IO.DebugIoCode.IsWellFormedSimpleName*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.IO.DebugIoCode.FileExists(System.String,System.String)
  commentId: M:CodeJam.IO.DebugIoCode.FileExists(System.String,System.String)
  id: FileExists(System.String,System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: FileExists(String, String)
  nameWithType: DebugIoCode.FileExists(String, String)
  fullName: CodeJam.IO.DebugIoCode.FileExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FileExists
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 100
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified file does exist.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void FileExists(string filePath, string argName)
    parameters:
    - id: filePath
      type: System.String
      description: Path to the file.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub FileExists(filePath As String, argName As String)
  overload: CodeJam.IO.DebugIoCode.FileExists*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.IO.DebugIoCode.DirectoryExists(System.String,System.String)
  commentId: M:CodeJam.IO.DebugIoCode.DirectoryExists(System.String,System.String)
  id: DirectoryExists(System.String,System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: DirectoryExists(String, String)
  nameWithType: DebugIoCode.DirectoryExists(String, String)
  fullName: CodeJam.IO.DebugIoCode.DirectoryExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DirectoryExists
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 116
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified directory does exist.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void DirectoryExists(string directoryPath, string argName)
    parameters:
    - id: directoryPath
      type: System.String
      description: Path to the directory.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub DirectoryExists(directoryPath As String, argName As String)
  overload: CodeJam.IO.DebugIoCode.DirectoryExists*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.IO.DebugIoCode.PathIsFree(System.String)
  commentId: M:CodeJam.IO.DebugIoCode.PathIsFree(System.String)
  id: PathIsFree(System.String)
  parent: CodeJam.IO.DebugIoCode
  langs:
  - csharp
  - vb
  name: PathIsFree(String)
  nameWithType: DebugIoCode.PathIsFree(String)
  fullName: CodeJam.IO.DebugIoCode.PathIsFree(System.String)
  type: Method
  source:
    remote:
      path: Main/src/IO/DebugIoCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: PathIsFree
    path: ../Main/src/IO/DebugIoCode.generated.cs
    startLine: 130
  assemblies:
  - CodeJam
  namespace: CodeJam.IO
  summary: Asserts that specified path is not a path to existent file or a directory.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void PathIsFree(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub PathIsFree(path As String)
  overload: CodeJam.IO.DebugIoCode.PathIsFree*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CodeJam.IO
  commentId: N:CodeJam.IO
  isExternal: false
  name: CodeJam.IO
  nameWithType: CodeJam.IO
  fullName: CodeJam.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.IO.DebugIoCode.IsWellFormedPath*
  commentId: Overload:CodeJam.IO.DebugIoCode.IsWellFormedPath
  isExternal: false
  name: IsWellFormedPath
  nameWithType: DebugIoCode.IsWellFormedPath
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath*
  commentId: Overload:CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath
  isExternal: false
  name: IsWellFormedAbsolutePath
  nameWithType: DebugIoCode.IsWellFormedAbsolutePath
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedAbsolutePath
- uid: CodeJam.IO.DebugIoCode.IsWellFormedRelativePath*
  commentId: Overload:CodeJam.IO.DebugIoCode.IsWellFormedRelativePath
  isExternal: false
  name: IsWellFormedRelativePath
  nameWithType: DebugIoCode.IsWellFormedRelativePath
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedRelativePath
- uid: CodeJam.IO.DebugIoCode.IsWellFormedContainerPath*
  commentId: Overload:CodeJam.IO.DebugIoCode.IsWellFormedContainerPath
  isExternal: false
  name: IsWellFormedContainerPath
  nameWithType: DebugIoCode.IsWellFormedContainerPath
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedContainerPath
- uid: CodeJam.IO.DebugIoCode.IsWellFormedSimpleName*
  commentId: Overload:CodeJam.IO.DebugIoCode.IsWellFormedSimpleName
  isExternal: false
  name: IsWellFormedSimpleName
  nameWithType: DebugIoCode.IsWellFormedSimpleName
  fullName: CodeJam.IO.DebugIoCode.IsWellFormedSimpleName
- uid: CodeJam.IO.DebugIoCode.FileExists*
  commentId: Overload:CodeJam.IO.DebugIoCode.FileExists
  isExternal: false
  name: FileExists
  nameWithType: DebugIoCode.FileExists
  fullName: CodeJam.IO.DebugIoCode.FileExists
- uid: CodeJam.IO.DebugIoCode.DirectoryExists*
  commentId: Overload:CodeJam.IO.DebugIoCode.DirectoryExists
  isExternal: false
  name: DirectoryExists
  nameWithType: DebugIoCode.DirectoryExists
  fullName: CodeJam.IO.DebugIoCode.DirectoryExists
- uid: CodeJam.IO.DebugIoCode.PathIsFree*
  commentId: Overload:CodeJam.IO.DebugIoCode.PathIsFree
  isExternal: false
  name: PathIsFree
  nameWithType: DebugIoCode.PathIsFree
  fullName: CodeJam.IO.DebugIoCode.PathIsFree
