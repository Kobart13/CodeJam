### YamlMime:ManagedReference
items:
- uid: CodeJam.Strings.StringExtensions
  commentId: T:CodeJam.Strings.StringExtensions
  id: StringExtensions
  parent: CodeJam.Strings
  children:
  - CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object)
  - CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object)
  - CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)
  - CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object[])
  - CodeJam.Strings.StringExtensions.FromBase64(System.String)
  - CodeJam.Strings.StringExtensions.IsControl(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsDigit(System.String)
  - CodeJam.Strings.StringExtensions.IsDigit(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsHighSurrogate(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsLetter(System.String)
  - CodeJam.Strings.StringExtensions.IsLetter(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String)
  - CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsLower(System.String)
  - CodeJam.Strings.StringExtensions.IsLower(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsLowSurrogate(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsNullOrEmpty(System.String)
  - CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace(System.String)
  - CodeJam.Strings.StringExtensions.IsNumber(System.String)
  - CodeJam.Strings.StringExtensions.IsNumber(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsPunctuation(System.String)
  - CodeJam.Strings.StringExtensions.IsPunctuation(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsSeparator(System.String)
  - CodeJam.Strings.StringExtensions.IsSeparator(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsSurrogate(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsSurrogatePair(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsSymbol(System.String)
  - CodeJam.Strings.StringExtensions.IsSymbol(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsUpper(System.String)
  - CodeJam.Strings.StringExtensions.IsUpper(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String)
  - CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)
  - CodeJam.Strings.StringExtensions.Join(System.String[],System.String)
  - CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - CodeJam.Strings.StringExtensions.Length(System.String)
  - CodeJam.Strings.StringExtensions.NotNullNorEmpty(System.String)
  - CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace(System.String)
  - CodeJam.Strings.StringExtensions.Prefix(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.Remove(System.String,System.String[])
  - CodeJam.Strings.StringExtensions.SplitWithTrim(System.String,System.Char[])
  - CodeJam.Strings.StringExtensions.Substring(System.String,CodeJam.Strings.StringOrigin,System.Int32)
  - CodeJam.Strings.StringExtensions.Suffix(System.String,System.Int32)
  - CodeJam.Strings.StringExtensions.ToBase64(System.Byte[],System.Base64FormattingOptions)
  - CodeJam.Strings.StringExtensions.ToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToByteInvariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToBytes(System.String)
  - CodeJam.Strings.StringExtensions.ToBytes(System.String,System.Text.Encoding)
  - CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32)
  - CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64)
  - CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToDateTimeInvariant(System.String,System.Globalization.DateTimeStyles)
  - CodeJam.Strings.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToDecimalInvariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToDoubleInvariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToHexString(System.Byte[])
  - CodeJam.Strings.StringExtensions.ToHexString(System.Byte[],System.String)
  - CodeJam.Strings.StringExtensions.ToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToInt16Invariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToInt32Invariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToInt64Invariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  - CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  - CodeJam.Strings.StringExtensions.ToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToSByteInvariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToSingleInvariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToUInt16Invariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToUInt32Invariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.ToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - CodeJam.Strings.StringExtensions.ToUInt64Invariant(System.String,System.Globalization.NumberStyles)
  - CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String)
  - CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  - CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String)
  - CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  - CodeJam.Strings.StringExtensions.Unquote(System.String)
  - CodeJam.Strings.StringExtensions.Unquote(System.String,System.Boolean@)
  - CodeJam.Strings.StringExtensions.Unquote(System.String,System.Char,System.Boolean@)
  langs:
  - csharp
  - vb
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: CodeJam.Strings.StringExtensions
  type: Class
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StringExtensions
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 16
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\n<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class extensions.\n"
  example: []
  syntax:
    content: public static class StringExtensions
    content.vb: Public Module StringExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Strings.StringExtensions.IsControl(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsControl(System.String,System.Int32)
  id: IsControl(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsControl(String, Int32)
  nameWithType: StringExtensions.IsControl(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsControl(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsControl
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 24
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a control.\n"
  example: []
  syntax:
    content: public static bool IsControl(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a control\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsControl(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsControl*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsHighSurrogate(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsHighSurrogate(System.String,System.Int32)
  id: IsHighSurrogate(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsHighSurrogate(String, Int32)
  nameWithType: StringExtensions.IsHighSurrogate(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsHighSurrogate(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsHighSurrogate
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 36
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a highsurrogate.\n"
  example: []
  syntax:
    content: public static bool IsHighSurrogate(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a highsurrogate\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsHighSurrogate(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsHighSurrogate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsLowSurrogate(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsLowSurrogate(System.String,System.Int32)
  id: IsLowSurrogate(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLowSurrogate(String, Int32)
  nameWithType: StringExtensions.IsLowSurrogate(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsLowSurrogate(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLowSurrogate
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 48
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a lowsurrogate.\n"
  example: []
  syntax:
    content: public static bool IsLowSurrogate(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a lowsurrogate\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLowSurrogate(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsLowSurrogate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsDigit(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsDigit(System.String,System.Int32)
  id: IsDigit(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsDigit(String, Int32)
  nameWithType: StringExtensions.IsDigit(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsDigit(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsDigit
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 60
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a digit.\n"
  example: []
  syntax:
    content: public static bool IsDigit(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a digit\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDigit(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsDigit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsDigit(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsDigit(System.String)
  id: IsDigit(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsDigit(String)
  nameWithType: StringExtensions.IsDigit(String)
  fullName: CodeJam.Strings.StringExtensions.IsDigit(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsDigit
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 70
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a digit.\n"
  example: []
  syntax:
    content: public static bool IsDigit(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a digit; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDigit(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsDigit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsLetter(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsLetter(System.String,System.Int32)
  id: IsLetter(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLetter(String, Int32)
  nameWithType: StringExtensions.IsLetter(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsLetter(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLetter
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 91
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a letter.\n"
  example: []
  syntax:
    content: public static bool IsLetter(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a letter\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLetter(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsLetter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsLetter(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsLetter(System.String)
  id: IsLetter(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLetter(String)
  nameWithType: StringExtensions.IsLetter(String)
  fullName: CodeJam.Strings.StringExtensions.IsLetter(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLetter
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 101
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a letter.\n"
  example: []
  syntax:
    content: public static bool IsLetter(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a letter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLetter(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsLetter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String,System.Int32)
  id: IsLetterOrDigit(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLetterOrDigit(String, Int32)
  nameWithType: StringExtensions.IsLetterOrDigit(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLetterOrDigit
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 122
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a letterordigit.\n"
  example: []
  syntax:
    content: public static bool IsLetterOrDigit(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a letterordigit\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLetterOrDigit(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsLetterOrDigit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String)
  id: IsLetterOrDigit(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLetterOrDigit(String)
  nameWithType: StringExtensions.IsLetterOrDigit(String)
  fullName: CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLetterOrDigit
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 132
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a letterordigit.\n"
  example: []
  syntax:
    content: public static bool IsLetterOrDigit(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a letterordigit; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLetterOrDigit(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsLetterOrDigit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsLower(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsLower(System.String,System.Int32)
  id: IsLower(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLower(String, Int32)
  nameWithType: StringExtensions.IsLower(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsLower(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLower
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 153
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a lower.\n"
  example: []
  syntax:
    content: public static bool IsLower(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a lower\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLower(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsLower(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsLower(System.String)
  id: IsLower(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLower(String)
  nameWithType: StringExtensions.IsLower(String)
  fullName: CodeJam.Strings.StringExtensions.IsLower(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsLower
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 163
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a lower.\n"
  example: []
  syntax:
    content: public static bool IsLower(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a lower; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLower(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsUpper(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsUpper(System.String,System.Int32)
  id: IsUpper(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsUpper(String, Int32)
  nameWithType: StringExtensions.IsUpper(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsUpper(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsUpper
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 184
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a upper.\n"
  example: []
  syntax:
    content: public static bool IsUpper(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a upper\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsUpper(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsUpper(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsUpper(System.String)
  id: IsUpper(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsUpper(String)
  nameWithType: StringExtensions.IsUpper(String)
  fullName: CodeJam.Strings.StringExtensions.IsUpper(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsUpper
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 194
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a upper.\n"
  example: []
  syntax:
    content: public static bool IsUpper(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a upper; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsUpper(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsNumber(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsNumber(System.String,System.Int32)
  id: IsNumber(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNumber(String, Int32)
  nameWithType: StringExtensions.IsNumber(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsNumber(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNumber
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 215
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a number.\n"
  example: []
  syntax:
    content: public static bool IsNumber(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a number\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNumber(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsNumber(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsNumber(System.String)
  id: IsNumber(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNumber(String)
  nameWithType: StringExtensions.IsNumber(String)
  fullName: CodeJam.Strings.StringExtensions.IsNumber(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNumber
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 225
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a number.\n"
  example: []
  syntax:
    content: public static bool IsNumber(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a number; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNumber(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsPunctuation(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsPunctuation(System.String,System.Int32)
  id: IsPunctuation(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsPunctuation(String, Int32)
  nameWithType: StringExtensions.IsPunctuation(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsPunctuation(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsPunctuation
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 246
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a punctuation.\n"
  example: []
  syntax:
    content: public static bool IsPunctuation(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a punctuation\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPunctuation(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsPunctuation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsPunctuation(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsPunctuation(System.String)
  id: IsPunctuation(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsPunctuation(String)
  nameWithType: StringExtensions.IsPunctuation(String)
  fullName: CodeJam.Strings.StringExtensions.IsPunctuation(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsPunctuation
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 256
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a punctuation.\n"
  example: []
  syntax:
    content: public static bool IsPunctuation(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a punctuation; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPunctuation(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsPunctuation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsSeparator(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsSeparator(System.String,System.Int32)
  id: IsSeparator(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsSeparator(String, Int32)
  nameWithType: StringExtensions.IsSeparator(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsSeparator(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSeparator
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 277
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a separator.\n"
  example: []
  syntax:
    content: public static bool IsSeparator(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a separator\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSeparator(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsSeparator*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsSeparator(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsSeparator(System.String)
  id: IsSeparator(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsSeparator(String)
  nameWithType: StringExtensions.IsSeparator(String)
  fullName: CodeJam.Strings.StringExtensions.IsSeparator(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSeparator
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 287
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a separator.\n"
  example: []
  syntax:
    content: public static bool IsSeparator(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a separator; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSeparator(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsSeparator*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsSurrogate(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsSurrogate(System.String,System.Int32)
  id: IsSurrogate(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsSurrogate(String, Int32)
  nameWithType: StringExtensions.IsSurrogate(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsSurrogate(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSurrogate
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 308
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a surrogate.\n"
  example: []
  syntax:
    content: public static bool IsSurrogate(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a surrogate\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSurrogate(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsSurrogate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsSurrogatePair(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsSurrogatePair(System.String,System.Int32)
  id: IsSurrogatePair(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsSurrogatePair(String, Int32)
  nameWithType: StringExtensions.IsSurrogatePair(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsSurrogatePair(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSurrogatePair
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 320
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a surrogatepair.\n"
  example: []
  syntax:
    content: public static bool IsSurrogatePair(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a surrogatepair\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSurrogatePair(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsSurrogatePair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsSymbol(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsSymbol(System.String,System.Int32)
  id: IsSymbol(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsSymbol(String, Int32)
  nameWithType: StringExtensions.IsSymbol(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsSymbol(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSymbol
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 332
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a symbol.\n"
  example: []
  syntax:
    content: public static bool IsSymbol(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a symbol\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSymbol(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsSymbol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsSymbol(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsSymbol(System.String)
  id: IsSymbol(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsSymbol(String)
  nameWithType: StringExtensions.IsSymbol(String)
  fullName: CodeJam.Strings.StringExtensions.IsSymbol(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSymbol
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 342
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a symbol.\n"
  example: []
  syntax:
    content: public static bool IsSymbol(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a symbol; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSymbol(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsSymbol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String,System.Int32)
  id: IsWhiteSpace(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsWhiteSpace(String, Int32)
  nameWithType: StringExtensions.IsWhiteSpace(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsWhiteSpace
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 363
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether the character at the specified position in a specified string is categorized as a whitespace.\n"
  example: []
  syntax:
    content: public static bool IsWhiteSpace(this string str, int index)
    parameters:
    - id: str
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in <code data-dev-comment-type="paramref" class="paramref">str</code>.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the character at position <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a whitespace\ncharacter; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsWhiteSpace(str As String, index As Integer) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsWhiteSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String)
  id: IsWhiteSpace(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsWhiteSpace(String)
  nameWithType: StringExtensions.IsWhiteSpace(String)
  fullName: CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.CharInfix.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsWhiteSpace
    path: ../Main/src/Strings/StringExtensions.CharInfix.generated.cs
    startLine: 373
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nIndicates whether all characters in a specified string is categorized as a whitespace.\n"
  example: []
  syntax:
    content: public static bool IsWhiteSpace(this string str)
    parameters:
    - id: str
      type: System.String
      description: A string
    return:
      type: System.Boolean
      description: "\n<code>true</code> if all character in <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is a whitespace; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsWhiteSpace(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsWhiteSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  id: ToInvariantString``1(``0)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInvariantString<T>(T)
  nameWithType: StringExtensions.ToInvariantString<T>(T)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInvariantString
    path: ../Main/src/Strings/StringExtensions.ToXxx.cs
    startLine: 14
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nCulture invariant version of <xref href=\"System.IFormattable.ToString(System.String%2cSystem.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public static string ToInvariantString<T>(this T s)where T : IFormattable'
    parameters:
    - id: s
      type: '{T}'
      description: Object to convert.
    typeParameters:
    - id: T
    return:
      type: System.String
      description: String representation of <code data-dev-comment-type="paramref" class="paramref">s</code> according to rules of invariant culture.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInvariantString(Of T As IFormattable)(s As T) As String
  overload: CodeJam.Strings.StringExtensions.ToInvariantString*
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T)
  name.vb: ToInvariantString(Of T)(T)
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  id: ToInvariantString``1(``0,System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInvariantString<T>(T, String)
  nameWithType: StringExtensions.ToInvariantString<T>(T, String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInvariantString
    path: ../Main/src/Strings/StringExtensions.ToXxx.cs
    startLine: 24
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nCulture invariant version of <xref href=\"System.IFormattable.ToString(System.String%2cSystem.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public static string ToInvariantString<T>(this T s, string format)where T : IFormattable'
    parameters:
    - id: s
      type: '{T}'
      description: Object to convert.
    - id: format
      type: System.String
      description: Format string
    typeParameters:
    - id: T
    return:
      type: System.String
      description: String representation of <code data-dev-comment-type="paramref" class="paramref">s</code> according to rules of invariant culture.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInvariantString(Of T As IFormattable)(s As T, format As String) As String
  overload: CodeJam.Strings.StringExtensions.ToInvariantString*
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T, System.String)
  name.vb: ToInvariantString(Of T)(T, String)
- uid: CodeJam.Strings.StringExtensions.ToDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)
  id: ToDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToDateTime(String, DateTimeStyles, IFormatProvider)
  nameWithType: StringExtensions.ToDateTime(String, DateTimeStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToDateTime(System.String, System.Globalization.DateTimeStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDateTime
    path: ../Main/src/Strings/StringExtensions.ToXxx.cs
    startLine: 50
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static DateTime? ToDateTime(this string str, DateTimeStyles dateStyle = DateTimeStyles.None, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">dateStyle</code>.\n"
    - id: dateStyle
      type: System.Globalization.DateTimeStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.DateTime}
      description: "\nWhen this method returns, contains the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.DateTime.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDateTime(str As String, dateStyle As DateTimeStyles = DateTimeStyles.None, provider As IFormatProvider = Nothing) As Date?
  overload: CodeJam.Strings.StringExtensions.ToDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToDateTimeInvariant(System.String,System.Globalization.DateTimeStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToDateTimeInvariant(System.String,System.Globalization.DateTimeStyles)
  id: ToDateTimeInvariant(System.String,System.Globalization.DateTimeStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToDateTimeInvariant(String, DateTimeStyles)
  nameWithType: StringExtensions.ToDateTimeInvariant(String, DateTimeStyles)
  fullName: CodeJam.Strings.StringExtensions.ToDateTimeInvariant(System.String, System.Globalization.DateTimeStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDateTimeInvariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.cs
    startLine: 75
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static DateTime? ToDateTimeInvariant(this string str, DateTimeStyles dateStyle = DateTimeStyles.None)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">dateStyle</code>.\n"
    - id: dateStyle
      type: System.Globalization.DateTimeStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.DateTime}
      description: "\nWhen this method returns, contains the <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.DateTime.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDateTimeInvariant(str As String, dateStyle As DateTimeStyles = DateTimeStyles.None) As Date?
  overload: CodeJam.Strings.StringExtensions.ToDateTimeInvariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToByte(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToByte(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToByte(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToByte
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 39
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static byte ? ToByte(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.Byte}
      description: "\nWhen this method returns, contains the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToByte(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer, provider As IFormatProvider = Nothing) As Byte?
  overload: CodeJam.Strings.StringExtensions.ToByte*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToByteInvariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToByteInvariant(System.String,System.Globalization.NumberStyles)
  id: ToByteInvariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToByteInvariant(String, NumberStyles)
  nameWithType: StringExtensions.ToByteInvariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToByteInvariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToByteInvariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 67
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static byte ? ToByteInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.Byte}
      description: "\nWhen this method returns, contains the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToByteInvariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer) As Byte?
  overload: CodeJam.Strings.StringExtensions.ToByteInvariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToSByte(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToSByte(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToSByte(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToSByte
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 99
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static sbyte ? ToSByte(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.SByte}
      description: "\nWhen this method returns, contains the <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSByte(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer, provider As IFormatProvider = Nothing) As SByte?
  overload: CodeJam.Strings.StringExtensions.ToSByte*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToSByteInvariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToSByteInvariant(System.String,System.Globalization.NumberStyles)
  id: ToSByteInvariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToSByteInvariant(String, NumberStyles)
  nameWithType: StringExtensions.ToSByteInvariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToSByteInvariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToSByteInvariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 127
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static sbyte ? ToSByteInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.SByte}
      description: "\nWhen this method returns, contains the <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSByteInvariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer) As SByte?
  overload: CodeJam.Strings.StringExtensions.ToSByteInvariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInt16(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToInt16(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToInt16(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInt16
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 159
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static short ? ToInt16(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Number.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.Int16}
      description: "\nWhen this method returns, contains the <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt16(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowTrailingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowThousands Or NumberStyles.Integer Or NumberStyles.Number, provider As IFormatProvider = Nothing) As Short?
  overload: CodeJam.Strings.StringExtensions.ToInt16*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToInt16Invariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToInt16Invariant(System.String,System.Globalization.NumberStyles)
  id: ToInt16Invariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInt16Invariant(String, NumberStyles)
  nameWithType: StringExtensions.ToInt16Invariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToInt16Invariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInt16Invariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 187
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static short ? ToInt16Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Number.\n"
    return:
      type: System.Nullable{System.Int16}
      description: "\nWhen this method returns, contains the <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt16Invariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowTrailingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowThousands Or NumberStyles.Integer Or NumberStyles.Number) As Short?
  overload: CodeJam.Strings.StringExtensions.ToInt16Invariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToUInt16(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToUInt16(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToUInt16(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToUInt16
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 219
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static ushort ? ToUInt16(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.UInt16}
      description: "\nWhen this method returns, contains the <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUInt16(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer, provider As IFormatProvider = Nothing) As UShort?
  overload: CodeJam.Strings.StringExtensions.ToUInt16*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToUInt16Invariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToUInt16Invariant(System.String,System.Globalization.NumberStyles)
  id: ToUInt16Invariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToUInt16Invariant(String, NumberStyles)
  nameWithType: StringExtensions.ToUInt16Invariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToUInt16Invariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToUInt16Invariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 247
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static ushort ? ToUInt16Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.UInt16}
      description: "\nWhen this method returns, contains the <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUInt16Invariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer) As UShort?
  overload: CodeJam.Strings.StringExtensions.ToUInt16Invariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInt32(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToInt32(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToInt32(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInt32
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 279
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static int ? ToInt32(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\nWhen this method returns, contains the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt32(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer, provider As IFormatProvider = Nothing) As Integer?
  overload: CodeJam.Strings.StringExtensions.ToInt32*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToInt32Invariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToInt32Invariant(System.String,System.Globalization.NumberStyles)
  id: ToInt32Invariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInt32Invariant(String, NumberStyles)
  nameWithType: StringExtensions.ToInt32Invariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToInt32Invariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInt32Invariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 307
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static int ? ToInt32Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\nWhen this method returns, contains the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt32Invariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer) As Integer?
  overload: CodeJam.Strings.StringExtensions.ToInt32Invariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToUInt32(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToUInt32(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToUInt32(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToUInt32
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 339
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static uint ? ToUInt32(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.UInt32}
      description: "\nWhen this method returns, contains the <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUInt32(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer, provider As IFormatProvider = Nothing) As UInteger?
  overload: CodeJam.Strings.StringExtensions.ToUInt32*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToUInt32Invariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToUInt32Invariant(System.String,System.Globalization.NumberStyles)
  id: ToUInt32Invariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToUInt32Invariant(String, NumberStyles)
  nameWithType: StringExtensions.ToUInt32Invariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToUInt32Invariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToUInt32Invariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 367
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static uint ? ToUInt32Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.UInt32}
      description: "\nWhen this method returns, contains the <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUInt32Invariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer) As UInteger?
  overload: CodeJam.Strings.StringExtensions.ToUInt32Invariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInt64(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToInt64(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToInt64(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInt64
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 399
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static long ? ToInt64(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\nWhen this method returns, contains the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt64(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer, provider As IFormatProvider = Nothing) As Long?
  overload: CodeJam.Strings.StringExtensions.ToInt64*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToInt64Invariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToInt64Invariant(System.String,System.Globalization.NumberStyles)
  id: ToInt64Invariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToInt64Invariant(String, NumberStyles)
  nameWithType: StringExtensions.ToInt64Invariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToInt64Invariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInt64Invariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 427
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static long ? ToInt64Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\nWhen this method returns, contains the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt64Invariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer) As Long?
  overload: CodeJam.Strings.StringExtensions.ToInt64Invariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToUInt64(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToUInt64(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToUInt64(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToUInt64
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 459
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static ulong ? ToUInt64(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.UInt64}
      description: "\nWhen this method returns, contains the <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUInt64(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer, provider As IFormatProvider = Nothing) As ULong?
  overload: CodeJam.Strings.StringExtensions.ToUInt64*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToUInt64Invariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToUInt64Invariant(System.String,System.Globalization.NumberStyles)
  id: ToUInt64Invariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToUInt64Invariant(String, NumberStyles)
  nameWithType: StringExtensions.ToUInt64Invariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToUInt64Invariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToUInt64Invariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 487
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static ulong ? ToUInt64Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Integer.\n"
    return:
      type: System.Nullable{System.UInt64}
      description: "\nWhen this method returns, contains the <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUInt64Invariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.Integer) As ULong?
  overload: CodeJam.Strings.StringExtensions.ToUInt64Invariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToSingle(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToSingle(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToSingle(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToSingle
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 519
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static float ? ToSingle(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Float.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.Single}
      description: "\nWhen this method returns, contains the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSingle(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowExponent Or NumberStyles.Integer Or NumberStyles.Float, provider As IFormatProvider = Nothing) As Single?
  overload: CodeJam.Strings.StringExtensions.ToSingle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToSingleInvariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToSingleInvariant(System.String,System.Globalization.NumberStyles)
  id: ToSingleInvariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToSingleInvariant(String, NumberStyles)
  nameWithType: StringExtensions.ToSingleInvariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToSingleInvariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToSingleInvariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 547
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static float ? ToSingleInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Float.\n"
    return:
      type: System.Nullable{System.Single}
      description: "\nWhen this method returns, contains the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSingleInvariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowExponent Or NumberStyles.Integer Or NumberStyles.Float) As Single?
  overload: CodeJam.Strings.StringExtensions.ToSingleInvariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToDouble(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToDouble(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToDouble(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDouble
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 579
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static double ? ToDouble(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Float.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.Double}
      description: "\nWhen this method returns, contains the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDouble(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowExponent Or NumberStyles.Integer Or NumberStyles.Float, provider As IFormatProvider = Nothing) As Double?
  overload: CodeJam.Strings.StringExtensions.ToDouble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToDoubleInvariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToDoubleInvariant(System.String,System.Globalization.NumberStyles)
  id: ToDoubleInvariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToDoubleInvariant(String, NumberStyles)
  nameWithType: StringExtensions.ToDoubleInvariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToDoubleInvariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDoubleInvariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 607
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static double ? ToDoubleInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Float.\n"
    return:
      type: System.Nullable{System.Double}
      description: "\nWhen this method returns, contains the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDoubleInvariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowExponent Or NumberStyles.Integer Or NumberStyles.Float) As Double?
  overload: CodeJam.Strings.StringExtensions.ToDoubleInvariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToDecimal(String, NumberStyles, IFormatProvider)
  nameWithType: StringExtensions.ToDecimal(String, NumberStyles, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToDecimal(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDecimal
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 639
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-specific format to its\n<xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static decimal ? ToDecimal(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number, IFormatProvider provider = null)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Number.\n"
    - id: provider
      type: System.IFormatProvider
      description: "\nAn object that supplies culture-specific formatting information about <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\nWhen this method returns, contains the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDecimal(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowTrailingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowThousands Or NumberStyles.Integer Or NumberStyles.Number, provider As IFormatProvider = Nothing) As Decimal?
  overload: CodeJam.Strings.StringExtensions.ToDecimal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToDecimalInvariant(System.String,System.Globalization.NumberStyles)
  commentId: M:CodeJam.Strings.StringExtensions.ToDecimalInvariant(System.String,System.Globalization.NumberStyles)
  id: ToDecimalInvariant(System.String,System.Globalization.NumberStyles)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToDecimalInvariant(String, NumberStyles)
  nameWithType: StringExtensions.ToDecimalInvariant(String, NumberStyles)
  fullName: CodeJam.Strings.StringExtensions.ToDecimalInvariant(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.ToXxx.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToDecimalInvariant
    path: ../Main/src/Strings/StringExtensions.ToXxx.generated.cs
    startLine: 667
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the string representation of a number in a specified style and culture-invariant format to its\n<xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> equivalent. A return value indicates whether the conversion succeeded.\n"
  example: []
  syntax:
    content: public static decimal ? ToDecimalInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number)
    parameters:
    - id: str
      type: System.String
      description: "\nA string containing a number to convert. The string is interpreted using the style specified by\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numberStyle</code>.\n"
    - id: numberStyle
      type: System.Globalization.NumberStyles
      description: "\nA bitwise combination of enumeration values that indicates the style elements that can be present in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>. Default value is Number.\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\nWhen this method returns, contains the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value equivalent of the number contained in\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, if the conversion succeeded, or null if the conversion failed. The conversion fails if\nthe <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> parameter is null or String.Empty, is not in a format compliant withstyle, or\nrepresents a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDecimalInvariant(str As String, numberStyle As NumberStyles = NumberStyles.AllowLeadingWhite Or NumberStyles.AllowTrailingWhite Or NumberStyles.AllowLeadingSign Or NumberStyles.AllowTrailingSign Or NumberStyles.AllowDecimalPoint Or NumberStyles.AllowThousands Or NumberStyles.Integer Or NumberStyles.Number) As Decimal?
  overload: CodeJam.Strings.StringExtensions.ToDecimalInvariant*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.Substring(System.String,CodeJam.Strings.StringOrigin,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.Substring(System.String,CodeJam.Strings.StringOrigin,System.Int32)
  id: Substring(System.String,CodeJam.Strings.StringOrigin,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Substring(String, StringOrigin, Int32)
  nameWithType: StringExtensions.Substring(String, StringOrigin, Int32)
  fullName: CodeJam.Strings.StringExtensions.Substring(System.String, CodeJam.Strings.StringOrigin, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Substring
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 29
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nRetrieves a substring from <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>.\n"
  example: []
  syntax:
    content: public static string Substring(this string str, StringOrigin origin, int length)
    parameters:
    - id: str
      type: System.String
      description: "\nString to retrieve substring from.\n"
    - id: origin
      type: CodeJam.Strings.StringOrigin
      description: "\nSpecifies the beginning, or the end as a reference point for offset, using a value of type\n<xref href=\"CodeJam.Strings.StringOrigin\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    return:
      type: System.String
      description: "\nA string that is equivalent to the substring of length <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> that begins at\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">origin</code> in  <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, or Empty if length of <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>\nor <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code> is zero.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Substring(str As String, origin As StringOrigin, length As Integer) As String
  overload: CodeJam.Strings.StringExtensions.Substring*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.Prefix(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.Prefix(System.String,System.Int32)
  id: Prefix(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Prefix(String, Int32)
  nameWithType: StringExtensions.Prefix(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.Prefix(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Prefix
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 60
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nRetrieves prefix of length <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code>.\n"
  example: []
  syntax:
    content: public static string Prefix(this string str, int length)
    parameters:
    - id: str
      type: System.String
      description: String to retrieve prefix from.
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    return:
      type: System.String
      description: "\nPrefix of specified length, or <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> itself, if total length less than required.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Prefix(str As String, length As Integer) As String
  overload: CodeJam.Strings.StringExtensions.Prefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.Suffix(System.String,System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.Suffix(System.String,System.Int32)
  id: Suffix(System.String,System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Suffix(String, Int32)
  nameWithType: StringExtensions.Suffix(String, Int32)
  fullName: CodeJam.Strings.StringExtensions.Suffix(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Suffix
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 72
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nRetrieves prefix of length <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code>.\n"
  example: []
  syntax:
    content: public static string Suffix(this string str, int length)
    parameters:
    - id: str
      type: System.String
      description: String to retrieve suffix from.
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    return:
      type: System.String
      description: "\nSuffix of specified length, or <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> itself, if total length less than required.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Suffix(str As String, length As Integer) As String
  overload: CodeJam.Strings.StringExtensions.Suffix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String)
  id: TrimPrefix(System.String,System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: TrimPrefix(String, String)
  nameWithType: StringExtensions.TrimPrefix(String, String)
  fullName: CodeJam.Strings.StringExtensions.TrimPrefix(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimPrefix
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 82
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nTrims <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> prefix if it equals to <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefix</code>.\n"
  example: []
  syntax:
    content: public static string TrimPrefix(this string str, string prefix)
    parameters:
    - id: str
      type: System.String
      description: String to trim.
    - id: prefix
      type: System.String
      description: Prefix to trim.
    return:
      type: System.String
      description: Trimmed <code data-dev-comment-type="paramref" class="paramref">str</code>, or original <code data-dev-comment-type="paramref" class="paramref">str</code> if prefix not exists.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimPrefix(str As String, prefix As String) As String
  overload: CodeJam.Strings.StringExtensions.TrimPrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  commentId: M:CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  id: TrimPrefix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: TrimPrefix(String, String, IEqualityComparer<String>)
  nameWithType: StringExtensions.TrimPrefix(String, String, IEqualityComparer<String>)
  fullName: CodeJam.Strings.StringExtensions.TrimPrefix(System.String, System.String, System.Collections.Generic.IEqualityComparer<System.String>)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimPrefix
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 94
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nTrims <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> prefix if it equals to <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefix</code>.\n"
  example: []
  syntax:
    content: public static string TrimPrefix(this string str, string prefix, IEqualityComparer<string> comparer)
    parameters:
    - id: str
      type: System.String
      description: String to trim.
    - id: prefix
      type: System.String
      description: Prefix to trim.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{System.String}
      description: Comparer to compare value of prefix.
    return:
      type: System.String
      description: Trimmed <code data-dev-comment-type="paramref" class="paramref">str</code>, or original <code data-dev-comment-type="paramref" class="paramref">str</code> if prefix not exists.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimPrefix(str As String, prefix As String, comparer As IEqualityComparer(Of String)) As String
  overload: CodeJam.Strings.StringExtensions.TrimPrefix*
  nameWithType.vb: StringExtensions.TrimPrefix(String, String, IEqualityComparer(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.TrimPrefix(System.String, System.String, System.Collections.Generic.IEqualityComparer(Of System.String))
  name.vb: TrimPrefix(String, String, IEqualityComparer(Of String))
- uid: CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  commentId: M:CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  id: TrimSuffix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: TrimSuffix(String, String, IEqualityComparer<String>)
  nameWithType: StringExtensions.TrimSuffix(String, String, IEqualityComparer<String>)
  fullName: CodeJam.Strings.StringExtensions.TrimSuffix(System.String, System.String, System.Collections.Generic.IEqualityComparer<System.String>)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimSuffix
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 124
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nTrims <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> suffix if it equals to <code data-dev-comment-type=\"paramref\" class=\"paramref\">suffix</code>.\n"
  example: []
  syntax:
    content: public static string TrimSuffix(this string str, string suffix, IEqualityComparer<string> comparer)
    parameters:
    - id: str
      type: System.String
      description: String to trim.
    - id: suffix
      type: System.String
      description: Suffix to trim.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{System.String}
      description: Comparer to compare value of suffix.
    return:
      type: System.String
      description: "\nTrimmed <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, or original <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> if suffix does not exists.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimSuffix(str As String, suffix As String, comparer As IEqualityComparer(Of String)) As String
  overload: CodeJam.Strings.StringExtensions.TrimSuffix*
  nameWithType.vb: StringExtensions.TrimSuffix(String, String, IEqualityComparer(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.TrimSuffix(System.String, System.String, System.Collections.Generic.IEqualityComparer(Of System.String))
  name.vb: TrimSuffix(String, String, IEqualityComparer(Of String))
- uid: CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String)
  id: TrimSuffix(System.String,System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: TrimSuffix(String, String)
  nameWithType: StringExtensions.TrimSuffix(String, String)
  fullName: CodeJam.Strings.StringExtensions.TrimSuffix(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimSuffix
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 154
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nTrims <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> prefix if it equals to <code data-dev-comment-type=\"paramref\" class=\"paramref\">suffix</code>.\n"
  example: []
  syntax:
    content: public static string TrimSuffix(this string str, string suffix)
    parameters:
    - id: str
      type: System.String
      description: String to trim.
    - id: suffix
      type: System.String
      description: Suffix to trim.
    return:
      type: System.String
      description: "\nTrimmed <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code>, or original <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> if suffix does not exists.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimSuffix(str As String, suffix As String) As String
  overload: CodeJam.Strings.StringExtensions.TrimSuffix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64)
  commentId: M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64)
  id: ToByteSizeString(System.Int64)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToByteSizeString(Int64)
  nameWithType: StringExtensions.ToByteSizeString(Int64)
  fullName: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToByteSizeString
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 166
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReturns size in bytes string representation.\n"
  example: []
  syntax:
    content: public static string ToByteSizeString(this long value)
    parameters:
    - id: value
      type: System.Int64
      description: Value to represent.
    return:
      type: System.String
      description: Value as size in bytes
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToByteSizeString(value As Long) As String
  overload: CodeJam.Strings.StringExtensions.ToByteSizeString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32)
  commentId: M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32)
  id: ToByteSizeString(System.Int32)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToByteSizeString(Int32)
  nameWithType: StringExtensions.ToByteSizeString(Int32)
  fullName: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToByteSizeString
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 175
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReturns size in bytes string representation.\n"
  example: []
  syntax:
    content: public static string ToByteSizeString(this int value)
    parameters:
    - id: value
      type: System.Int32
      description: Value to represent.
    return:
      type: System.String
      description: Value as size in bytes
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToByteSizeString(value As Integer) As String
  overload: CodeJam.Strings.StringExtensions.ToByteSizeString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64,System.IFormatProvider)
  id: ToByteSizeString(System.Int64,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToByteSizeString(Int64, IFormatProvider)
  nameWithType: StringExtensions.ToByteSizeString(Int64, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToByteSizeString
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 185
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReturns size in bytes string representation.\n"
  example: []
  syntax:
    content: public static string ToByteSizeString(this long value, IFormatProvider provider)
    parameters:
    - id: value
      type: System.Int64
      description: Value to represent.
    - id: provider
      type: System.IFormatProvider
      description: Format provider for number part of value
    return:
      type: System.String
      description: Value as size in bytes
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToByteSizeString(value As Long, provider As IFormatProvider) As String
  overload: CodeJam.Strings.StringExtensions.ToByteSizeString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32,System.IFormatProvider)
  commentId: M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32,System.IFormatProvider)
  id: ToByteSizeString(System.Int32,System.IFormatProvider)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToByteSizeString(Int32, IFormatProvider)
  nameWithType: StringExtensions.ToByteSizeString(Int32, IFormatProvider)
  fullName: CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToByteSizeString
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 212
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReturns size in bytes string representation.\n"
  example: []
  syntax:
    content: public static string ToByteSizeString(this int value, IFormatProvider provider)
    parameters:
    - id: value
      type: System.Int32
      description: Value to represent.
    - id: provider
      type: System.IFormatProvider
      description: Format provider for number part of value
    return:
      type: System.String
      description: Value as size in bytes
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToByteSizeString(value As Integer, provider As IFormatProvider) As String
  overload: CodeJam.Strings.StringExtensions.ToByteSizeString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.SplitWithTrim(System.String,System.Char[])
  commentId: M:CodeJam.Strings.StringExtensions.SplitWithTrim(System.String,System.Char[])
  id: SplitWithTrim(System.String,System.Char[])
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: SplitWithTrim(String, Char[])
  nameWithType: StringExtensions.SplitWithTrim(String, Char[])
  fullName: CodeJam.Strings.StringExtensions.SplitWithTrim(System.String, System.Char[])
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SplitWithTrim
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 223
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nSplits <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> and returns whitespace trimmed parts.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> SplitWithTrim(this string source, params char[] separators)
    parameters:
    - id: source
      type: System.String
      description: Source string.
    - id: separators
      type: System.Char[]
      description: Separator chars
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Enumeration of parts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SplitWithTrim(source As String, ParamArray separators As Char()) As IEnumerable(Of String)
  overload: CodeJam.Strings.StringExtensions.SplitWithTrim*
  nameWithType.vb: StringExtensions.SplitWithTrim(String, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.SplitWithTrim(System.String, System.Char())
  name.vb: SplitWithTrim(String, Char())
- uid: CodeJam.Strings.StringExtensions.ToHexString(System.Byte[])
  commentId: M:CodeJam.Strings.StringExtensions.ToHexString(System.Byte[])
  id: ToHexString(System.Byte[])
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToHexString(Byte[])
  nameWithType: StringExtensions.ToHexString(Byte[])
  fullName: CodeJam.Strings.StringExtensions.ToHexString(System.Byte[])
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToHexString
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 244
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nCreates hex representation of byte array.\n"
  example: []
  syntax:
    content: public static string ToHexString(this byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
      description: Byte array.
    return:
      type: System.String
      description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> represented as a series of hexadecimal representations.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToHexString(data As Byte()) As String
  overload: CodeJam.Strings.StringExtensions.ToHexString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">data</code> is null.
  nameWithType.vb: StringExtensions.ToHexString(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.ToHexString(System.Byte())
  name.vb: ToHexString(Byte())
- uid: CodeJam.Strings.StringExtensions.ToHexString(System.Byte[],System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToHexString(System.Byte[],System.String)
  id: ToHexString(System.Byte[],System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToHexString(Byte[], String)
  nameWithType: StringExtensions.ToHexString(Byte[], String)
  fullName: CodeJam.Strings.StringExtensions.ToHexString(System.Byte[], System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToHexString
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 284
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nCreates hex representation of byte array.\n"
  example: []
  syntax:
    content: public static string ToHexString(this byte[] data, string byteSeparator)
    parameters:
    - id: data
      type: System.Byte[]
      description: Byte array.
    - id: byteSeparator
      type: System.String
      description: Separator between bytes. If null - no separator used.
    return:
      type: System.String
      description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code> represented as a series of hexadecimal representations divided by separator.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToHexString(data As Byte(), byteSeparator As String) As String
  overload: CodeJam.Strings.StringExtensions.ToHexString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">data</code> is null.
  nameWithType.vb: StringExtensions.ToHexString(Byte(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.ToHexString(System.Byte(), System.String)
  name.vb: ToHexString(Byte(), String)
- uid: CodeJam.Strings.StringExtensions.Unquote(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.Unquote(System.String)
  id: Unquote(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Unquote(String)
  nameWithType: StringExtensions.Unquote(String)
  fullName: CodeJam.Strings.StringExtensions.Unquote(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Unquote
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 330
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nRemove one set of leading and trailing double quote characters, if both are present.\n"
  example: []
  syntax:
    content: public static string Unquote(this string arg)
    parameters:
    - id: arg
      type: System.String
      description: String to unquote.
    return:
      type: System.String
      description: "\nUnquoted <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code>, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code> is quoted, or <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code> itself.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Unquote(arg As String) As String
  overload: CodeJam.Strings.StringExtensions.Unquote*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.Unquote(System.String,System.Boolean@)
  commentId: M:CodeJam.Strings.StringExtensions.Unquote(System.String,System.Boolean@)
  id: Unquote(System.String,System.Boolean@)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Unquote(String, out Boolean)
  nameWithType: StringExtensions.Unquote(String, out Boolean)
  fullName: CodeJam.Strings.StringExtensions.Unquote(System.String, out System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Unquote
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 342
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nRemove one set of leading and trailing double quote characters, if both are present.\n"
  example: []
  syntax:
    content: public static string Unquote(this string arg, out bool quoted)
    parameters:
    - id: arg
      type: System.String
      description: String to unquote.
    - id: quoted
      type: System.Boolean
      description: Set to true, if <code data-dev-comment-type="paramref" class="paramref">arg</code> was quoted.
    return:
      type: System.String
      description: "\nUnquoted <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code>, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code> is quoted, or <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code> itself.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Unquote(arg As String, ByRef quoted As Boolean) As String
  overload: CodeJam.Strings.StringExtensions.Unquote*
  nameWithType.vb: StringExtensions.Unquote(String, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.Unquote(System.String, ByRef System.Boolean)
  name.vb: Unquote(String, ByRef Boolean)
- uid: CodeJam.Strings.StringExtensions.Unquote(System.String,System.Char,System.Boolean@)
  commentId: M:CodeJam.Strings.StringExtensions.Unquote(System.String,System.Char,System.Boolean@)
  id: Unquote(System.String,System.Char,System.Boolean@)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Unquote(String, Char, out Boolean)
  nameWithType: StringExtensions.Unquote(String, Char, out Boolean)
  fullName: CodeJam.Strings.StringExtensions.Unquote(System.String, System.Char, out System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Unquote
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 355
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nRemove one set of leading and trailing d<code data-dev-comment-type=\"paramref\" class=\"paramref\">quotationChar</code>, if both are present.\n"
  example: []
  syntax:
    content: public static string Unquote(this string arg, char quotationChar, out bool quoted)
    parameters:
    - id: arg
      type: System.String
      description: String to unquote.
    - id: quotationChar
      type: System.Char
      description: Quotation char
    - id: quoted
      type: System.Boolean
      description: Set to true, if <code data-dev-comment-type="paramref" class="paramref">arg</code> was quoted.
    return:
      type: System.String
      description: "\nUnquoted <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code>, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code> is quoted, or <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code> itself.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Unquote(arg As String, quotationChar As Char, ByRef quoted As Boolean) As String
  overload: CodeJam.Strings.StringExtensions.Unquote*
  nameWithType.vb: StringExtensions.Unquote(String, Char, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.Unquote(System.String, System.Char, ByRef System.Boolean)
  name.vb: Unquote(String, Char, ByRef Boolean)
- uid: CodeJam.Strings.StringExtensions.Remove(System.String,System.String[])
  commentId: M:CodeJam.Strings.StringExtensions.Remove(System.String,System.String[])
  id: Remove(System.String,System.String[])
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Remove(String, String[])
  nameWithType: StringExtensions.Remove(String, String[])
  fullName: CodeJam.Strings.StringExtensions.Remove(System.String, System.String[])
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Remove
    path: ../Main/src/Strings/StringExtensions.cs
    startLine: 376
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nRemoves substring from provided strings.\n"
  example: []
  syntax:
    content: public static string Remove(this string str, params string[] toRemoveStrings)
    parameters:
    - id: str
      type: System.String
      description: String to remove.
    - id: toRemoveStrings
      type: System.String[]
      description: Substrings to remove.
    return:
      type: System.String
      description: New string without provided substrings.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Remove(str As String, ParamArray toRemoveStrings As String()) As String
  overload: CodeJam.Strings.StringExtensions.Remove*
  nameWithType.vb: StringExtensions.Remove(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.Remove(System.String, System.String())
  name.vb: Remove(String, String())
- uid: CodeJam.Strings.StringExtensions.IsNullOrEmpty(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsNullOrEmpty(System.String)
  id: IsNullOrEmpty(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(String)
  nameWithType: StringExtensions.IsNullOrEmpty(String)
  fullName: CodeJam.Strings.StringExtensions.IsNullOrEmpty(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNullOrEmpty
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nInfix form of <xref href=\"System.String.IsNullOrEmpty(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this string str)
    parameters:
    - id: str
      type: System.String
      description: The string.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">str</code> is null or empty; otherwise, <code>false</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsNullOrEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.NotNullNorEmpty(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.NotNullNorEmpty(System.String)
  id: NotNullNorEmpty(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: NotNullNorEmpty(String)
  nameWithType: StringExtensions.NotNullNorEmpty(String)
  fullName: CodeJam.Strings.StringExtensions.NotNullNorEmpty(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNullNorEmpty
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 32
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReturns true if argument is not null nor empty.\n"
  example: []
  syntax:
    content: public static bool NotNullNorEmpty(this string str)
    parameters:
    - id: str
      type: System.String
      description: The string.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">str</code> is not null nor empty; otherwise, <code>false</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNullNorEmpty(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.NotNullNorEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace(System.String)
  id: IsNullOrWhiteSpace(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrWhiteSpace(String)
  nameWithType: StringExtensions.IsNullOrWhiteSpace(String)
  fullName: CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNullOrWhiteSpace
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 43
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nInfix form of string.IsNullOrWhiteSpace.\n"
  example: []
  syntax:
    content: public static bool IsNullOrWhiteSpace(this string str)
    parameters:
    - id: str
      type: System.String
      description: The string.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is null, empty or contains only whitespaces; otherwise <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrWhiteSpace(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace(System.String)
  id: NotNullNorWhiteSpace(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: NotNullNorWhiteSpace(String)
  nameWithType: StringExtensions.NotNullNorWhiteSpace(String)
  fullName: CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNullNorWhiteSpace
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReturns true if argument is not null nor whitespace.\n"
  example: []
  syntax:
    content: public static bool NotNullNorWhiteSpace(this string str)
    parameters:
    - id: str
      type: System.String
      description: The string.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">str</code> is not null, nor empty or contains not only whitespaces;\notherwise <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNullNorWhiteSpace(str As String) As Boolean
  overload: CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object)
  commentId: M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object)
  id: FormatWith(System.String,System.Object)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: FormatWith(String, Object)
  nameWithType: StringExtensions.FormatWith(String, Object)
  fullName: CodeJam.Strings.StringExtensions.FormatWith(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FormatWith
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 70
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReplaces one or more format items in a specified string with the string representation of a specified object.\n"
  example: []
  syntax:
    content: public static string FormatWith(this string format, object arg)
    parameters:
    - id: format
      type: System.String
      description: A composite format string.
    - id: arg
      type: System.Object
      description: The object to format.
    return:
      type: System.String
      description: "\nA copy of <code data-dev-comment-type=\"paramref\" class=\"paramref\">format</code> in which any format items are replaced by the string representation of\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">arg</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FormatWith(format As String, arg As Object) As String
  overload: CodeJam.Strings.StringExtensions.FormatWith*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object)
  commentId: M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object)
  id: FormatWith(System.String,System.Object,System.Object)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: FormatWith(String, Object, Object)
  nameWithType: StringExtensions.FormatWith(String, Object, Object)
  fullName: CodeJam.Strings.StringExtensions.FormatWith(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FormatWith
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 85
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReplaces the format items in a specified string with the string representation of two specified objects.\n"
  example: []
  syntax:
    content: public static string FormatWith(this string format, object arg0, object arg1)
    parameters:
    - id: format
      type: System.String
      description: A composite format string.
    - id: arg0
      type: System.Object
      description: The first object to format.
    - id: arg1
      type: System.Object
      description: The second object to format.
    return:
      type: System.String
      description: "\nA copy of <code data-dev-comment-type=\"paramref\" class=\"paramref\">format</code> in which format items are replaced by the string representations\nof <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg0</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg1</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FormatWith(format As String, arg0 As Object, arg1 As Object) As String
  overload: CodeJam.Strings.StringExtensions.FormatWith*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)
  commentId: M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)
  id: FormatWith(System.String,System.Object,System.Object,System.Object)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: FormatWith(String, Object, Object, Object)
  nameWithType: StringExtensions.FormatWith(String, Object, Object, Object)
  fullName: CodeJam.Strings.StringExtensions.FormatWith(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FormatWith
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 101
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReplaces the format items in a specified string with the string representation of three specified objects.\n"
  example: []
  syntax:
    content: public static string FormatWith(this string format, object arg0, object arg1, object arg2)
    parameters:
    - id: format
      type: System.String
      description: A composite format string.
    - id: arg0
      type: System.Object
      description: The first object to format.
    - id: arg1
      type: System.Object
      description: The second object to format.
    - id: arg2
      type: System.Object
      description: The third object to format.
    return:
      type: System.String
      description: "\nA copy of <code data-dev-comment-type=\"paramref\" class=\"paramref\">format</code> in which the format items have been replaced by the string representations\nof <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg0</code>, <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg1</code>, and <code data-dev-comment-type=\"paramref\" class=\"paramref\">arg2</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FormatWith(format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String
  overload: CodeJam.Strings.StringExtensions.FormatWith*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object[])
  commentId: M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object[])
  id: FormatWith(System.String,System.Object[])
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: FormatWith(String, Object[])
  nameWithType: StringExtensions.FormatWith(String, Object[])
  fullName: CodeJam.Strings.StringExtensions.FormatWith(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FormatWith
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 116
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReplaces the format items in a specified string with the string representations\nof corresponding objects in a specified array.\n"
  example: []
  syntax:
    content: public static string FormatWith(this string format, params object[] args)
    parameters:
    - id: format
      type: System.String
      description: A composite format string.
    - id: args
      type: System.Object[]
      description: An object array that contains zero or more objects to format.
    return:
      type: System.String
      description: "\nA copy of format in which the format items have been replaced by the string representation of the corresponding\nobjects in args\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FormatWith(format As String, ParamArray args As Object()) As String
  overload: CodeJam.Strings.StringExtensions.FormatWith*
  nameWithType.vb: StringExtensions.FormatWith(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.FormatWith(System.String, System.Object())
  name.vb: FormatWith(String, Object())
- uid: CodeJam.Strings.StringExtensions.Join(System.String[],System.String)
  commentId: M:CodeJam.Strings.StringExtensions.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Join(String[], String)
  nameWithType: StringExtensions.Join(String[], String)
  fullName: CodeJam.Strings.StringExtensions.Join(System.String[], System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Join
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 136
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConcatenates all the elements of a string array, using the specified separator between each element.\n"
  remarks: "\nInfix form of <xref href=\"System.String.Join(System.String%2cSystem.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string Join(this string[] values, string separator)
    parameters:
    - id: values
      type: System.String[]
      description: An array that contains the elements to concatenate.
    - id: separator
      type: System.String
      description: "\nThe string to use as a separator. <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is included in the returned string only\nif <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> has more than one element.\n"
    return:
      type: System.String
      description: "\nA string that consists of the members of <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> delimited by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code>\nstring.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(values As String(), separator As String) As String
  overload: CodeJam.Strings.StringExtensions.Join*
  nameWithType.vb: StringExtensions.Join(String(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.Join(System.String(), System.String)
  name.vb: Join(String(), String)
- uid: CodeJam.Strings.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)
  commentId: M:CodeJam.Strings.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)
  id: Join(System.Collections.Generic.IEnumerable{System.String},System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Join(IEnumerable<String>, String)
  nameWithType: StringExtensions.Join(IEnumerable<String>, String)
  fullName: CodeJam.Strings.StringExtensions.Join(System.Collections.Generic.IEnumerable<System.String>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Join
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 157
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConcatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> collection of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>,\nusing the specified separator between each member.\n"
  remarks: "\nInfix form of string.Join(string,IEnumerable{string}).\n"
  example: []
  syntax:
    content: public static string Join(this IEnumerable<string> values, string separator)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A collection that contains the strings to concatenate.
    - id: separator
      type: System.String
      description: "\nThe string to use as a separator. <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is included in the returned string only\nif <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> has more than one element.\n"
    return:
      type: System.String
      description: "\nA string that consists of the members of <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> delimited by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code>\nstring.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(values As IEnumerable(Of String), separator As String) As String
  overload: CodeJam.Strings.StringExtensions.Join*
  nameWithType.vb: StringExtensions.Join(IEnumerable(Of String), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.Join(System.Collections.Generic.IEnumerable(Of System.String), System.String)
  name.vb: Join(IEnumerable(Of String), String)
- uid: CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: Join``1(System.Collections.Generic.IEnumerable{``0},System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Join<T>(IEnumerable<T>, String)
  nameWithType: StringExtensions.Join<T>(IEnumerable<T>, String)
  fullName: CodeJam.Strings.StringExtensions.Join<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Join
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 175
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConcatenates the members of a collection, using the specified separator between each member.\n"
  example: []
  syntax:
    content: public static string Join<T>(this IEnumerable<T> values, string separator)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A collection that contains the strings to concatenate.
    - id: separator
      type: System.String
      description: "\nThe string to use as a separator. <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is included in the returned string only\nif <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> has more than one element.\n"
    typeParameters:
    - id: T
    return:
      type: System.String
      description: "\nA string that consists of the members of <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> delimited by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code>\nstring.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of T)(values As IEnumerable(Of T), separator As String) As String
  overload: CodeJam.Strings.StringExtensions.Join*
  nameWithType.vb: StringExtensions.Join(Of T)(IEnumerable(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.Join(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: Join(Of T)(IEnumerable(Of T), String)
- uid: CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})
  id: Join``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Join<T>(IEnumerable<T>)
  nameWithType: StringExtensions.Join<T>(IEnumerable<T>)
  fullName: CodeJam.Strings.StringExtensions.Join<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Join
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 188
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConcatenates the members of a collection.\n"
  example: []
  syntax:
    content: public static string Join<T>(this IEnumerable<T> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A collection that contains the strings to concatenate.
    typeParameters:
    - id: T
    return:
      type: System.String
      description: "\nA string that consists of the members of <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code>.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of T)(values As IEnumerable(Of T)) As String
  overload: CodeJam.Strings.StringExtensions.Join*
  nameWithType.vb: StringExtensions.Join(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.Join(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Join(Of T)(IEnumerable(Of T))
- uid: CodeJam.Strings.StringExtensions.Length(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.Length(System.String)
  id: Length(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: Length(String)
  nameWithType: StringExtensions.Length(String)
  fullName: CodeJam.Strings.StringExtensions.Length(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Length
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 198
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nReturns length of argument, even if argument is null.\n"
  example: []
  syntax:
    content: public static int Length(this string str)
    parameters:
    - id: str
      type: System.String
      description: The string.
    return:
      type: System.Int32
      description: Length of the <code data-dev-comment-type="paramref" class="paramref">str</code> or 0, if <code data-dev-comment-type="paramref" class="paramref">str</code> is null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(str As String) As Integer
  overload: CodeJam.Strings.StringExtensions.Length*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.FromBase64(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.FromBase64(System.String)
  id: FromBase64(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: FromBase64(String)
  nameWithType: StringExtensions.FromBase64(String)
  fullName: CodeJam.Strings.StringExtensions.FromBase64(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FromBase64
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 206
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts the specified string, which encodes binary data as base-64 digits, to an equivalent byte array.\n"
  example: []
  syntax:
    content: public static byte[] FromBase64(this string str)
    parameters:
    - id: str
      type: System.String
      description: The string to convert.
    return:
      type: System.Byte[]
      description: An array of bytes that is equivalent to <code data-dev-comment-type="paramref" class="paramref">str</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FromBase64(str As String) As Byte()
  overload: CodeJam.Strings.StringExtensions.FromBase64*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToBase64(System.Byte[],System.Base64FormattingOptions)
  commentId: M:CodeJam.Strings.StringExtensions.ToBase64(System.Byte[],System.Base64FormattingOptions)
  id: ToBase64(System.Byte[],System.Base64FormattingOptions)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToBase64(Byte[], Base64FormattingOptions)
  nameWithType: StringExtensions.ToBase64(Byte[], Base64FormattingOptions)
  fullName: CodeJam.Strings.StringExtensions.ToBase64(System.Byte[], System.Base64FormattingOptions)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToBase64
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 220
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nConverts an array of bytes to its equivalent string representation that is encoded with base-64 digits.\nA parameter specifies whether to insert line breaks in the return value.\n"
  example: []
  syntax:
    content: public static string ToBase64(this byte[] data, Base64FormattingOptions options = Base64FormattingOptions.None)
    parameters:
    - id: data
      type: System.Byte[]
      description: an array of bytes.
    - id: options
      type: System.Base64FormattingOptions
      description: "\n<xref href=\"System.Base64FormattingOptions.InsertLineBreaks\" data-throw-if-not-resolved=\"false\"></xref> to insert a line break every 76 characters,\nor <xref href=\"System.Base64FormattingOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to not insert line breaks.\n"
    return:
      type: System.String
      description: The string representation in base 64 of the elements in <code data-dev-comment-type="paramref" class="paramref">data</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBase64(data As Byte(), options As Base64FormattingOptions = Base64FormattingOptions.None) As String
  overload: CodeJam.Strings.StringExtensions.ToBase64*
  nameWithType.vb: StringExtensions.ToBase64(Byte(), Base64FormattingOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Strings.StringExtensions.ToBase64(System.Byte(), System.Base64FormattingOptions)
  name.vb: ToBase64(Byte(), Base64FormattingOptions)
- uid: CodeJam.Strings.StringExtensions.ToBytes(System.String,System.Text.Encoding)
  commentId: M:CodeJam.Strings.StringExtensions.ToBytes(System.String,System.Text.Encoding)
  id: ToBytes(System.String,System.Text.Encoding)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToBytes(String, Encoding)
  nameWithType: StringExtensions.ToBytes(String, Encoding)
  fullName: CodeJam.Strings.StringExtensions.ToBytes(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToBytes
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 233
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nEncodes all the characters in the specified string into a sequence of bytes.\n"
  example: []
  syntax:
    content: public static byte[] ToBytes(this string str, Encoding encoding)
    parameters:
    - id: str
      type: System.String
      description: The string containing the characters to encode.
    - id: encoding
      type: System.Text.Encoding
      description: Encoding to convert.
    return:
      type: System.Byte[]
      description: A byte array containing the results of encoding the specified set of characters.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBytes(str As String, encoding As Encoding) As Byte()
  overload: CodeJam.Strings.StringExtensions.ToBytes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.StringExtensions.ToBytes(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToBytes(System.String)
  id: ToBytes(System.String)
  isExtensionMethod: true
  parent: CodeJam.Strings.StringExtensions
  langs:
  - csharp
  - vb
  name: ToBytes(String)
  nameWithType: StringExtensions.ToBytes(String)
  fullName: CodeJam.Strings.StringExtensions.ToBytes(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/StringExtensions.Infix.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToBytes
    path: ../Main/src/Strings/StringExtensions.Infix.cs
    startLine: 248
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nEncodes all the characters in the specified string into a sequence of bytes using UTF-8 encoding.\n"
  example: []
  syntax:
    content: public static byte[] ToBytes(this string str)
    parameters:
    - id: str
      type: System.String
      description: The string containing the characters to encode.
    return:
      type: System.Byte[]
      description: A byte array containing the results of encoding the specified set of characters.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBytes(str As String) As Byte()
  overload: CodeJam.Strings.StringExtensions.ToBytes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CodeJam.Strings
  commentId: N:CodeJam.Strings
  isExternal: false
  name: CodeJam.Strings
  nameWithType: CodeJam.Strings
  fullName: CodeJam.Strings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Strings.StringExtensions.IsControl*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsControl
  isExternal: false
  name: IsControl
  nameWithType: StringExtensions.IsControl
  fullName: CodeJam.Strings.StringExtensions.IsControl
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Strings.StringExtensions.IsHighSurrogate*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsHighSurrogate
  isExternal: false
  name: IsHighSurrogate
  nameWithType: StringExtensions.IsHighSurrogate
  fullName: CodeJam.Strings.StringExtensions.IsHighSurrogate
- uid: CodeJam.Strings.StringExtensions.IsLowSurrogate*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsLowSurrogate
  isExternal: false
  name: IsLowSurrogate
  nameWithType: StringExtensions.IsLowSurrogate
  fullName: CodeJam.Strings.StringExtensions.IsLowSurrogate
- uid: CodeJam.Strings.StringExtensions.IsDigit*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsDigit
  isExternal: false
  name: IsDigit
  nameWithType: StringExtensions.IsDigit
  fullName: CodeJam.Strings.StringExtensions.IsDigit
- uid: CodeJam.Strings.StringExtensions.IsLetter*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsLetter
  isExternal: false
  name: IsLetter
  nameWithType: StringExtensions.IsLetter
  fullName: CodeJam.Strings.StringExtensions.IsLetter
- uid: CodeJam.Strings.StringExtensions.IsLetterOrDigit*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsLetterOrDigit
  isExternal: false
  name: IsLetterOrDigit
  nameWithType: StringExtensions.IsLetterOrDigit
  fullName: CodeJam.Strings.StringExtensions.IsLetterOrDigit
- uid: CodeJam.Strings.StringExtensions.IsLower*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsLower
  isExternal: false
  name: IsLower
  nameWithType: StringExtensions.IsLower
  fullName: CodeJam.Strings.StringExtensions.IsLower
- uid: CodeJam.Strings.StringExtensions.IsUpper*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsUpper
  isExternal: false
  name: IsUpper
  nameWithType: StringExtensions.IsUpper
  fullName: CodeJam.Strings.StringExtensions.IsUpper
- uid: CodeJam.Strings.StringExtensions.IsNumber*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsNumber
  isExternal: false
  name: IsNumber
  nameWithType: StringExtensions.IsNumber
  fullName: CodeJam.Strings.StringExtensions.IsNumber
- uid: CodeJam.Strings.StringExtensions.IsPunctuation*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsPunctuation
  isExternal: false
  name: IsPunctuation
  nameWithType: StringExtensions.IsPunctuation
  fullName: CodeJam.Strings.StringExtensions.IsPunctuation
- uid: CodeJam.Strings.StringExtensions.IsSeparator*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsSeparator
  isExternal: false
  name: IsSeparator
  nameWithType: StringExtensions.IsSeparator
  fullName: CodeJam.Strings.StringExtensions.IsSeparator
- uid: CodeJam.Strings.StringExtensions.IsSurrogate*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsSurrogate
  isExternal: false
  name: IsSurrogate
  nameWithType: StringExtensions.IsSurrogate
  fullName: CodeJam.Strings.StringExtensions.IsSurrogate
- uid: CodeJam.Strings.StringExtensions.IsSurrogatePair*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsSurrogatePair
  isExternal: false
  name: IsSurrogatePair
  nameWithType: StringExtensions.IsSurrogatePair
  fullName: CodeJam.Strings.StringExtensions.IsSurrogatePair
- uid: CodeJam.Strings.StringExtensions.IsSymbol*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsSymbol
  isExternal: false
  name: IsSymbol
  nameWithType: StringExtensions.IsSymbol
  fullName: CodeJam.Strings.StringExtensions.IsSymbol
- uid: CodeJam.Strings.StringExtensions.IsWhiteSpace*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsWhiteSpace
  isExternal: false
  name: IsWhiteSpace
  nameWithType: StringExtensions.IsWhiteSpace
  fullName: CodeJam.Strings.StringExtensions.IsWhiteSpace
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInvariantString*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToInvariantString
  isExternal: false
  name: ToInvariantString
  nameWithType: StringExtensions.ToInvariantString
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Byte
  commentId: T:System.Byte
- uid: System.DateTime.MinValue
  commentId: F:System.DateTime.MinValue
- uid: System.DateTime.MaxValue
  commentId: F:System.DateTime.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToDateTime*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToDateTime
  isExternal: false
  name: ToDateTime
  nameWithType: StringExtensions.ToDateTime
  fullName: CodeJam.Strings.StringExtensions.ToDateTime
- uid: System.Globalization.DateTimeStyles
  commentId: T:System.Globalization.DateTimeStyles
  parent: System.Globalization
  isExternal: true
  name: DateTimeStyles
  nameWithType: DateTimeStyles
  fullName: System.Globalization.DateTimeStyles
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: false
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: CodeJam.Strings.StringExtensions.ToDateTimeInvariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToDateTimeInvariant
  isExternal: false
  name: ToDateTimeInvariant
  nameWithType: StringExtensions.ToDateTimeInvariant
  fullName: CodeJam.Strings.StringExtensions.ToDateTimeInvariant
- uid: System.Byte.MinValue
  commentId: F:System.Byte.MinValue
- uid: System.Byte.MaxValue
  commentId: F:System.Byte.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToByte*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToByte
  isExternal: false
  name: ToByte
  nameWithType: StringExtensions.ToByte
  fullName: CodeJam.Strings.StringExtensions.ToByte
- uid: System.Globalization.NumberStyles
  commentId: T:System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: true
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.Nullable{System.Byte}
  commentId: T:System.Nullable{System.Byte}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Byte>
  nameWithType: Nullable<Byte>
  fullName: System.Nullable<System.Byte>
  nameWithType.vb: Nullable(Of Byte)
  fullName.vb: System.Nullable(Of System.Byte)
  name.vb: Nullable(Of Byte)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToByteInvariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToByteInvariant
  isExternal: false
  name: ToByteInvariant
  nameWithType: StringExtensions.ToByteInvariant
  fullName: CodeJam.Strings.StringExtensions.ToByteInvariant
- uid: System.SByte
  commentId: T:System.SByte
- uid: System.SByte.MinValue
  commentId: F:System.SByte.MinValue
- uid: System.SByte.MaxValue
  commentId: F:System.SByte.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToSByte*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToSByte
  isExternal: false
  name: ToSByte
  nameWithType: StringExtensions.ToSByte
  fullName: CodeJam.Strings.StringExtensions.ToSByte
- uid: System.Nullable{System.SByte}
  commentId: T:System.Nullable{System.SByte}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SByte>
  nameWithType: Nullable<SByte>
  fullName: System.Nullable<System.SByte>
  nameWithType.vb: Nullable(Of SByte)
  fullName.vb: System.Nullable(Of System.SByte)
  name.vb: Nullable(Of SByte)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToSByteInvariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToSByteInvariant
  isExternal: false
  name: ToSByteInvariant
  nameWithType: StringExtensions.ToSByteInvariant
  fullName: CodeJam.Strings.StringExtensions.ToSByteInvariant
- uid: System.Int16
  commentId: T:System.Int16
- uid: System.Int16.MinValue
  commentId: F:System.Int16.MinValue
- uid: System.Int16.MaxValue
  commentId: F:System.Int16.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToInt16*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToInt16
  isExternal: false
  name: ToInt16
  nameWithType: StringExtensions.ToInt16
  fullName: CodeJam.Strings.StringExtensions.ToInt16
- uid: System.Nullable{System.Int16}
  commentId: T:System.Nullable{System.Int16}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int16>
  nameWithType: Nullable<Int16>
  fullName: System.Nullable<System.Int16>
  nameWithType.vb: Nullable(Of Int16)
  fullName.vb: System.Nullable(Of System.Int16)
  name.vb: Nullable(Of Int16)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInt16Invariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToInt16Invariant
  isExternal: false
  name: ToInt16Invariant
  nameWithType: StringExtensions.ToInt16Invariant
  fullName: CodeJam.Strings.StringExtensions.ToInt16Invariant
- uid: System.UInt16
  commentId: T:System.UInt16
- uid: System.UInt16.MinValue
  commentId: F:System.UInt16.MinValue
- uid: System.UInt16.MaxValue
  commentId: F:System.UInt16.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToUInt16*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToUInt16
  isExternal: false
  name: ToUInt16
  nameWithType: StringExtensions.ToUInt16
  fullName: CodeJam.Strings.StringExtensions.ToUInt16
- uid: System.Nullable{System.UInt16}
  commentId: T:System.Nullable{System.UInt16}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt16>
  nameWithType: Nullable<UInt16>
  fullName: System.Nullable<System.UInt16>
  nameWithType.vb: Nullable(Of UInt16)
  fullName.vb: System.Nullable(Of System.UInt16)
  name.vb: Nullable(Of UInt16)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToUInt16Invariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToUInt16Invariant
  isExternal: false
  name: ToUInt16Invariant
  nameWithType: StringExtensions.ToUInt16Invariant
  fullName: CodeJam.Strings.StringExtensions.ToUInt16Invariant
- uid: System.Int32.MinValue
  commentId: F:System.Int32.MinValue
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToInt32*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToInt32
  isExternal: false
  name: ToInt32
  nameWithType: StringExtensions.ToInt32
  fullName: CodeJam.Strings.StringExtensions.ToInt32
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInt32Invariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToInt32Invariant
  isExternal: false
  name: ToInt32Invariant
  nameWithType: StringExtensions.ToInt32Invariant
  fullName: CodeJam.Strings.StringExtensions.ToInt32Invariant
- uid: System.UInt32
  commentId: T:System.UInt32
- uid: System.UInt32.MinValue
  commentId: F:System.UInt32.MinValue
- uid: System.UInt32.MaxValue
  commentId: F:System.UInt32.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToUInt32*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToUInt32
  isExternal: false
  name: ToUInt32
  nameWithType: StringExtensions.ToUInt32
  fullName: CodeJam.Strings.StringExtensions.ToUInt32
- uid: System.Nullable{System.UInt32}
  commentId: T:System.Nullable{System.UInt32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt32>
  nameWithType: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  nameWithType.vb: Nullable(Of UInt32)
  fullName.vb: System.Nullable(Of System.UInt32)
  name.vb: Nullable(Of UInt32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToUInt32Invariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToUInt32Invariant
  isExternal: false
  name: ToUInt32Invariant
  nameWithType: StringExtensions.ToUInt32Invariant
  fullName: CodeJam.Strings.StringExtensions.ToUInt32Invariant
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64.MinValue
  commentId: F:System.Int64.MinValue
- uid: System.Int64.MaxValue
  commentId: F:System.Int64.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToInt64*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToInt64
  isExternal: false
  name: ToInt64
  nameWithType: StringExtensions.ToInt64
  fullName: CodeJam.Strings.StringExtensions.ToInt64
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInt64Invariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToInt64Invariant
  isExternal: false
  name: ToInt64Invariant
  nameWithType: StringExtensions.ToInt64Invariant
  fullName: CodeJam.Strings.StringExtensions.ToInt64Invariant
- uid: System.UInt64
  commentId: T:System.UInt64
- uid: System.UInt64.MinValue
  commentId: F:System.UInt64.MinValue
- uid: System.UInt64.MaxValue
  commentId: F:System.UInt64.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToUInt64*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToUInt64
  isExternal: false
  name: ToUInt64
  nameWithType: StringExtensions.ToUInt64
  fullName: CodeJam.Strings.StringExtensions.ToUInt64
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToUInt64Invariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToUInt64Invariant
  isExternal: false
  name: ToUInt64Invariant
  nameWithType: StringExtensions.ToUInt64Invariant
  fullName: CodeJam.Strings.StringExtensions.ToUInt64Invariant
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single.MinValue
  commentId: F:System.Single.MinValue
- uid: System.Single.MaxValue
  commentId: F:System.Single.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToSingle*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToSingle
  isExternal: false
  name: ToSingle
  nameWithType: StringExtensions.ToSingle
  fullName: CodeJam.Strings.StringExtensions.ToSingle
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToSingleInvariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToSingleInvariant
  isExternal: false
  name: ToSingleInvariant
  nameWithType: StringExtensions.ToSingleInvariant
  fullName: CodeJam.Strings.StringExtensions.ToSingleInvariant
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double.MinValue
  commentId: F:System.Double.MinValue
- uid: System.Double.MaxValue
  commentId: F:System.Double.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToDouble*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToDouble
  isExternal: false
  name: ToDouble
  nameWithType: StringExtensions.ToDouble
  fullName: CodeJam.Strings.StringExtensions.ToDouble
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToDoubleInvariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToDoubleInvariant
  isExternal: false
  name: ToDoubleInvariant
  nameWithType: StringExtensions.ToDoubleInvariant
  fullName: CodeJam.Strings.StringExtensions.ToDoubleInvariant
- uid: System.Decimal
  commentId: T:System.Decimal
- uid: System.Decimal.MinValue
  commentId: F:System.Decimal.MinValue
- uid: System.Decimal.MaxValue
  commentId: F:System.Decimal.MaxValue
- uid: CodeJam.Strings.StringExtensions.ToDecimal*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToDecimal
  isExternal: false
  name: ToDecimal
  nameWithType: StringExtensions.ToDecimal
  fullName: CodeJam.Strings.StringExtensions.ToDecimal
- uid: System.Nullable{System.Decimal}
  commentId: T:System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  nameWithType: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  nameWithType.vb: Nullable(Of Decimal)
  fullName.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToDecimalInvariant*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToDecimalInvariant
  isExternal: false
  name: ToDecimalInvariant
  nameWithType: StringExtensions.ToDecimalInvariant
  fullName: CodeJam.Strings.StringExtensions.ToDecimalInvariant
- uid: CodeJam.Strings.StringOrigin
  commentId: T:CodeJam.Strings.StringOrigin
  parent: CodeJam.Strings
  isExternal: false
  name: StringOrigin
  nameWithType: StringOrigin
  fullName: CodeJam.Strings.StringOrigin
- uid: CodeJam.Strings.StringExtensions.Substring*
  commentId: Overload:CodeJam.Strings.StringExtensions.Substring
  isExternal: false
  name: Substring
  nameWithType: StringExtensions.Substring
  fullName: CodeJam.Strings.StringExtensions.Substring
- uid: CodeJam.Strings.StringExtensions.Prefix*
  commentId: Overload:CodeJam.Strings.StringExtensions.Prefix
  isExternal: false
  name: Prefix
  nameWithType: StringExtensions.Prefix
  fullName: CodeJam.Strings.StringExtensions.Prefix
- uid: CodeJam.Strings.StringExtensions.Suffix*
  commentId: Overload:CodeJam.Strings.StringExtensions.Suffix
  isExternal: false
  name: Suffix
  nameWithType: StringExtensions.Suffix
  fullName: CodeJam.Strings.StringExtensions.Suffix
- uid: CodeJam.Strings.StringExtensions.TrimPrefix*
  commentId: Overload:CodeJam.Strings.StringExtensions.TrimPrefix
  isExternal: false
  name: TrimPrefix
  nameWithType: StringExtensions.TrimPrefix
  fullName: CodeJam.Strings.StringExtensions.TrimPrefix
- uid: System.Collections.Generic.IEqualityComparer{System.String}
  commentId: T:System.Collections.Generic.IEqualityComparer{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<String>
  nameWithType: IEqualityComparer<String>
  fullName: System.Collections.Generic.IEqualityComparer<System.String>
  nameWithType.vb: IEqualityComparer(Of String)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of System.String)
  name.vb: IEqualityComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Strings.StringExtensions.TrimSuffix*
  commentId: Overload:CodeJam.Strings.StringExtensions.TrimSuffix
  isExternal: false
  name: TrimSuffix
  nameWithType: StringExtensions.TrimSuffix
  fullName: CodeJam.Strings.StringExtensions.TrimSuffix
- uid: CodeJam.Strings.StringExtensions.ToByteSizeString*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToByteSizeString
  isExternal: false
  name: ToByteSizeString
  nameWithType: StringExtensions.ToByteSizeString
  fullName: CodeJam.Strings.StringExtensions.ToByteSizeString
- uid: CodeJam.Strings.StringExtensions.SplitWithTrim*
  commentId: Overload:CodeJam.Strings.StringExtensions.SplitWithTrim
  isExternal: false
  name: SplitWithTrim
  nameWithType: StringExtensions.SplitWithTrim
  fullName: CodeJam.Strings.StringExtensions.SplitWithTrim
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToHexString*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToHexString
  isExternal: false
  name: ToHexString
  nameWithType: StringExtensions.ToHexString
  fullName: CodeJam.Strings.StringExtensions.ToHexString
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  parent: System
  isExternal: true
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.Strings.StringExtensions.Unquote*
  commentId: Overload:CodeJam.Strings.StringExtensions.Unquote
  isExternal: false
  name: Unquote
  nameWithType: StringExtensions.Unquote
  fullName: CodeJam.Strings.StringExtensions.Unquote
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: CodeJam.Strings.StringExtensions.Remove*
  commentId: Overload:CodeJam.Strings.StringExtensions.Remove
  isExternal: false
  name: Remove
  nameWithType: StringExtensions.Remove
  fullName: CodeJam.Strings.StringExtensions.Remove
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String.IsNullOrEmpty(System.String)
  commentId: M:System.String.IsNullOrEmpty(System.String)
- uid: CodeJam.Strings.StringExtensions.IsNullOrEmpty*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsNullOrEmpty
  isExternal: false
  name: IsNullOrEmpty
  nameWithType: StringExtensions.IsNullOrEmpty
  fullName: CodeJam.Strings.StringExtensions.IsNullOrEmpty
- uid: CodeJam.Strings.StringExtensions.NotNullNorEmpty*
  commentId: Overload:CodeJam.Strings.StringExtensions.NotNullNorEmpty
  isExternal: false
  name: NotNullNorEmpty
  nameWithType: StringExtensions.NotNullNorEmpty
  fullName: CodeJam.Strings.StringExtensions.NotNullNorEmpty
- uid: CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace*
  commentId: Overload:CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace
  isExternal: false
  name: IsNullOrWhiteSpace
  nameWithType: StringExtensions.IsNullOrWhiteSpace
  fullName: CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace
- uid: CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace*
  commentId: Overload:CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace
  isExternal: false
  name: NotNullNorWhiteSpace
  nameWithType: StringExtensions.NotNullNorWhiteSpace
  fullName: CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace
- uid: CodeJam.Strings.StringExtensions.FormatWith*
  commentId: Overload:CodeJam.Strings.StringExtensions.FormatWith
  isExternal: false
  name: FormatWith
  nameWithType: StringExtensions.FormatWith
  fullName: CodeJam.Strings.StringExtensions.FormatWith
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String.Join(System.String,System.String[])
  commentId: M:System.String.Join(System.String,System.String[])
- uid: System.String.Empty
  commentId: F:System.String.Empty
- uid: CodeJam.Strings.StringExtensions.Join*
  commentId: Overload:CodeJam.Strings.StringExtensions.Join
  isExternal: false
  name: Join
  nameWithType: StringExtensions.Join
  fullName: CodeJam.Strings.StringExtensions.Join
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.Length*
  commentId: Overload:CodeJam.Strings.StringExtensions.Length
  isExternal: false
  name: Length
  nameWithType: StringExtensions.Length
  fullName: CodeJam.Strings.StringExtensions.Length
- uid: CodeJam.Strings.StringExtensions.FromBase64*
  commentId: Overload:CodeJam.Strings.StringExtensions.FromBase64
  isExternal: false
  name: FromBase64
  nameWithType: StringExtensions.FromBase64
  fullName: CodeJam.Strings.StringExtensions.FromBase64
- uid: System.Base64FormattingOptions.InsertLineBreaks
  commentId: F:System.Base64FormattingOptions.InsertLineBreaks
- uid: System.Base64FormattingOptions.None
  commentId: F:System.Base64FormattingOptions.None
- uid: CodeJam.Strings.StringExtensions.ToBase64*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToBase64
  isExternal: false
  name: ToBase64
  nameWithType: StringExtensions.ToBase64
  fullName: CodeJam.Strings.StringExtensions.ToBase64
- uid: System.Base64FormattingOptions
  commentId: T:System.Base64FormattingOptions
  parent: System
  isExternal: true
  name: Base64FormattingOptions
  nameWithType: Base64FormattingOptions
  fullName: System.Base64FormattingOptions
- uid: CodeJam.Strings.StringExtensions.ToBytes*
  commentId: Overload:CodeJam.Strings.StringExtensions.ToBytes
  isExternal: false
  name: ToBytes
  nameWithType: StringExtensions.ToBytes
  fullName: CodeJam.Strings.StringExtensions.ToBytes
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
