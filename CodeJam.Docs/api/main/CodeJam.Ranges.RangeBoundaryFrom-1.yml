### YamlMime:ManagedReference
items:
- uid: CodeJam.Ranges.RangeBoundaryFrom`1
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom`1
  id: RangeBoundaryFrom`1
  parent: CodeJam.Ranges
  children:
  - CodeJam.Ranges.RangeBoundaryFrom`1.#ctor(`0,CodeJam.Ranges.RangeBoundaryFromKind)
  - CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(`0)
  - CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.Empty
  - CodeJam.Ranges.RangeBoundaryFrom`1.Equals(CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.Equals(System.Object)
  - CodeJam.Ranges.RangeBoundaryFrom`1.GetComplementation
  - CodeJam.Ranges.RangeBoundaryFrom`1.GetHashCode
  - CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault
  - CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault(`0)
  - CodeJam.Ranges.RangeBoundaryFrom`1.HasValue
  - CodeJam.Ranges.RangeBoundaryFrom`1.IsComplementationFor(CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.IsEmpty
  - CodeJam.Ranges.RangeBoundaryFrom`1.IsExclusiveBoundary
  - CodeJam.Ranges.RangeBoundaryFrom`1.IsInclusiveBoundary
  - CodeJam.Ranges.RangeBoundaryFrom`1.IsNegativeInfinity
  - CodeJam.Ranges.RangeBoundaryFrom`1.IsNotEmpty
  - CodeJam.Ranges.RangeBoundaryFrom`1.Kind
  - CodeJam.Ranges.RangeBoundaryFrom`1.NegativeInfinity
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_Equality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_Inequality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.System#IComparable#CompareTo(System.Object)
  - CodeJam.Ranges.RangeBoundaryFrom`1.ToExclusive
  - CodeJam.Ranges.RangeBoundaryFrom`1.ToInclusive
  - CodeJam.Ranges.RangeBoundaryFrom`1.ToString
  - CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String)
  - CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String,System.IFormatProvider)
  - CodeJam.Ranges.RangeBoundaryFrom`1.Value
  - CodeJam.Ranges.RangeBoundaryFrom`1.WithValue(System.Func{`0,`0})
  - CodeJam.Ranges.RangeBoundaryFrom`1.WithValue``1(System.Func{`0,``0})
  langs:
  - csharp
  - vb
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  type: Struct
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RangeBoundaryFrom
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 25
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The From boundary of the range.
  remarks: "\nHeavy tuned to be as fast as it is possible.\nThe order of borders is the following: &apos;∅&apos; &lt; &apos;-∞&apos; &lt; &apos;a)&apos; &lt; &apos;[a&apos; == &apos;a]&apos; &lt; &apos;(a&apos; &lt; &apos;+∞&apos;.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct RangeBoundaryFrom<T> : IEquatable<RangeBoundaryFrom<T>>, IComparable<RangeBoundaryFrom<T>>, IComparable<RangeBoundaryTo<T>>, IComparable<T>, IComparable, IFormattable
    typeParameters:
    - id: T
      description: "\nThe type of the value. Should implement <xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: >-
      <Serializable>

      Public Structure RangeBoundaryFrom(Of T)
          Implements IEquatable(Of RangeBoundaryFrom(Of T)), IComparable(Of RangeBoundaryFrom(Of T)), IComparable(Of RangeBoundaryTo(Of T)), IComparable(Of T), IComparable, IFormattable
  implements:
  - System.IEquatable{CodeJam.Ranges.RangeBoundaryFrom`1}
  - System.IComparable{CodeJam.Ranges.RangeBoundaryFrom`1}
  - System.IComparable{CodeJam.Ranges.RangeBoundaryTo{{T}}}
  - System.IComparable{{T}}
  - System.IComparable
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.NullableHelper.AsNullable``1
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Strings.StringExtensions.ToInvariantString``1
  - CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: RangeBoundaryFrom(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_Equality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_Equality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_Equality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: Equality(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.Equality(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Equality(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Equality
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 25
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator ==.
  example: []
  syntax:
    content: public static bool operator ==(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 == boundary2.
    content.vb: Public Shared Operator =(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_Equality*
  nameWithType.vb: RangeBoundaryFrom(Of T).Equality(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Equality(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Equality(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_Inequality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_Inequality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_Inequality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: Inequality(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.Inequality(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Inequality(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Inequality
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator !=.
  example: []
  syntax:
    content: public static bool operator !=(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 != boundary2.
    content.vb: Public Shared Operator <>(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_Inequality*
  nameWithType.vb: RangeBoundaryFrom(Of T).Inequality(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Inequality(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Inequality(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThan(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.GreaterThan(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThan(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 43
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >.
  example: []
  syntax:
    content: public static bool operator>(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 > boundary2.
    content.vb: Public Shared Operator>(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThan(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThan(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: GreaterThan(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  id: op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThan(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: RangeBoundaryFrom<T>.GreaterThan(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThan(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 51
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >.
  example: []
  syntax:
    content: public static bool operator>(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 > boundary2.
    content.vb: Public Shared Operator>(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThan(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThan(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: GreaterThan(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  id: op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThan(RangeBoundaryFrom<T>, T)
  nameWithType: RangeBoundaryFrom<T>.GreaterThan(RangeBoundaryFrom<T>, T)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThan(CodeJam.Ranges.RangeBoundaryFrom<T>, T)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 59
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >.
  example: []
  syntax:
    content: public static bool operator>(RangeBoundaryFrom<T> boundary1, T boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: '{T}'
      description: The value of the boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 > boundary2.
    content.vb: Public Shared Operator>(boundary1 As RangeBoundaryFrom(Of T), boundary2 As T) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThan(RangeBoundaryFrom(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThan(CodeJam.Ranges.RangeBoundaryFrom(Of T), T)
  name.vb: GreaterThan(RangeBoundaryFrom(Of T), T)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_GreaterThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThan(T, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.GreaterThan(T, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThan(T, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 67
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >.
  example: []
  syntax:
    content: public static bool operator>(T boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: '{T}'
      description: The value of the boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 > boundary2.
    content.vb: Public Shared Operator>(boundary1 As T, boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThan(T, RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThan(T, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: GreaterThan(T, RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.GreaterThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 75
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >=.
  example: []
  syntax:
    content: public static bool operator >=(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 >= boundary2.
    content.vb: Public Shared Operator >=(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: GreaterThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  id: op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: RangeBoundaryFrom<T>.GreaterThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 83
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >=.
  example: []
  syntax:
    content: public static bool operator >=(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 >= boundary2.
    content.vb: Public Shared Operator >=(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: GreaterThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  id: op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(RangeBoundaryFrom<T>, T)
  nameWithType: RangeBoundaryFrom<T>.GreaterThanOrEqual(RangeBoundaryFrom<T>, T)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom<T>, T)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 91
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >=.
  example: []
  syntax:
    content: public static bool operator >=(RangeBoundaryFrom<T> boundary1, T boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: '{T}'
      description: The value of the boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 >= boundary2.
    content.vb: Public Shared Operator >=(boundary1 As RangeBoundaryFrom(Of T), boundary2 As T) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThanOrEqual(RangeBoundaryFrom(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom(Of T), T)
  name.vb: GreaterThanOrEqual(RangeBoundaryFrom(Of T), T)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_GreaterThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(T, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.GreaterThanOrEqual(T, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThanOrEqual(T, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_GreaterThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 99
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator >=.
  example: []
  syntax:
    content: public static bool operator >=(T boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: '{T}'
      description: The value of the boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 >= boundary2.
    content.vb: Public Shared Operator >=(boundary1 As T, boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThanOrEqual(T, RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThanOrEqual(T, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: GreaterThanOrEqual(T, RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThan(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.LessThan(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThan(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 107
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;.
  example: []
  syntax:
    content: public static bool operator <(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt; boundary2.
    content.vb: Public Shared Operator <(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThan(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThan(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: LessThan(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  id: op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThan(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: RangeBoundaryFrom<T>.LessThan(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThan(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 115
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;.
  example: []
  syntax:
    content: public static bool operator <(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt; boundary2.
    content.vb: Public Shared Operator <(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThan(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThan(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: LessThan(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  id: op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThan(RangeBoundaryFrom<T>, T)
  nameWithType: RangeBoundaryFrom<T>.LessThan(RangeBoundaryFrom<T>, T)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThan(CodeJam.Ranges.RangeBoundaryFrom<T>, T)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 123
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;.
  example: []
  syntax:
    content: public static bool operator <(RangeBoundaryFrom<T> boundary1, T boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: '{T}'
      description: The value of the boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt; boundary2.
    content.vb: Public Shared Operator <(boundary1 As RangeBoundaryFrom(Of T), boundary2 As T) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThan(RangeBoundaryFrom(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThan(CodeJam.Ranges.RangeBoundaryFrom(Of T), T)
  name.vb: LessThan(RangeBoundaryFrom(Of T), T)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_LessThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThan(T, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.LessThan(T, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThan(T, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThan
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 131
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;.
  example: []
  syntax:
    content: public static bool operator <(T boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: '{T}'
      description: The value of the boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt; boundary2.
    content.vb: Public Shared Operator <(boundary1 As T, boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThan(T, RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThan(T, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: LessThan(T, RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.LessThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 139
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;=.
  example: []
  syntax:
    content: public static bool operator <=(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt;= boundary2.
    content.vb: Public Shared Operator <=(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: LessThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  id: op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  nameWithType: RangeBoundaryFrom<T>.LessThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 147
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;=.
  example: []
  syntax:
    content: public static bool operator <=(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt;= boundary2.
    content.vb: Public Shared Operator <=(boundary1 As RangeBoundaryFrom(Of T), boundary2 As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: LessThanOrEqual(RangeBoundaryFrom(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  id: op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(RangeBoundaryFrom<T>, T)
  nameWithType: RangeBoundaryFrom<T>.LessThanOrEqual(RangeBoundaryFrom<T>, T)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom<T>, T)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 155
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;=.
  example: []
  syntax:
    content: public static bool operator <=(RangeBoundaryFrom<T> boundary1, T boundary2)
    parameters:
    - id: boundary1
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary1.
    - id: boundary2
      type: '{T}'
      description: The value of the boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt;= boundary2.
    content.vb: Public Shared Operator <=(boundary1 As RangeBoundaryFrom(Of T), boundary2 As T) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThanOrEqual(RangeBoundaryFrom(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom(Of T), T)
  name.vb: LessThanOrEqual(RangeBoundaryFrom(Of T), T)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: op_LessThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(T, RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.LessThanOrEqual(T, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThanOrEqual(T, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_LessThanOrEqual
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundary.Operators.generated.cs
    startLine: 163
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Implements the operator &lt;=.
  example: []
  syntax:
    content: public static bool operator <=(T boundary1, RangeBoundaryFrom<T> boundary2)
    parameters:
    - id: boundary1
      type: '{T}'
      description: The value of the boundary1.
    - id: boundary2
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary2.
    return:
      type: System.Boolean
      description: <code>True</code>, if boundary1 &lt;= boundary2.
    content.vb: Public Shared Operator <=(boundary1 As T, boundary2 As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual*
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThanOrEqual(T, RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThanOrEqual(T, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: LessThanOrEqual(T, RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Empty
  commentId: F:CodeJam.Ranges.RangeBoundaryFrom`1.Empty
  id: Empty
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: RangeBoundaryFrom<T>.Empty
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Empty
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Empty
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 113
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Empty range boundary, ∅.
  example: []
  syntax:
    content: public static readonly RangeBoundaryFrom<T> Empty
    return:
      type: CodeJam.Ranges.RangeBoundaryFrom`1
    content.vb: Public Shared ReadOnly Empty As RangeBoundaryFrom(Of T)
  nameWithType.vb: RangeBoundaryFrom(Of T).Empty
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Empty
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.NegativeInfinity
  commentId: F:CodeJam.Ranges.RangeBoundaryFrom`1.NegativeInfinity
  id: NegativeInfinity
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: NegativeInfinity
  nameWithType: RangeBoundaryFrom<T>.NegativeInfinity
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.NegativeInfinity
  type: Field
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NegativeInfinity
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 116
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Negative infinity, -∞.
  example: []
  syntax:
    content: public static readonly RangeBoundaryFrom<T> NegativeInfinity
    return:
      type: CodeJam.Ranges.RangeBoundaryFrom`1
    content.vb: Public Shared ReadOnly NegativeInfinity As RangeBoundaryFrom(Of T)
  nameWithType.vb: RangeBoundaryFrom(Of T).NegativeInfinity
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).NegativeInfinity
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.#ctor(`0,CodeJam.Ranges.RangeBoundaryFromKind)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.#ctor(`0,CodeJam.Ranges.RangeBoundaryFromKind)
  id: '#ctor(`0,CodeJam.Ranges.RangeBoundaryFromKind)'
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: RangeBoundaryFrom(T, RangeBoundaryFromKind)
  nameWithType: RangeBoundaryFrom<T>.RangeBoundaryFrom(T, RangeBoundaryFromKind)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.RangeBoundaryFrom(T, CodeJam.Ranges.RangeBoundaryFromKind)
  type: Constructor
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 137
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new range boundary.
  example: []
  syntax:
    content: public RangeBoundaryFrom(T value, RangeBoundaryFromKind boundaryKind)
    parameters:
    - id: value
      type: '{T}'
      description: "\nThe value of the boundary.\nInfinite (or empty) boundaries should use default(T) or NegativeInfinity(T) (if the type has one) as the value.\n"
    - id: boundaryKind
      type: CodeJam.Ranges.RangeBoundaryFromKind
      description: The kind of the boundary.
    content.vb: Public Sub New(value As T, boundaryKind As RangeBoundaryFromKind)
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.#ctor*
  nameWithType.vb: RangeBoundaryFrom(Of T).RangeBoundaryFrom(T, RangeBoundaryFromKind)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).RangeBoundaryFrom(T, CodeJam.Ranges.RangeBoundaryFromKind)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Kind
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.Kind
  id: Kind
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: Kind
  nameWithType: RangeBoundaryFrom<T>.Kind
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Kind
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Kind
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 202
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The kind of the boundary.
  example: []
  syntax:
    content: public RangeBoundaryFromKind Kind { get; }
    parameters: []
    return:
      type: CodeJam.Ranges.RangeBoundaryFromKind
      description: The kind of the boundary.
    content.vb: Public ReadOnly Property Kind As RangeBoundaryFromKind
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.Kind*
  nameWithType.vb: RangeBoundaryFrom(Of T).Kind
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Kind
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsEmpty
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.IsEmpty
  id: IsEmpty
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: RangeBoundaryFrom<T>.IsEmpty
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsEmpty
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 206
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The boundary == ∅.
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the boundary is empty; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.IsEmpty*
  nameWithType.vb: RangeBoundaryFrom(Of T).IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsEmpty
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsNotEmpty
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.IsNotEmpty
  id: IsNotEmpty
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: IsNotEmpty
  nameWithType: RangeBoundaryFrom<T>.IsNotEmpty
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsNotEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNotEmpty
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 212
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The boundary != ∅.
  example: []
  syntax:
    content: public bool IsNotEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the boundary is not empty; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsNotEmpty As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.IsNotEmpty*
  nameWithType.vb: RangeBoundaryFrom(Of T).IsNotEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsNotEmpty
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsNegativeInfinity
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.IsNegativeInfinity
  id: IsNegativeInfinity
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: IsNegativeInfinity
  nameWithType: RangeBoundaryFrom<T>.IsNegativeInfinity
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsNegativeInfinity
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNegativeInfinity
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 218
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The boundary == -∞.
  example: []
  syntax:
    content: public bool IsNegativeInfinity { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the boundary is negative infinity; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsNegativeInfinity As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.IsNegativeInfinity*
  nameWithType.vb: RangeBoundaryFrom(Of T).IsNegativeInfinity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsNegativeInfinity
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsInclusiveBoundary
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.IsInclusiveBoundary
  id: IsInclusiveBoundary
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: IsInclusiveBoundary
  nameWithType: RangeBoundaryFrom<T>.IsInclusiveBoundary
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsInclusiveBoundary
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsInclusiveBoundary
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 224
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The boundary includes the value.
  example: []
  syntax:
    content: public bool IsInclusiveBoundary { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the boundary is inclusive boundary; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsInclusiveBoundary As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.IsInclusiveBoundary*
  nameWithType.vb: RangeBoundaryFrom(Of T).IsInclusiveBoundary
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsInclusiveBoundary
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsExclusiveBoundary
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.IsExclusiveBoundary
  id: IsExclusiveBoundary
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: IsExclusiveBoundary
  nameWithType: RangeBoundaryFrom<T>.IsExclusiveBoundary
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsExclusiveBoundary
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsExclusiveBoundary
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 230
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The boundary does not include the value.
  example: []
  syntax:
    content: public bool IsExclusiveBoundary { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the boundary is exclusive boundary; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsExclusiveBoundary As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.IsExclusiveBoundary*
  nameWithType.vb: RangeBoundaryFrom(Of T).IsExclusiveBoundary
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsExclusiveBoundary
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.HasValue
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue
  id: HasValue
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: RangeBoundaryFrom<T>.HasValue
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.HasValue
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasValue
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 234
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The boundary has a value.
  example: []
  syntax:
    content: public bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the boundary has a value; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasValue As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.HasValue*
  nameWithType.vb: RangeBoundaryFrom(Of T).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).HasValue
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Value
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.Value
  id: Value
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: RangeBoundaryFrom<T>.Value
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Value
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Value
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 241
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The value of the boundary.
  example: []
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
      description: "\nThe value of the boundary of <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> if <xref href=\"CodeJam.Ranges.RangeBoundaryFrom%601.HasValue\" data-throw-if-not-resolved=\"false\"></xref> equals to <code>false</code>.\n"
    content.vb: Public ReadOnly Property Value As T
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.Value*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if <xref href="CodeJam.Ranges.RangeBoundaryFrom%601.HasValue" data-throw-if-not-resolved="false"></xref> equals to <code>false</code>.
  nameWithType.vb: RangeBoundaryFrom(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Value
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault
  id: GetValueOrDefault
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GetValueOrDefault()
  nameWithType: RangeBoundaryFrom<T>.GetValueOrDefault()
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GetValueOrDefault()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetValueOrDefault
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 260
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nThe value of the boundary or the default(T) if <xref href=\"CodeJam.Ranges.RangeBoundaryFrom%601.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property equals to <code>false</code>.\n"
  example: []
  syntax:
    content: public T GetValueOrDefault()
    return:
      type: '{T}'
      description: he value of the boundary or default(T).
    content.vb: Public Function GetValueOrDefault As T
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault*
  nameWithType.vb: RangeBoundaryFrom(Of T).GetValueOrDefault()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GetValueOrDefault()
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault(`0)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault(`0)
  id: GetValueOrDefault(`0)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GetValueOrDefault(T)
  nameWithType: RangeBoundaryFrom<T>.GetValueOrDefault(T)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GetValueOrDefault(T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetValueOrDefault
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 268
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nThe value of the boundary or the <code data-dev-comment-type=\"paramref\" class=\"paramref\">defaultValue</code> if <xref href=\"CodeJam.Ranges.RangeBoundaryFrom%601.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property equals to <code>false</code>.\n"
  example: []
  syntax:
    content: public T GetValueOrDefault(T defaultValue)
    parameters:
    - id: defaultValue
      type: '{T}'
      description: The default value.
    return:
      type: '{T}'
      description: Value of the boundary or <code data-dev-comment-type="paramref" class="paramref">defaultValue</code>.
    content.vb: Public Function GetValueOrDefault(defaultValue As T) As T
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault*
  nameWithType.vb: RangeBoundaryFrom(Of T).GetValueOrDefault(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GetValueOrDefault(T)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.GetComplementation
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.GetComplementation
  id: GetComplementation
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GetComplementation()
  nameWithType: RangeBoundaryFrom<T>.GetComplementation()
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GetComplementation()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetComplementation
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 283
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns complementation for the boundary. The conversions are:\n* &apos;a]&apos; -> &apos;(a&apos;\n* &apos;[a&apos; -> &apos;a)&apos;\n* &apos;a)&apos; -> &apos;[a&apos;\n* &apos;(a&apos; -> &apos;a]&apos;\nEmpty or infinite boundaries will throw. Check the <xref href=\"CodeJam.Ranges.RangeBoundaryFrom%601.HasValue\" data-throw-if-not-resolved=\"false\"></xref>\nbefore calling the method.\n"
  example: []
  syntax:
    content: public RangeBoundaryTo<T> GetComplementation()
    return:
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: Complementation for the boundary.
    content.vb: Public Function GetComplementation As RangeBoundaryTo(Of T)
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.GetComplementation*
  nameWithType.vb: RangeBoundaryFrom(Of T).GetComplementation()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GetComplementation()
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsComplementationFor(CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.IsComplementationFor(CodeJam.Ranges.RangeBoundaryTo{`0})
  id: IsComplementationFor(CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: IsComplementationFor(RangeBoundaryTo<T>)
  nameWithType: RangeBoundaryFrom<T>.IsComplementationFor(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsComplementationFor(CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsComplementationFor
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 305
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Checks that the boundary is complementation for specified boundary.
  example: []
  syntax:
    content: public bool IsComplementationFor(RangeBoundaryTo<T> other)
    parameters:
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: Another boundary.
    return:
      type: System.Boolean
      description: <code>True</code>, if the boundary is complementation for specified boundary.
    content.vb: Public Function IsComplementationFor(other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.IsComplementationFor*
  nameWithType.vb: RangeBoundaryFrom(Of T).IsComplementationFor(RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsComplementationFor(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: IsComplementationFor(RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.WithValue(System.Func{`0,`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.WithValue(System.Func{`0,`0})
  id: WithValue(System.Func{`0,`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: WithValue(Func<T, T>)
  nameWithType: RangeBoundaryFrom<T>.WithValue(Func<T, T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.WithValue(System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValue
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 314
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCreates a new boundary with updated value (if the current boundary has one).\nIf the boundary has no value the method returns the boundary unchanged.\n"
  example: []
  syntax:
    content: public RangeBoundaryFrom<T> WithValue(Func<T, T> newValueSelector)
    parameters:
    - id: newValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the boundary. Used if the boundary has a value.
    return:
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: Range boundary with the same kind but with a new value (if the current boundary has one).
    content.vb: Public Function WithValue(newValueSelector As Func(Of T, T)) As RangeBoundaryFrom(Of T)
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.WithValue*
  nameWithType.vb: RangeBoundaryFrom(Of T).WithValue(Func(Of T, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).WithValue(System.Func(Of T, T))
  name.vb: WithValue(Func(Of T, T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.WithValue``1(System.Func{`0,``0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.WithValue``1(System.Func{`0,``0})
  id: WithValue``1(System.Func{`0,``0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: WithValue<T2>(Func<T, T2>)
  nameWithType: RangeBoundaryFrom<T>.WithValue<T2>(Func<T, T2>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.WithValue<T2>(System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValue
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 334
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCreates a new boundary with updated value (if the current boundary has one).\nIf the boundary has no value the method returns the boundary unchanged.\n"
  example: []
  syntax:
    content: public RangeBoundaryFrom<T2> WithValue<T2>(Func<T, T2> newValueSelector)
    parameters:
    - id: newValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the boundary. Used if the boundary has a value.
    typeParameters:
    - id: T2
      description: The new type of the range value
    return:
      type: CodeJam.Ranges.RangeBoundaryFrom{{T2}}
      description: Range boundary with the same kind but with a new value (if the current boundary has one).
    content.vb: Public Function WithValue(Of T2)(newValueSelector As Func(Of T, T2)) As RangeBoundaryFrom(Of T2)
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.WithValue*
  nameWithType.vb: RangeBoundaryFrom(Of T).WithValue(Of T2)(Func(Of T, T2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).WithValue(Of T2)(System.Func(Of T, T2))
  name.vb: WithValue(Of T2)(Func(Of T, T2))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToExclusive
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.ToExclusive
  id: ToExclusive
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: ToExclusive()
  nameWithType: RangeBoundaryFrom<T>.ToExclusive()
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToExclusive()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToExclusive
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 356
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCreates a new boundary with exclusive boundary kind if the current boundary has a value.\nThe original boundary is returned otherwise.\n"
  example: []
  syntax:
    content: public RangeBoundaryFrom<T> ToExclusive()
    return:
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: "\nRange boundary with exclusive boundary kind or the original one if the boundary has no value.\n"
    content.vb: Public Function ToExclusive As RangeBoundaryFrom(Of T)
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.ToExclusive*
  nameWithType.vb: RangeBoundaryFrom(Of T).ToExclusive()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToExclusive()
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToInclusive
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.ToInclusive
  id: ToInclusive
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: ToInclusive()
  nameWithType: RangeBoundaryFrom<T>.ToInclusive()
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToInclusive()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToInclusive
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 366
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCreates a new boundary with inclusive boundary kind if the current boundary has a value.\nThe original boundary is returned otherwise.\n"
  example: []
  syntax:
    content: public RangeBoundaryFrom<T> ToInclusive()
    return:
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: "\nRange boundary with inclusive boundary kind or the original one if the boundary has no value.\n"
    content.vb: Public Function ToInclusive As RangeBoundaryFrom(Of T)
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.ToInclusive*
  nameWithType.vb: RangeBoundaryFrom(Of T).ToInclusive()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToInclusive()
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Equals(CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.Equals(CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: Equals(CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: Equals(RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.Equals(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Equals(CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 377
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Indicates whether the current boundary is equal to another.
  example: []
  syntax:
    content: public bool Equals(RangeBoundaryFrom<T> other)
    parameters:
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: The boundary to compare with this.
    return:
      type: System.Boolean
      description: "\n<code>True</code> if the current boundary is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter;\notherwise, false.\n"
    content.vb: Public Function Equals(other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.Equals*
  implements:
  - System.IEquatable{CodeJam.Ranges.RangeBoundaryFrom`1}.Equals(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  nameWithType.vb: RangeBoundaryFrom(Of T).Equals(RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Equals(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Equals(RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Equals(System.Object)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: RangeBoundaryFrom<T>.Equals(Object)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 387
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Indicates whether the current boundary and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with this. '
    return:
      type: System.Boolean
      description: "\n<code>True</code> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and the current boundary are the same type\nand represent the same value; otherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.Equals*
  nameWithType.vb: RangeBoundaryFrom(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Equals(System.Object)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.GetHashCode
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.GetHashCode
  id: GetHashCode
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: RangeBoundaryFrom<T>.GetHashCode()
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 392
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns the hash code for the current boundary.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.GetHashCode*
  nameWithType.vb: RangeBoundaryFrom(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GetHashCode()
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{`0})
  id: CompareTo(CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: CompareTo(RangeBoundaryFrom<T>)
  nameWithType: RangeBoundaryFrom<T>.CompareTo(RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.CompareTo(CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CompareTo
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 418
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCompares the current boundary with another one. Following order is used:\n&apos;∅&apos; &lt; &apos;-∞&apos; &lt; &apos;a)&apos; &lt; &apos;[a&apos; == &apos;a]&apos; &lt; &apos;(a&apos; &lt; &apos;+∞&apos;.\n"
  example: []
  syntax:
    content: public int CompareTo(RangeBoundaryFrom<T> other)
    parameters:
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom`1
      description: Boundary to compare with this.
    return:
      type: System.Int32
      description: "\nA value that indicates the relative order of the objects being compared.\nThe return value has the following meanings:\n* Less than zero This object is less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter.\n* Zero This object is equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.\n* Greater than zero This object is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.\n"
    content.vb: Public Function CompareTo(other As RangeBoundaryFrom(Of T)) As Integer
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo*
  implements:
  - System.IComparable{CodeJam.Ranges.RangeBoundaryFrom`1}.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  nameWithType.vb: RangeBoundaryFrom(Of T).CompareTo(RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).CompareTo(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: CompareTo(RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryTo{`0})
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryTo{`0})
  id: CompareTo(CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: CompareTo(RangeBoundaryTo<T>)
  nameWithType: RangeBoundaryFrom<T>.CompareTo(RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.CompareTo(CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CompareTo
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 455
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCompares the current boundary with another one. Following order is used:\n&apos;∅&apos; &lt; &apos;-∞&apos; &lt; &apos;a)&apos; &lt; &apos;[a&apos; == &apos;a]&apos; &lt; &apos;(a&apos; &lt; &apos;+∞&apos;.\n"
  example: []
  syntax:
    content: public int CompareTo(RangeBoundaryTo<T> other)
    parameters:
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: Boundary to compare with this.
    return:
      type: System.Int32
      description: "\nA value that indicates the relative order of the objects being compared.\nThe return value has the following meanings:\n* Less than zero This object is less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter.\n* Zero This object is equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.\n* Greater than zero This object is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.\n"
    content.vb: Public Function CompareTo(other As RangeBoundaryTo(Of T)) As Integer
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo*
  implements:
  - System.IComparable{CodeJam.Ranges.RangeBoundaryTo{{T}}}.CompareTo(CodeJam.Ranges.RangeBoundaryTo{{T}})
  nameWithType.vb: RangeBoundaryFrom(Of T).CompareTo(RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).CompareTo(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: CompareTo(RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(`0)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(`0)
  id: CompareTo(`0)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: CompareTo(T)
  nameWithType: RangeBoundaryFrom<T>.CompareTo(T)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.CompareTo(T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CompareTo
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 497
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCompares the current boundary with the value of another From boundary. Following order is used:\n&apos;∅&apos; &lt; &apos;-∞&apos; &lt; &apos;a)&apos; &lt; &apos;[a&apos; == &apos;a]&apos; &lt; &apos;(a&apos; &lt; &apos;+∞&apos;.\n"
  example: []
  syntax:
    content: public int CompareTo(T other)
    parameters:
    - id: other
      type: '{T}'
      description: Boundary value to compare with this.
    return:
      type: System.Int32
      description: "\nA value that indicates the relative order of the objects being compared.\nThe return value has the following meanings:\n* Less than zero This object is less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter.\n* Zero This object is equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.\n* Greater than zero This object is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.\n"
    content.vb: Public Function CompareTo(other As T) As Integer
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo*
  implements:
  - System.IComparable{{T}}.CompareTo({T})
  nameWithType.vb: RangeBoundaryFrom(Of T).CompareTo(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).CompareTo(T)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.System#IComparable#CompareTo(System.Object)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: RangeBoundaryFrom<T>.IComparable.CompareTo(Object)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: System.IComparable.CompareTo
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 516
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nCompares the current boundary with the boundary or with the value of another boundary of the same kind. Following order is used:\n&apos;∅&apos; &lt; &apos;-∞&apos; &lt; &apos;a)&apos; &lt; &apos;[a&apos; == &apos;a]&apos; &lt; &apos;(a&apos; &lt; &apos;+∞&apos;.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this object.
    return:
      type: System.Int32
      description: "\nA value that indicates the relative order of the objects being compared.\nThe return value has the following meanings:\n* Less than zero This object is less than the <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> parameter.\n* Zero This object is equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code>.\n* Greater than zero This object is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code>.\n"
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.System#IComparable#CompareTo*
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: RangeBoundaryFrom(Of T).System.IComparable.CompareTo(Object)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToString
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.ToString
  id: ToString
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RangeBoundaryFrom<T>.ToString()
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToString()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 539
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: 'Returns string representation of the boundary. '
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: 'The string representation of the boundary. '
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.ToString*
  nameWithType.vb: RangeBoundaryFrom(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToString()
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String)
  id: ToString(System.String)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: ToString(String)
  nameWithType: RangeBoundaryFrom<T>.ToString(String)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToString(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 573
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the boundary using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored\n"
  example: []
  syntax:
    content: public string ToString(string format)
    parameters:
    - id: format
      type: System.String
      description: The format string
    return:
      type: System.String
      description: 'The string representation of the boundary. '
    content.vb: Public Function ToString(format As String) As String
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.ToString*
  nameWithType.vb: RangeBoundaryFrom(Of T).ToString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToString(System.String)
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String,System.IFormatProvider)
  commentId: M:CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: CodeJam.Ranges.RangeBoundaryFrom`1
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: RangeBoundaryFrom<T>.ToString(String, IFormatProvider)
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Boundaries]/RangeBoundaryFrom`1.cs
    startLine: 583
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the boundary using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored\n"
  example: []
  syntax:
    content: public string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
      description: The format string
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider
    return:
      type: System.String
      description: 'The string representation of the boundary. '
    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: CodeJam.Ranges.RangeBoundaryFrom`1.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: RangeBoundaryFrom(Of T).ToString(String, IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToString(System.String, System.IFormatProvider)
references:
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: System.IEquatable{CodeJam.Ranges.RangeBoundaryFrom`1}
  commentId: T:System.IEquatable{CodeJam.Ranges.RangeBoundaryFrom`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<RangeBoundaryFrom<T>>
  nameWithType: IEquatable<RangeBoundaryFrom<T>>
  fullName: System.IEquatable<CodeJam.Ranges.RangeBoundaryFrom<T>>
  nameWithType.vb: IEquatable(Of RangeBoundaryFrom(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: IEquatable(Of RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{CodeJam.Ranges.RangeBoundaryFrom`1}
  commentId: T:System.IComparable{CodeJam.Ranges.RangeBoundaryFrom`1}
  parent: System
  definition: System.IComparable`1
  name: IComparable<RangeBoundaryFrom<T>>
  nameWithType: IComparable<RangeBoundaryFrom<T>>
  fullName: System.IComparable<CodeJam.Ranges.RangeBoundaryFrom<T>>
  nameWithType.vb: IComparable(Of RangeBoundaryFrom(Of T))
  fullName.vb: System.IComparable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: IComparable(Of RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{CodeJam.Ranges.RangeBoundaryTo{{T}}}
  commentId: T:System.IComparable{CodeJam.Ranges.RangeBoundaryTo{`0}}
  parent: System
  definition: System.IComparable`1
  name: IComparable<RangeBoundaryTo<T>>
  nameWithType: IComparable<RangeBoundaryTo<T>>
  fullName: System.IComparable<CodeJam.Ranges.RangeBoundaryTo<T>>
  nameWithType.vb: IComparable(Of RangeBoundaryTo(Of T))
  fullName.vb: System.IComparable(Of CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: IComparable(Of RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{{T}}
  commentId: T:System.IComparable{`0}
  parent: System
  definition: System.IComparable`1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.NullableHelper.AsNullable``1
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  parent: CodeJam.NullableHelper
  definition: CodeJam.NullableHelper.AsNullable``1(``0)
  name: AsNullable<RangeBoundaryFrom<T>>()
  nameWithType: NullableHelper.AsNullable<RangeBoundaryFrom<T>>()
  fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.RangeBoundaryFrom<T>>()
  nameWithType.vb: NullableHelper.AsNullable(Of RangeBoundaryFrom(Of T))()
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))()
  name.vb: AsNullable(Of RangeBoundaryFrom(Of T))()
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable<RangeBoundaryFrom<T>>
    nameWithType: NullableHelper.AsNullable<RangeBoundaryFrom<T>>
    fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable(Of RangeBoundaryFrom(Of T))
    nameWithType: NullableHelper.AsNullable(Of RangeBoundaryFrom(Of T))
    fullName: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, RangeBoundaryFrom<T>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, RangeBoundaryFrom<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.RangeBoundaryFrom<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, RangeBoundaryFrom(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.RangeBoundaryFrom(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, RangeBoundaryFrom(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, RangeBoundaryFrom<T>>
    nameWithType: RangeExtensions.Contains<T, RangeBoundaryFrom<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, RangeBoundaryFrom(Of T))
    nameWithType: RangeExtensions.Contains(Of T, RangeBoundaryFrom(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, RangeBoundaryFrom<T>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, RangeBoundaryFrom<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.RangeBoundaryFrom<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, RangeBoundaryFrom(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.RangeBoundaryFrom(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, RangeBoundaryFrom(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, RangeBoundaryFrom<T>>
    nameWithType: RangeExtensions.StartsAfter<T, RangeBoundaryFrom<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, RangeBoundaryFrom(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, RangeBoundaryFrom(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, RangeBoundaryFrom<T>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, RangeBoundaryFrom<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.RangeBoundaryFrom<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, RangeBoundaryFrom(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.RangeBoundaryFrom(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, RangeBoundaryFrom(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, RangeBoundaryFrom<T>>
    nameWithType: RangeExtensions.EndsBefore<T, RangeBoundaryFrom<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, RangeBoundaryFrom(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, RangeBoundaryFrom(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, RangeBoundaryFrom<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, RangeBoundaryFrom<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.RangeBoundaryFrom<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, RangeBoundaryFrom(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.RangeBoundaryFrom(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, RangeBoundaryFrom(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, RangeBoundaryFrom<T>>
    nameWithType: RangeExtensions.Contains<T, TKey, RangeBoundaryFrom<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, RangeBoundaryFrom(Of T))
    nameWithType: RangeExtensions.Contains(Of T, TKey, RangeBoundaryFrom(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, RangeBoundaryFrom<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, RangeBoundaryFrom<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.RangeBoundaryFrom<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, RangeBoundaryFrom(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.RangeBoundaryFrom(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, RangeBoundaryFrom(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, RangeBoundaryFrom<T>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, RangeBoundaryFrom<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, RangeBoundaryFrom(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, RangeBoundaryFrom(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, RangeBoundaryFrom<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, RangeBoundaryFrom<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.RangeBoundaryFrom<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, RangeBoundaryFrom(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.RangeBoundaryFrom(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, RangeBoundaryFrom(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, RangeBoundaryFrom<T>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, RangeBoundaryFrom<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, RangeBoundaryFrom(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, RangeBoundaryFrom(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Strings.StringExtensions.ToInvariantString``1
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  name: ToInvariantString<RangeBoundaryFrom<T>>()
  nameWithType: StringExtensions.ToInvariantString<RangeBoundaryFrom<T>>()
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryFrom<T>>()
  nameWithType.vb: StringExtensions.ToInvariantString(Of RangeBoundaryFrom(Of T))()
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))()
  name.vb: ToInvariantString(Of RangeBoundaryFrom(Of T))()
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString<RangeBoundaryFrom<T>>
    nameWithType: StringExtensions.ToInvariantString<RangeBoundaryFrom<T>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString(Of RangeBoundaryFrom(Of T))
    nameWithType: StringExtensions.ToInvariantString(Of RangeBoundaryFrom(Of T))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  name: ToInvariantString<RangeBoundaryFrom<T>>(String)
  nameWithType: StringExtensions.ToInvariantString<RangeBoundaryFrom<T>>(String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryFrom<T>>(System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of RangeBoundaryFrom(Of T))(String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))(System.String)
  name.vb: ToInvariantString(Of RangeBoundaryFrom(Of T))(String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString<RangeBoundaryFrom<T>>
    nameWithType: StringExtensions.ToInvariantString<RangeBoundaryFrom<T>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeBoundaryFrom<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString(Of RangeBoundaryFrom(Of T))
    nameWithType: StringExtensions.ToInvariantString(Of RangeBoundaryFrom(Of T))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeBoundaryFrom(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.NullableHelper.AsNullable``1(``0)
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  isExternal: false
  name: AsNullable<T>(T)
  nameWithType: NullableHelper.AsNullable<T>(T)
  fullName: CodeJam.NullableHelper.AsNullable<T>(T)
  nameWithType.vb: NullableHelper.AsNullable(Of T)(T)
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of T)(T)
  name.vb: AsNullable(Of T)(T)
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable<T>
    nameWithType: NullableHelper.AsNullable<T>
    fullName: CodeJam.NullableHelper.AsNullable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable(Of T)
    nameWithType: NullableHelper.AsNullable(Of T)
    fullName: CodeJam.NullableHelper.AsNullable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper
  commentId: T:CodeJam.NullableHelper
  parent: CodeJam
  isExternal: false
  name: NullableHelper
  nameWithType: NullableHelper
  fullName: CodeJam.NullableHelper
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  isExternal: false
  name: ToInvariantString<T>(T)
  nameWithType: StringExtensions.ToInvariantString<T>(T)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T)
  name.vb: ToInvariantString(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions
  commentId: T:CodeJam.Strings.StringExtensions
  parent: CodeJam.Strings
  isExternal: false
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: CodeJam.Strings.StringExtensions
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  isExternal: true
  name: ToInvariantString<T>(T, String)
  nameWithType: StringExtensions.ToInvariantString<T>(T, String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T, System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T, String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T, System.String)
  name.vb: ToInvariantString(Of T)(T, String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.Strings
  commentId: N:CodeJam.Strings
  isExternal: false
  name: CodeJam.Strings
  nameWithType: CodeJam.Strings
  fullName: CodeJam.Strings
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_Equality*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.op_Equality
  isExternal: false
  name: Equality
  nameWithType: RangeBoundaryFrom<T>.Equality
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Equality
  nameWithType.vb: RangeBoundaryFrom(Of T).Equality
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Equality
- uid: CodeJam.Ranges.RangeBoundaryFrom`1
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  nameWithType.vb: RangeBoundaryFrom(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_Inequality*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: RangeBoundaryFrom<T>.Inequality
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Inequality
  nameWithType.vb: RangeBoundaryFrom(Of T).Inequality
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Inequality
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan
  isExternal: false
  name: GreaterThan
  nameWithType: RangeBoundaryFrom<T>.GreaterThan
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThan
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThan
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThan
- uid: CodeJam.Ranges.RangeBoundaryTo{{T}}
  commentId: T:CodeJam.Ranges.RangeBoundaryTo{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryTo`1
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryTo`1
  commentId: T:CodeJam.Ranges.RangeBoundaryTo`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: RangeBoundaryFrom<T>.GreaterThanOrEqual
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GreaterThanOrEqual
  nameWithType.vb: RangeBoundaryFrom(Of T).GreaterThanOrEqual
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GreaterThanOrEqual
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan
  isExternal: false
  name: LessThan
  nameWithType: RangeBoundaryFrom<T>.LessThan
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThan
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThan
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThan
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual
  isExternal: false
  name: LessThanOrEqual
  nameWithType: RangeBoundaryFrom<T>.LessThanOrEqual
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.LessThanOrEqual
  nameWithType.vb: RangeBoundaryFrom(Of T).LessThanOrEqual
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).LessThanOrEqual
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.#ctor*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.#ctor
  isExternal: false
  name: RangeBoundaryFrom
  nameWithType: RangeBoundaryFrom<T>.RangeBoundaryFrom
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.RangeBoundaryFrom
  nameWithType.vb: RangeBoundaryFrom(Of T).RangeBoundaryFrom
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).RangeBoundaryFrom
- uid: CodeJam.Ranges.RangeBoundaryFromKind
  commentId: T:CodeJam.Ranges.RangeBoundaryFromKind
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryFromKind
  nameWithType: RangeBoundaryFromKind
  fullName: CodeJam.Ranges.RangeBoundaryFromKind
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Kind*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.Kind
  isExternal: false
  name: Kind
  nameWithType: RangeBoundaryFrom<T>.Kind
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Kind
  nameWithType.vb: RangeBoundaryFrom(Of T).Kind
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Kind
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsEmpty*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: RangeBoundaryFrom<T>.IsEmpty
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsEmpty
  nameWithType.vb: RangeBoundaryFrom(Of T).IsEmpty
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsEmpty
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsNotEmpty*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: RangeBoundaryFrom<T>.IsNotEmpty
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsNotEmpty
  nameWithType.vb: RangeBoundaryFrom(Of T).IsNotEmpty
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsNotEmpty
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsNegativeInfinity*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.IsNegativeInfinity
  isExternal: false
  name: IsNegativeInfinity
  nameWithType: RangeBoundaryFrom<T>.IsNegativeInfinity
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsNegativeInfinity
  nameWithType.vb: RangeBoundaryFrom(Of T).IsNegativeInfinity
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsNegativeInfinity
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsInclusiveBoundary*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.IsInclusiveBoundary
  isExternal: false
  name: IsInclusiveBoundary
  nameWithType: RangeBoundaryFrom<T>.IsInclusiveBoundary
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsInclusiveBoundary
  nameWithType.vb: RangeBoundaryFrom(Of T).IsInclusiveBoundary
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsInclusiveBoundary
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsExclusiveBoundary*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.IsExclusiveBoundary
  isExternal: false
  name: IsExclusiveBoundary
  nameWithType: RangeBoundaryFrom<T>.IsExclusiveBoundary
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsExclusiveBoundary
  nameWithType.vb: RangeBoundaryFrom(Of T).IsExclusiveBoundary
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsExclusiveBoundary
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.HasValue*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue
  isExternal: false
  name: HasValue
  nameWithType: RangeBoundaryFrom<T>.HasValue
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.HasValue
  nameWithType.vb: RangeBoundaryFrom(Of T).HasValue
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).HasValue
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.HasValue
  commentId: P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Value*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.Value
  isExternal: false
  name: Value
  nameWithType: RangeBoundaryFrom<T>.Value
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Value
  nameWithType.vb: RangeBoundaryFrom(Of T).Value
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Value
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault
  isExternal: false
  name: GetValueOrDefault
  nameWithType: RangeBoundaryFrom<T>.GetValueOrDefault
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GetValueOrDefault
  nameWithType.vb: RangeBoundaryFrom(Of T).GetValueOrDefault
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GetValueOrDefault
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.GetComplementation*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.GetComplementation
  isExternal: false
  name: GetComplementation
  nameWithType: RangeBoundaryFrom<T>.GetComplementation
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GetComplementation
  nameWithType.vb: RangeBoundaryFrom(Of T).GetComplementation
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GetComplementation
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.IsComplementationFor*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.IsComplementationFor
  isExternal: false
  name: IsComplementationFor
  nameWithType: RangeBoundaryFrom<T>.IsComplementationFor
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.IsComplementationFor
  nameWithType.vb: RangeBoundaryFrom(Of T).IsComplementationFor
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).IsComplementationFor
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.WithValue*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.WithValue
  isExternal: false
  name: WithValue
  nameWithType: RangeBoundaryFrom<T>.WithValue
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.WithValue
  nameWithType.vb: RangeBoundaryFrom(Of T).WithValue
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).WithValue
- uid: System.Func{{T},{T}}
  commentId: T:System.Func{`0,`0}
  parent: System
  definition: System.Func`2
  name: Func<T, T>
  nameWithType: Func<T, T>
  fullName: System.Func<T, T>
  nameWithType.vb: Func(Of T, T)
  fullName.vb: System.Func(Of T, T)
  name.vb: Func(Of T, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{T2}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  name: Func<T, T2>
  nameWithType: Func<T, T2>
  fullName: System.Func<T, T2>
  nameWithType.vb: Func(Of T, T2)
  fullName.vb: System.Func(Of T, T2)
  name.vb: Func(Of T, T2)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom{{T2}}
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryFrom`1
  name: RangeBoundaryFrom<T2>
  nameWithType: RangeBoundaryFrom<T2>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T2>
  nameWithType.vb: RangeBoundaryFrom(Of T2)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T2)
  name.vb: RangeBoundaryFrom(Of T2)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToExclusive*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.ToExclusive
  isExternal: false
  name: ToExclusive
  nameWithType: RangeBoundaryFrom<T>.ToExclusive
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToExclusive
  nameWithType.vb: RangeBoundaryFrom(Of T).ToExclusive
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToExclusive
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToInclusive*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.ToInclusive
  isExternal: false
  name: ToInclusive
  nameWithType: RangeBoundaryFrom<T>.ToInclusive
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToInclusive
  nameWithType.vb: RangeBoundaryFrom(Of T).ToInclusive
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToInclusive
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.Equals*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.Equals
  isExternal: false
  name: Equals
  nameWithType: RangeBoundaryFrom<T>.Equals
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.Equals
  nameWithType.vb: RangeBoundaryFrom(Of T).Equals
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).Equals
- uid: System.IEquatable{CodeJam.Ranges.RangeBoundaryFrom`1}.Equals(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:System.IEquatable{CodeJam.Ranges.RangeBoundaryFrom`1}.Equals(CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: System.IEquatable{CodeJam.Ranges.RangeBoundaryFrom`1}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(RangeBoundaryFrom<T>)
  nameWithType: IEquatable<RangeBoundaryFrom<T>>.Equals(RangeBoundaryFrom<T>)
  fullName: System.IEquatable<CodeJam.Ranges.RangeBoundaryFrom<T>>.Equals(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: IEquatable(Of RangeBoundaryFrom(Of T)).Equals(RangeBoundaryFrom(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T)).Equals(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Equals(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<RangeBoundaryFrom<T>>.Equals
    fullName: System.IEquatable<CodeJam.Ranges.RangeBoundaryFrom<T>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of RangeBoundaryFrom(Of T)).Equals
    fullName: System.IEquatable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.GetHashCode*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: RangeBoundaryFrom<T>.GetHashCode
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.GetHashCode
  nameWithType.vb: RangeBoundaryFrom(Of T).GetHashCode
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: RangeBoundaryFrom<T>.CompareTo
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.CompareTo
  nameWithType.vb: RangeBoundaryFrom(Of T).CompareTo
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).CompareTo
- uid: System.IComparable{CodeJam.Ranges.RangeBoundaryFrom`1}.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{{T}})
  commentId: M:System.IComparable{CodeJam.Ranges.RangeBoundaryFrom`1}.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{`0})
  parent: System.IComparable{CodeJam.Ranges.RangeBoundaryFrom`1}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(RangeBoundaryFrom<T>)
  nameWithType: IComparable<RangeBoundaryFrom<T>>.CompareTo(RangeBoundaryFrom<T>)
  fullName: System.IComparable<CodeJam.Ranges.RangeBoundaryFrom<T>>.CompareTo(CodeJam.Ranges.RangeBoundaryFrom<T>)
  nameWithType.vb: IComparable(Of RangeBoundaryFrom(Of T)).CompareTo(RangeBoundaryFrom(Of T))
  fullName.vb: System.IComparable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T)).CompareTo(CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: CompareTo(RangeBoundaryFrom(Of T))
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<RangeBoundaryFrom<T>>.CompareTo
    fullName: System.IComparable<CodeJam.Ranges.RangeBoundaryFrom<T>>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of RangeBoundaryFrom(Of T)).CompareTo
    fullName: System.IComparable(Of CodeJam.Ranges.RangeBoundaryFrom(Of T)).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{CodeJam.Ranges.RangeBoundaryTo{{T}}}.CompareTo(CodeJam.Ranges.RangeBoundaryTo{{T}})
  commentId: M:System.IComparable{CodeJam.Ranges.RangeBoundaryTo{`0}}.CompareTo(CodeJam.Ranges.RangeBoundaryTo{`0})
  parent: System.IComparable{CodeJam.Ranges.RangeBoundaryTo{{T}}}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(RangeBoundaryTo<T>)
  nameWithType: IComparable<RangeBoundaryTo<T>>.CompareTo(RangeBoundaryTo<T>)
  fullName: System.IComparable<CodeJam.Ranges.RangeBoundaryTo<T>>.CompareTo(CodeJam.Ranges.RangeBoundaryTo<T>)
  nameWithType.vb: IComparable(Of RangeBoundaryTo(Of T)).CompareTo(RangeBoundaryTo(Of T))
  fullName.vb: System.IComparable(Of CodeJam.Ranges.RangeBoundaryTo(Of T)).CompareTo(CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: CompareTo(RangeBoundaryTo(Of T))
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<RangeBoundaryTo<T>>.CompareTo
    fullName: System.IComparable<CodeJam.Ranges.RangeBoundaryTo<T>>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of RangeBoundaryTo(Of T)).CompareTo
    fullName: System.IComparable(Of CodeJam.Ranges.RangeBoundaryTo(Of T)).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{{T}}.CompareTo({T})
  commentId: M:System.IComparable{`0}.CompareTo(`0)
  parent: System.IComparable{{T}}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.System#IComparable#CompareTo*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.System#IComparable#CompareTo
  isExternal: false
  name: IComparable.CompareTo
  nameWithType: RangeBoundaryFrom<T>.IComparable.CompareTo
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.System.IComparable.CompareTo
  nameWithType.vb: RangeBoundaryFrom(Of T).System.IComparable.CompareTo
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1.ToString*
  commentId: Overload:CodeJam.Ranges.RangeBoundaryFrom`1.ToString
  isExternal: false
  name: ToString
  nameWithType: RangeBoundaryFrom<T>.ToString
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>.ToString
  nameWithType.vb: RangeBoundaryFrom(Of T).ToString
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
