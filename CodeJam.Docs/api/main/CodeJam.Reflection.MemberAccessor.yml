### YamlMime:ManagedReference
items:
- uid: CodeJam.Reflection.MemberAccessor
  commentId: T:CodeJam.Reflection.MemberAccessor
  id: MemberAccessor
  parent: CodeJam.Reflection
  children:
  - CodeJam.Reflection.MemberAccessor.Getter
  - CodeJam.Reflection.MemberAccessor.GetterExpression
  - CodeJam.Reflection.MemberAccessor.GetValue(System.Object)
  - CodeJam.Reflection.MemberAccessor.HasGetter
  - CodeJam.Reflection.MemberAccessor.HasSetter
  - CodeJam.Reflection.MemberAccessor.IsComplex
  - CodeJam.Reflection.MemberAccessor.MemberInfo
  - CodeJam.Reflection.MemberAccessor.Name
  - CodeJam.Reflection.MemberAccessor.Setter
  - CodeJam.Reflection.MemberAccessor.SetterExpression
  - CodeJam.Reflection.MemberAccessor.SetValue(System.Object,System.Object)
  - CodeJam.Reflection.MemberAccessor.Type
  - CodeJam.Reflection.MemberAccessor.TypeAccessor
  langs:
  - csharp
  - vb
  name: MemberAccessor
  nameWithType: MemberAccessor
  fullName: CodeJam.Reflection.MemberAccessor
  type: Class
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MemberAccessor
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 18
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nProvides fast access to a type member.\n"
  example: []
  syntax:
    content: public class MemberAccessor
    content.vb: Public Class MemberAccessor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CodeJam.Reflection.MemberAccessor.MemberInfo
  commentId: P:CodeJam.Reflection.MemberAccessor.MemberInfo
  id: MemberInfo
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: MemberInfo
  nameWithType: MemberAccessor.MemberInfo
  fullName: CodeJam.Reflection.MemberAccessor.MemberInfo
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MemberInfo
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 290
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nMember <xref href=\"CodeJam.Reflection.MemberAccessor.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public MemberInfo MemberInfo { get; }
    parameters: []
    return:
      type: System.Reflection.MemberInfo
    content.vb: Public ReadOnly Property MemberInfo As MemberInfo
  overload: CodeJam.Reflection.MemberAccessor.MemberInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.TypeAccessor
  commentId: P:CodeJam.Reflection.MemberAccessor.TypeAccessor
  id: TypeAccessor
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: TypeAccessor
  nameWithType: MemberAccessor.TypeAccessor
  fullName: CodeJam.Reflection.MemberAccessor.TypeAccessor
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TypeAccessor
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 295
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nParent <xref href=\"CodeJam.Reflection.MemberAccessor.TypeAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TypeAccessor TypeAccessor { get; }
    parameters: []
    return:
      type: CodeJam.Reflection.TypeAccessor
    content.vb: Public ReadOnly Property TypeAccessor As TypeAccessor
  overload: CodeJam.Reflection.MemberAccessor.TypeAccessor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.HasGetter
  commentId: P:CodeJam.Reflection.MemberAccessor.HasGetter
  id: HasGetter
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: HasGetter
  nameWithType: MemberAccessor.HasGetter
  fullName: CodeJam.Reflection.MemberAccessor.HasGetter
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasGetter
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 300
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nTrue, if the member has getter.\n"
  example: []
  syntax:
    content: public bool HasGetter { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasGetter As Boolean
  overload: CodeJam.Reflection.MemberAccessor.HasGetter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.HasSetter
  commentId: P:CodeJam.Reflection.MemberAccessor.HasSetter
  id: HasSetter
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: HasSetter
  nameWithType: MemberAccessor.HasSetter
  fullName: CodeJam.Reflection.MemberAccessor.HasSetter
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasSetter
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 305
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nTrue, if the member has setter.\n"
  example: []
  syntax:
    content: public bool HasSetter { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasSetter As Boolean
  overload: CodeJam.Reflection.MemberAccessor.HasSetter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.Type
  commentId: P:CodeJam.Reflection.MemberAccessor.Type
  id: Type
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: MemberAccessor.Type
  fullName: CodeJam.Reflection.MemberAccessor.Type
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Type
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 310
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nMember <xref href=\"CodeJam.Reflection.MemberAccessor.Type\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Type Type { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public ReadOnly Property Type As Type
  overload: CodeJam.Reflection.MemberAccessor.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.IsComplex
  commentId: P:CodeJam.Reflection.MemberAccessor.IsComplex
  id: IsComplex
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: IsComplex
  nameWithType: MemberAccessor.IsComplex
  fullName: CodeJam.Reflection.MemberAccessor.IsComplex
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsComplex
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 315
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nTrue, if the member is complex.\n"
  example: []
  syntax:
    content: public bool IsComplex { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsComplex As Boolean
  overload: CodeJam.Reflection.MemberAccessor.IsComplex*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.GetterExpression
  commentId: P:CodeJam.Reflection.MemberAccessor.GetterExpression
  id: GetterExpression
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: GetterExpression
  nameWithType: MemberAccessor.GetterExpression
  fullName: CodeJam.Reflection.MemberAccessor.GetterExpression
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetterExpression
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 320
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nGetter expression of the member.\n"
  example: []
  syntax:
    content: public LambdaExpression GetterExpression { get; }
    parameters: []
    return:
      type: System.Linq.Expressions.LambdaExpression
    content.vb: Public ReadOnly Property GetterExpression As LambdaExpression
  overload: CodeJam.Reflection.MemberAccessor.GetterExpression*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.SetterExpression
  commentId: P:CodeJam.Reflection.MemberAccessor.SetterExpression
  id: SetterExpression
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: SetterExpression
  nameWithType: MemberAccessor.SetterExpression
  fullName: CodeJam.Reflection.MemberAccessor.SetterExpression
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SetterExpression
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 325
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nSetter expression of the member.\n"
  example: []
  syntax:
    content: public LambdaExpression SetterExpression { get; }
    parameters: []
    return:
      type: System.Linq.Expressions.LambdaExpression
    content.vb: Public ReadOnly Property SetterExpression As LambdaExpression
  overload: CodeJam.Reflection.MemberAccessor.SetterExpression*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.Getter
  commentId: P:CodeJam.Reflection.MemberAccessor.Getter
  id: Getter
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: Getter
  nameWithType: MemberAccessor.Getter
  fullName: CodeJam.Reflection.MemberAccessor.Getter
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Getter
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 330
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nMember getter function.\n"
  example: []
  syntax:
    content: public Func<object, object> Getter { get; }
    parameters: []
    return:
      type: System.Func{System.Object,System.Object}
    content.vb: Public ReadOnly Property Getter As Func(Of Object, Object)
  overload: CodeJam.Reflection.MemberAccessor.Getter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.Setter
  commentId: P:CodeJam.Reflection.MemberAccessor.Setter
  id: Setter
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: Setter
  nameWithType: MemberAccessor.Setter
  fullName: CodeJam.Reflection.MemberAccessor.Setter
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Setter
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 335
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nMember setter action.\n"
  example: []
  syntax:
    content: public Action<object, object> Setter { get; }
    parameters: []
    return:
      type: System.Action{System.Object,System.Object}
    content.vb: Public ReadOnly Property Setter As Action(Of Object, Object)
  overload: CodeJam.Reflection.MemberAccessor.Setter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.Name
  commentId: P:CodeJam.Reflection.MemberAccessor.Name
  id: Name
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MemberAccessor.Name
  fullName: CodeJam.Reflection.MemberAccessor.Name
  type: Property
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Name
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 340
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nMember name.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: CodeJam.Reflection.MemberAccessor.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CodeJam.Reflection.MemberAccessor.GetValue(System.Object)
  commentId: M:CodeJam.Reflection.MemberAccessor.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: GetValue(Object)
  nameWithType: MemberAccessor.GetValue(Object)
  fullName: CodeJam.Reflection.MemberAccessor.GetValue(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetValue
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 348
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nGets member value for provided object.\n"
  example: []
  syntax:
    content: public object GetValue(object o)
    parameters:
    - id: o
      type: System.Object
      description: Object to access.
    return:
      type: System.Object
      description: Member value.
    content.vb: Public Function GetValue(o As Object) As Object
  overload: CodeJam.Reflection.MemberAccessor.GetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CodeJam.Reflection.MemberAccessor.SetValue(System.Object,System.Object)
  commentId: M:CodeJam.Reflection.MemberAccessor.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: CodeJam.Reflection.MemberAccessor
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object)
  nameWithType: MemberAccessor.SetValue(Object, Object)
  fullName: CodeJam.Reflection.MemberAccessor.SetValue(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Reflection/MemberAccessor.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SetValue
    path: ../Main/src/Reflection/MemberAccessor.cs
    startLine: 356
  assemblies:
  - CodeJam
  namespace: CodeJam.Reflection
  summary: "\nSets member value for provided object.\n"
  example: []
  syntax:
    content: public void SetValue(object o, object value)
    parameters:
    - id: o
      type: System.Object
      description: Object to access.
    - id: value
      type: System.Object
      description: Value to set.
    content.vb: Public Sub SetValue(o As Object, value As Object)
  overload: CodeJam.Reflection.MemberAccessor.SetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CodeJam.Reflection
  commentId: N:CodeJam.Reflection
  isExternal: false
  name: CodeJam.Reflection
  nameWithType: CodeJam.Reflection
  fullName: CodeJam.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, MemberAccessor>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, MemberAccessor>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Reflection.MemberAccessor>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, MemberAccessor)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Reflection.MemberAccessor)(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, MemberAccessor)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, MemberAccessor>
    nameWithType: RangeExtensions.Contains<T, MemberAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Reflection.MemberAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, MemberAccessor)
    nameWithType: RangeExtensions.Contains(Of T, MemberAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Reflection.MemberAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, MemberAccessor>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, MemberAccessor>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Reflection.MemberAccessor>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, MemberAccessor)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Reflection.MemberAccessor)(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, MemberAccessor)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, MemberAccessor>
    nameWithType: RangeExtensions.StartsAfter<T, MemberAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Reflection.MemberAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, MemberAccessor)
    nameWithType: RangeExtensions.StartsAfter(Of T, MemberAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Reflection.MemberAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, MemberAccessor>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, MemberAccessor>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Reflection.MemberAccessor>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, MemberAccessor)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Reflection.MemberAccessor)(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, MemberAccessor)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, MemberAccessor>
    nameWithType: RangeExtensions.EndsBefore<T, MemberAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Reflection.MemberAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, MemberAccessor)
    nameWithType: RangeExtensions.EndsBefore(Of T, MemberAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Reflection.MemberAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, MemberAccessor>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, MemberAccessor>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Reflection.MemberAccessor>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, MemberAccessor)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Reflection.MemberAccessor)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, MemberAccessor)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, MemberAccessor>
    nameWithType: RangeExtensions.Contains<T, TKey, MemberAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Reflection.MemberAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, MemberAccessor)
    nameWithType: RangeExtensions.Contains(Of T, TKey, MemberAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Reflection.MemberAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, MemberAccessor>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, MemberAccessor>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Reflection.MemberAccessor>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, MemberAccessor)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Reflection.MemberAccessor)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, MemberAccessor)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, MemberAccessor>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, MemberAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Reflection.MemberAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, MemberAccessor)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, MemberAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Reflection.MemberAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, MemberAccessor>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, MemberAccessor>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Reflection.MemberAccessor>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, MemberAccessor)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Reflection.MemberAccessor)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, MemberAccessor)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, MemberAccessor>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, MemberAccessor>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Reflection.MemberAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, MemberAccessor)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, MemberAccessor)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Reflection.MemberAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Reflection.MemberAccessor.MemberInfo
  commentId: P:CodeJam.Reflection.MemberAccessor.MemberInfo
- uid: CodeJam.Reflection.MemberAccessor.MemberInfo*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.MemberInfo
  isExternal: false
  name: MemberInfo
  nameWithType: MemberAccessor.MemberInfo
  fullName: CodeJam.Reflection.MemberAccessor.MemberInfo
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: CodeJam.Reflection.MemberAccessor.TypeAccessor
  commentId: P:CodeJam.Reflection.MemberAccessor.TypeAccessor
- uid: CodeJam.Reflection.MemberAccessor.TypeAccessor*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.TypeAccessor
  isExternal: false
  name: TypeAccessor
  nameWithType: MemberAccessor.TypeAccessor
  fullName: CodeJam.Reflection.MemberAccessor.TypeAccessor
- uid: CodeJam.Reflection.TypeAccessor
  commentId: T:CodeJam.Reflection.TypeAccessor
  parent: CodeJam.Reflection
  isExternal: false
  name: TypeAccessor
  nameWithType: TypeAccessor
  fullName: CodeJam.Reflection.TypeAccessor
- uid: CodeJam.Reflection.MemberAccessor.HasGetter*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.HasGetter
  isExternal: false
  name: HasGetter
  nameWithType: MemberAccessor.HasGetter
  fullName: CodeJam.Reflection.MemberAccessor.HasGetter
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Reflection.MemberAccessor.HasSetter*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.HasSetter
  isExternal: false
  name: HasSetter
  nameWithType: MemberAccessor.HasSetter
  fullName: CodeJam.Reflection.MemberAccessor.HasSetter
- uid: CodeJam.Reflection.MemberAccessor.Type
  commentId: P:CodeJam.Reflection.MemberAccessor.Type
- uid: CodeJam.Reflection.MemberAccessor.Type*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.Type
  isExternal: false
  name: Type
  nameWithType: MemberAccessor.Type
  fullName: CodeJam.Reflection.MemberAccessor.Type
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: CodeJam.Reflection.MemberAccessor.IsComplex*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.IsComplex
  isExternal: false
  name: IsComplex
  nameWithType: MemberAccessor.IsComplex
  fullName: CodeJam.Reflection.MemberAccessor.IsComplex
- uid: CodeJam.Reflection.MemberAccessor.GetterExpression*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.GetterExpression
  isExternal: false
  name: GetterExpression
  nameWithType: MemberAccessor.GetterExpression
  fullName: CodeJam.Reflection.MemberAccessor.GetterExpression
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: CodeJam.Reflection.MemberAccessor.SetterExpression*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.SetterExpression
  isExternal: false
  name: SetterExpression
  nameWithType: MemberAccessor.SetterExpression
  fullName: CodeJam.Reflection.MemberAccessor.SetterExpression
- uid: CodeJam.Reflection.MemberAccessor.Getter*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.Getter
  isExternal: false
  name: Getter
  nameWithType: MemberAccessor.Getter
  fullName: CodeJam.Reflection.MemberAccessor.Getter
- uid: System.Func{System.Object,System.Object}
  commentId: T:System.Func{System.Object,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<Object, Object>
  nameWithType: Func<Object, Object>
  fullName: System.Func<System.Object, System.Object>
  nameWithType.vb: Func(Of Object, Object)
  fullName.vb: System.Func(Of System.Object, System.Object)
  name.vb: Func(Of Object, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.Setter*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.Setter
  isExternal: false
  name: Setter
  nameWithType: MemberAccessor.Setter
  fullName: CodeJam.Reflection.MemberAccessor.Setter
- uid: System.Action{System.Object,System.Object}
  commentId: T:System.Action{System.Object,System.Object}
  parent: System
  definition: System.Action`2
  name: Action<Object, Object>
  nameWithType: Action<Object, Object>
  fullName: System.Action<System.Object, System.Object>
  nameWithType.vb: Action(Of Object, Object)
  fullName.vb: System.Action(Of System.Object, System.Object)
  name.vb: Action(Of Object, Object)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Reflection.MemberAccessor.Name*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.Name
  isExternal: false
  name: Name
  nameWithType: MemberAccessor.Name
  fullName: CodeJam.Reflection.MemberAccessor.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CodeJam.Reflection.MemberAccessor.GetValue*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.GetValue
  isExternal: false
  name: GetValue
  nameWithType: MemberAccessor.GetValue
  fullName: CodeJam.Reflection.MemberAccessor.GetValue
- uid: CodeJam.Reflection.MemberAccessor.SetValue*
  commentId: Overload:CodeJam.Reflection.MemberAccessor.SetValue
  isExternal: false
  name: SetValue
  nameWithType: MemberAccessor.SetValue
  fullName: CodeJam.Reflection.MemberAccessor.SetValue
