### YamlMime:ManagedReference
items:
- uid: CodeJam.Collections.CollectionExtensions
  commentId: T:CodeJam.Collections.CollectionExtensions
  id: CollectionExtensions
  parent: CodeJam.Collections
  children:
  - CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])
  - CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  - CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IList{``0})
  - CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(``0[])
  - CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  - CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(``0[])
  - CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(System.Collections.Generic.ICollection{``0})
  langs:
  - csharp
  - vb
  name: CollectionExtensions
  nameWithType: CollectionExtensions
  fullName: CodeJam.Collections.CollectionExtensions
  type: Class
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CollectionExtensions
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 9
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nVarious collections extensions.\n"
  example: []
  syntax:
    content: public static class CollectionExtensions
    content.vb: Public Module CollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  id: IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>)
  fullName: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNullOrEmpty
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 20
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nIndicates whether the specified collection is <code>null</code> or empty.\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
      description: The collection to test for emptiness.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">collection</code> parameter is <code>null</code>\nor empty; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty*
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of T)(ICollection(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
- uid: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(``0[])
  commentId: M:CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(``0[])
  id: IsNullOrEmpty``1(``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(T[])
  nameWithType: CollectionExtensions.IsNullOrEmpty<T>(T[])
  fullName: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty<T>(T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNullOrEmpty
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nIndicates whether the specified array is <code>null</code> or empty.\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: The collection to test for emptiness.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> parameter is <code>null</code>\nor empty; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(Of T)(array As T()) As Boolean
  overload: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty*
  nameWithType.vb: CollectionExtensions.IsNullOrEmpty(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty(Of T)(T())
  name.vb: IsNullOrEmpty(Of T)(T())
- uid: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(System.Collections.Generic.ICollection{``0})
  commentId: M:CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(System.Collections.Generic.ICollection{``0})
  id: NotNullNorEmpty``1(System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.CollectionExtensions
  langs:
  - csharp
  - vb
  name: NotNullNorEmpty<T>(ICollection<T>)
  nameWithType: CollectionExtensions.NotNullNorEmpty<T>(ICollection<T>)
  fullName: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty<T>(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNullNorEmpty
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nIndicates whether the specified collection is not null nor empty.\n"
  example: []
  syntax:
    content: public static bool NotNullNorEmpty<T>(this ICollection<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
      description: The collection to test.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">collection</code> parameter is not null nor empty; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNullNorEmpty(Of T)(collection As ICollection(Of T)) As Boolean
  overload: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty*
  nameWithType.vb: CollectionExtensions.NotNullNorEmpty(Of T)(ICollection(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: NotNullNorEmpty(Of T)(ICollection(Of T))
- uid: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(``0[])
  commentId: M:CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(``0[])
  id: NotNullNorEmpty``1(``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.CollectionExtensions
  langs:
  - csharp
  - vb
  name: NotNullNorEmpty<T>(T[])
  nameWithType: CollectionExtensions.NotNullNorEmpty<T>(T[])
  fullName: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty<T>(T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNullNorEmpty
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nIndicates whether the specified array is is not null nor empty.\n"
  example: []
  syntax:
    content: public static bool NotNullNorEmpty<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: The collection to test.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> parameter is not null nor empty; otherwise, <code>false</code>.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNullNorEmpty(Of T)(array As T()) As Boolean
  overload: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty*
  nameWithType.vb: CollectionExtensions.NotNullNorEmpty(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty(Of T)(T())
  name.vb: NotNullNorEmpty(Of T)(T())
- uid: CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])
  commentId: M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])
  id: AddRange``1(System.Collections.Generic.ICollection{``0},``0[])
  isExtensionMethod: true
  parent: CodeJam.Collections.CollectionExtensions
  langs:
  - csharp
  - vb
  name: AddRange<T>(ICollection<T>, T[])
  nameWithType: CollectionExtensions.AddRange<T>(ICollection<T>, T[])
  fullName: CodeJam.Collections.CollectionExtensions.AddRange<T>(System.Collections.Generic.ICollection<T>, T[])
  type: Method
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AddRange
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 68
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAdds the elements to the end of the <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void AddRange<T>(this ICollection<T> source, params T[] items)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: The collection to add the elements to.
    - id: items
      type: '{T}[]'
      description: The items to add to the collection.
    typeParameters:
    - id: T
      description: The type of the items that the collection contains.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddRange(Of T)(source As ICollection(Of T), ParamArray items As T())
  overload: CodeJam.Collections.CollectionExtensions.AddRange*
  nameWithType.vb: CollectionExtensions.AddRange(Of T)(ICollection(Of T), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.CollectionExtensions.AddRange(Of T)(System.Collections.Generic.ICollection(Of T), T())
  name.vb: AddRange(Of T)(ICollection(Of T), T())
- uid: CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IList{``0})
  commentId: M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IList{``0})
  id: AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IList{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.CollectionExtensions
  langs:
  - csharp
  - vb
  name: AddRange<T>(ICollection<T>, IList<T>)
  nameWithType: CollectionExtensions.AddRange<T>(ICollection<T>, IList<T>)
  fullName: CodeJam.Collections.CollectionExtensions.AddRange<T>(System.Collections.Generic.ICollection<T>, System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AddRange
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 80
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAdds the elements to the end of the <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void AddRange<T>(this ICollection<T> source, IList<T> items)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: The collection to add the elements to.
    - id: items
      type: System.Collections.Generic.IList{{T}}
      description: The items to add to the collection.
    typeParameters:
    - id: T
      description: The type of the items that the collection contains.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddRange(Of T)(source As ICollection(Of T), items As IList(Of T))
  overload: CodeJam.Collections.CollectionExtensions.AddRange*
  nameWithType.vb: CollectionExtensions.AddRange(Of T)(ICollection(Of T), IList(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.CollectionExtensions.AddRange(Of T)(System.Collections.Generic.ICollection(Of T), System.Collections.Generic.IList(Of T))
  name.vb: AddRange(Of T)(ICollection(Of T), IList(Of T))
- uid: CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  id: AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: CodeJam.Collections.CollectionExtensions
  langs:
  - csharp
  - vb
  name: AddRange<T>(ICollection<T>, IEnumerable<T>)
  nameWithType: CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>)
  fullName: CodeJam.Collections.CollectionExtensions.AddRange<T>(System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Main/src/Collections/CollectionExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AddRange
    path: ../Main/src/Collections/CollectionExtensions.cs
    startLine: 92
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAdds the elements to the end of the <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void AddRange<T>(this ICollection<T> source, IEnumerable<T> items)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: The collection to add the elements to.
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items to add to the collection.
    typeParameters:
    - id: T
      description: The type of the items that the collection contains.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddRange(Of T)(source As ICollection(Of T), items As IEnumerable(Of T))
  overload: CodeJam.Collections.CollectionExtensions.AddRange*
  nameWithType.vb: CollectionExtensions.AddRange(Of T)(ICollection(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.CollectionExtensions.AddRange(Of T)(System.Collections.Generic.ICollection(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(Of T)(ICollection(Of T), IEnumerable(Of T))
references:
- uid: CodeJam.Collections
  commentId: N:CodeJam.Collections
  isExternal: false
  name: CodeJam.Collections
  nameWithType: CodeJam.Collections
  fullName: CodeJam.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty*
  commentId: Overload:CodeJam.Collections.CollectionExtensions.IsNullOrEmpty
  isExternal: false
  name: IsNullOrEmpty
  nameWithType: CollectionExtensions.IsNullOrEmpty
  fullName: CodeJam.Collections.CollectionExtensions.IsNullOrEmpty
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty*
  commentId: Overload:CodeJam.Collections.CollectionExtensions.NotNullNorEmpty
  isExternal: false
  name: NotNullNorEmpty
  nameWithType: CollectionExtensions.NotNullNorEmpty
  fullName: CodeJam.Collections.CollectionExtensions.NotNullNorEmpty
- uid: CodeJam.Collections.CollectionExtensions.AddRange*
  commentId: Overload:CodeJam.Collections.CollectionExtensions.AddRange
  isExternal: false
  name: AddRange
  nameWithType: CollectionExtensions.AddRange
  fullName: CodeJam.Collections.CollectionExtensions.AddRange
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
