### YamlMime:ManagedReference
items:
- uid: CodeJam.Lazy
  commentId: T:CodeJam.Lazy
  id: Lazy
  parent: CodeJam
  children:
  - CodeJam.Lazy.Create``1
  - CodeJam.Lazy.Create``1(System.Boolean)
  - CodeJam.Lazy.Create``1(System.Func{``0})
  - CodeJam.Lazy.Create``1(System.Func{``0},System.Boolean)
  - CodeJam.Lazy.Create``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Lazy.Create``1(System.Threading.LazyThreadSafetyMode)
  langs:
  - csharp
  - vb
  name: Lazy
  nameWithType: Lazy
  fullName: CodeJam.Lazy
  type: Class
  source:
    remote:
      path: Main/src/Lazy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Lazy
    path: ../Main/src/Lazy.cs
    startLine: 10
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nHelper methods for <xref href=\"System.Lazy%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public static class Lazy
    content.vb: Public Module Lazy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Lazy.Create``1
  commentId: M:CodeJam.Lazy.Create``1
  id: Create``1
  parent: CodeJam.Lazy
  langs:
  - csharp
  - vb
  name: Create<T>()
  nameWithType: Lazy.Create<T>()
  fullName: CodeJam.Lazy.Create<T>()
  type: Method
  source:
    remote:
      path: Main/src/Lazy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Lazy.cs
    startLine: 19
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nInitializes a new instance of the <xref href=\"System.Lazy%601\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default\nconstructor of the target type is used.\n"
  example: []
  syntax:
    content: public static Lazy<T> Create<T>()
    typeParameters:
    - id: T
      description: The type of object that is being lazily initialized.
    return:
      type: System.Lazy{{T}}
      description: New <xref href="System.Lazy%601" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function Create(Of T) As Lazy(Of T)
  overload: CodeJam.Lazy.Create*
  nameWithType.vb: Lazy.Create(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Lazy.Create(Of T)()
  name.vb: Create(Of T)()
- uid: CodeJam.Lazy.Create``1(System.Boolean)
  commentId: M:CodeJam.Lazy.Create``1(System.Boolean)
  id: Create``1(System.Boolean)
  parent: CodeJam.Lazy
  langs:
  - csharp
  - vb
  name: Create<T>(Boolean)
  nameWithType: Lazy.Create<T>(Boolean)
  fullName: CodeJam.Lazy.Create<T>(System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Lazy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Lazy.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nInitializes a new instance of the <xref href=\"System.Lazy%601\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default\nconstructor of the target type is used.\n"
  example: []
  syntax:
    content: public static Lazy<T> Create<T>(bool isThreadSafe)
    parameters:
    - id: isThreadSafe
      type: System.Boolean
      description: "\n<code>true</code> to make this instance usable concurrently by multiple threads; <code>false</code> to make the instance\nusable by only one thread at a time.\n"
    typeParameters:
    - id: T
      description: The type of object that is being lazily initialized.
    return:
      type: System.Lazy{{T}}
      description: New <xref href="System.Lazy%601" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function Create(Of T)(isThreadSafe As Boolean) As Lazy(Of T)
  overload: CodeJam.Lazy.Create*
  nameWithType.vb: Lazy.Create(Of T)(Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Lazy.Create(Of T)(System.Boolean)
  name.vb: Create(Of T)(Boolean)
- uid: CodeJam.Lazy.Create``1(System.Func{``0})
  commentId: M:CodeJam.Lazy.Create``1(System.Func{``0})
  id: Create``1(System.Func{``0})
  parent: CodeJam.Lazy
  langs:
  - csharp
  - vb
  name: Create<T>(Func<T>)
  nameWithType: Lazy.Create<T>(Func<T>)
  fullName: CodeJam.Lazy.Create<T>(System.Func<T>)
  type: Method
  source:
    remote:
      path: Main/src/Lazy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Lazy.cs
    startLine: 46
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nInitializes a new instance of the <xref href=\"System.Lazy%601\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default\nconstructor of the target type is used.\n"
  example: []
  syntax:
    content: public static Lazy<T> Create<T>(Func<T> valueFactory)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\nThe delegate that is invoked to produce the lazily initialized value when it is needed.\n"
    typeParameters:
    - id: T
      description: The type of object that is being lazily initialized.
    return:
      type: System.Lazy{{T}}
      description: New <xref href="System.Lazy%601" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function Create(Of T)(valueFactory As Func(Of T)) As Lazy(Of T)
  overload: CodeJam.Lazy.Create*
  nameWithType.vb: Lazy.Create(Of T)(Func(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Lazy.Create(Of T)(System.Func(Of T))
  name.vb: Create(Of T)(Func(Of T))
- uid: CodeJam.Lazy.Create``1(System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Lazy.Create``1(System.Threading.LazyThreadSafetyMode)
  id: Create``1(System.Threading.LazyThreadSafetyMode)
  parent: CodeJam.Lazy
  langs:
  - csharp
  - vb
  name: Create<T>(LazyThreadSafetyMode)
  nameWithType: Lazy.Create<T>(LazyThreadSafetyMode)
  fullName: CodeJam.Lazy.Create<T>(System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Lazy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Lazy.cs
    startLine: 57
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nInitializes a new instance of the <xref href=\"System.Lazy%601\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default\nconstructor of the target type is used.\n"
  example: []
  syntax:
    content: public static Lazy<T> Create<T>(LazyThreadSafetyMode mode)
    parameters:
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: T
      description: The type of object that is being lazily initialized.
    return:
      type: System.Lazy{{T}}
      description: New <xref href="System.Lazy%601" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function Create(Of T)(mode As LazyThreadSafetyMode) As Lazy(Of T)
  overload: CodeJam.Lazy.Create*
  nameWithType.vb: Lazy.Create(Of T)(LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Lazy.Create(Of T)(System.Threading.LazyThreadSafetyMode)
  name.vb: Create(Of T)(LazyThreadSafetyMode)
- uid: CodeJam.Lazy.Create``1(System.Func{``0},System.Boolean)
  commentId: M:CodeJam.Lazy.Create``1(System.Func{``0},System.Boolean)
  id: Create``1(System.Func{``0},System.Boolean)
  parent: CodeJam.Lazy
  langs:
  - csharp
  - vb
  name: Create<T>(Func<T>, Boolean)
  nameWithType: Lazy.Create<T>(Func<T>, Boolean)
  fullName: CodeJam.Lazy.Create<T>(System.Func<T>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Lazy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Lazy.cs
    startLine: 74
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nInitializes a new instance of the <xref href=\"System.Lazy%601\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default\nconstructor of the target type is used.\n"
  example: []
  syntax:
    content: public static Lazy<T> Create<T>(Func<T> valueFactory, bool isThreadSafe)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\nThe delegate that is invoked to produce the lazily initialized value when it is needed.\n"
    - id: isThreadSafe
      type: System.Boolean
      description: "\n<code>true</code> to make this instance usable concurrently by multiple threads; <code>false</code> to make the instance\nusable by only one thread at a time.\n"
    typeParameters:
    - id: T
      description: The type of object that is being lazily initialized.
    return:
      type: System.Lazy{{T}}
      description: New <xref href="System.Lazy%601" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function Create(Of T)(valueFactory As Func(Of T), isThreadSafe As Boolean) As Lazy(Of T)
  overload: CodeJam.Lazy.Create*
  nameWithType.vb: Lazy.Create(Of T)(Func(Of T), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Lazy.Create(Of T)(System.Func(Of T), System.Boolean)
  name.vb: Create(Of T)(Func(Of T), Boolean)
- uid: CodeJam.Lazy.Create``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Lazy.Create``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)
  id: Create``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)
  parent: CodeJam.Lazy
  langs:
  - csharp
  - vb
  name: Create<T>(Func<T>, LazyThreadSafetyMode)
  nameWithType: Lazy.Create<T>(Func<T>, LazyThreadSafetyMode)
  fullName: CodeJam.Lazy.Create<T>(System.Func<T>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Lazy.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Lazy.cs
    startLine: 88
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nInitializes a new instance of the <xref href=\"System.Lazy%601\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default\nconstructor of the target type is used.\n"
  example: []
  syntax:
    content: public static Lazy<T> Create<T>(Func<T> valueFactory, LazyThreadSafetyMode mode)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\nThe delegate that is invoked to produce the lazily initialized value when it is needed.\n"
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
    typeParameters:
    - id: T
      description: The type of object that is being lazily initialized.
    return:
      type: System.Lazy{{T}}
      description: New <xref href="System.Lazy%601" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Shared Function Create(Of T)(valueFactory As Func(Of T), mode As LazyThreadSafetyMode) As Lazy(Of T)
  overload: CodeJam.Lazy.Create*
  nameWithType.vb: Lazy.Create(Of T)(Func(Of T), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Lazy.Create(Of T)(System.Func(Of T), System.Threading.LazyThreadSafetyMode)
  name.vb: Create(Of T)(Func(Of T), LazyThreadSafetyMode)
references:
- uid: System.Lazy`1
  commentId: T:System.Lazy`1
  isExternal: true
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  nameWithType.vb: Lazy(Of T)
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Lazy.Create*
  commentId: Overload:CodeJam.Lazy.Create
  isExternal: false
  name: Create
  nameWithType: Lazy.Create
  fullName: CodeJam.Lazy.Create
- uid: System.Lazy{{T}}
  commentId: T:System.Lazy{``0}
  parent: System
  definition: System.Lazy`1
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  nameWithType.vb: Lazy(Of T)
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.LazyThreadSafetyMode
  commentId: T:System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: true
  name: LazyThreadSafetyMode
  nameWithType: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
