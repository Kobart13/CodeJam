### YamlMime:ManagedReference
items:
- uid: CodeJam.Strings.NaturalOrderStringComparer
  commentId: T:CodeJam.Strings.NaturalOrderStringComparer
  id: NaturalOrderStringComparer
  parent: CodeJam.Strings
  children:
  - CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String)
  - CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String,System.Boolean)
  - CodeJam.Strings.NaturalOrderStringComparer.Comparer
  - CodeJam.Strings.NaturalOrderStringComparer.Comparison
  - CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparer
  - CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparison
  - CodeJam.Strings.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare(System.String,System.String)
  langs:
  - csharp
  - vb
  name: NaturalOrderStringComparer
  nameWithType: NaturalOrderStringComparer
  fullName: CodeJam.Strings.NaturalOrderStringComparer
  type: Class
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NaturalOrderStringComparer
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nString comparisons using a &quot;natural order&quot; algorithm.\n"
  example: []
  syntax:
    content: 'public class NaturalOrderStringComparer : IComparer<string>'
    content.vb: >-
      Public Class NaturalOrderStringComparer
          Implements IComparer(Of String)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{System.String}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CodeJam.Strings.NaturalOrderStringComparer.Comparer
  commentId: F:CodeJam.Strings.NaturalOrderStringComparer.Comparer
  id: Comparer
  parent: CodeJam.Strings.NaturalOrderStringComparer
  langs:
  - csharp
  - vb
  name: Comparer
  nameWithType: NaturalOrderStringComparer.Comparer
  fullName: CodeJam.Strings.NaturalOrderStringComparer.Comparer
  type: Field
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Comparer
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nGets a <xref href=\"CodeJam.Strings.NaturalOrderStringComparer\" data-throw-if-not-resolved=\"false\"></xref> object\nthat performs a string comparison using a &quot;natural order&quot; algorithm.\n"
  example: []
  syntax:
    content: public static readonly NaturalOrderStringComparer Comparer
    return:
      type: CodeJam.Strings.NaturalOrderStringComparer
      description: "\nA <xref href=\"CodeJam.Strings.NaturalOrderStringComparer\" data-throw-if-not-resolved=\"false\"></xref> object\nthat performs a string comparison using a &quot;natural order&quot; algorithm.\n"
    content.vb: Public Shared ReadOnly Comparer As NaturalOrderStringComparer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparer
  commentId: F:CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparer
  id: IgnoreCaseComparer
  parent: CodeJam.Strings.NaturalOrderStringComparer
  langs:
  - csharp
  - vb
  name: IgnoreCaseComparer
  nameWithType: NaturalOrderStringComparer.IgnoreCaseComparer
  fullName: CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparer
  type: Field
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IgnoreCaseComparer
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nGets a <xref href=\"CodeJam.Strings.NaturalOrderStringComparer\" data-throw-if-not-resolved=\"false\"></xref> object\nthat performs a case-insensitive string comparison using a &quot;natural order&quot; algorithm.\n"
  example: []
  syntax:
    content: public static readonly NaturalOrderStringComparer IgnoreCaseComparer
    return:
      type: CodeJam.Strings.NaturalOrderStringComparer
      description: "\nA <xref href=\"CodeJam.Strings.NaturalOrderStringComparer\" data-throw-if-not-resolved=\"false\"></xref> object\nthat performs a case-insensitive string comparison using a &quot;natural order&quot; algorithm.\n"
    content.vb: Public Shared ReadOnly IgnoreCaseComparer As NaturalOrderStringComparer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CodeJam.Strings.NaturalOrderStringComparer.Comparison
  commentId: F:CodeJam.Strings.NaturalOrderStringComparer.Comparison
  id: Comparison
  parent: CodeJam.Strings.NaturalOrderStringComparer
  langs:
  - csharp
  - vb
  name: Comparison
  nameWithType: NaturalOrderStringComparer.Comparison
  fullName: CodeJam.Strings.NaturalOrderStringComparer.Comparison
  type: Field
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Comparison
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 65
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nGets a <xref href=\"System.Comparison%601\" data-throw-if-not-resolved=\"false\"></xref> delegate that performs a string comparison using a &quot;natural order&quot; algorithm.\n"
  example: []
  syntax:
    content: public static readonly Comparison<string> Comparison
    return:
      type: System.Comparison{System.String}
      description: "\nA <xref href=\"System.Comparison%601\" data-throw-if-not-resolved=\"false\"></xref> delegate that performs a string comparison using a &quot;natural order&quot; algorithm.\n"
    content.vb: Public Shared ReadOnly Comparison As Comparison(Of String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparison
  commentId: F:CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparison
  id: IgnoreCaseComparison
  parent: CodeJam.Strings.NaturalOrderStringComparer
  langs:
  - csharp
  - vb
  name: IgnoreCaseComparison
  nameWithType: NaturalOrderStringComparer.IgnoreCaseComparison
  fullName: CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparison
  type: Field
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IgnoreCaseComparison
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 76
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nGets a <xref href=\"System.Comparison%601\" data-throw-if-not-resolved=\"false\"></xref> delegate that performs a case-insensitive\nstring comparison using a &quot;natural order&quot; algorithm.\n"
  example: []
  syntax:
    content: public static readonly Comparison<string> IgnoreCaseComparison
    return:
      type: System.Comparison{System.String}
      description: "\nA <xref href=\"System.Comparison%601\" data-throw-if-not-resolved=\"false\"></xref> delegate that performs a case-insensitive\nstring comparison using a &quot;natural order&quot; algorithm.\n"
    content.vb: Public Shared ReadOnly IgnoreCaseComparison As Comparison(Of String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String)
  commentId: M:CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: CodeJam.Strings.NaturalOrderStringComparer
  langs:
  - csharp
  - vb
  name: Compare(String, String)
  nameWithType: NaturalOrderStringComparer.Compare(String, String)
  fullName: CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Compare
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 100
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nCompares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.\n"
  example: []
  syntax:
    content: public static int Compare(string a, string b)
    parameters:
    - id: a
      type: System.String
      description: The first object to compare.
    - id: b
      type: System.String
      description: The second object to compare.
    return:
      type: System.Int32
      description: "\nA signed integer that indicates the relative values of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>,\nas shown in the following table.\nValue Meaning Less than zero <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> is less than <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\nZero <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\nGreater than zero <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
    content.vb: Public Shared Function Compare(a As String, b As String) As Integer
  overload: CodeJam.Strings.NaturalOrderStringComparer.Compare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String,System.Boolean)
  commentId: M:CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String,System.Boolean)
  id: Compare(System.String,System.String,System.Boolean)
  parent: CodeJam.Strings.NaturalOrderStringComparer
  langs:
  - csharp
  - vb
  name: Compare(String, String, Boolean)
  nameWithType: NaturalOrderStringComparer.Compare(String, String, Boolean)
  fullName: CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Compare
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 116
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nCompares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.\n"
  example: []
  syntax:
    content: public static int Compare(string a, string b, bool ignoreCase)
    parameters:
    - id: a
      type: System.String
      description: The first object to compare.
    - id: b
      type: System.String
      description: The second object to compare.
    - id: ignoreCase
      type: System.Boolean
      description: true to ignore case during the comparison; otherwise, false.
    return:
      type: System.Int32
      description: "\nA signed integer that indicates the relative values of <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>,\nas shown in the following table.\nValue Meaning Less than zero <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> is less than <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\nZero <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\nGreater than zero <code data-dev-comment-type=\"paramref\" class=\"paramref\">a</code> is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">b</code>.\n"
    content.vb: Public Shared Function Compare(a As String, b As String, ignoreCase As Boolean) As Integer
  overload: CodeJam.Strings.NaturalOrderStringComparer.Compare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Strings.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare(System.String,System.String)
  commentId: M:CodeJam.Strings.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare(System.String,System.String)
  id: System#Collections#Generic#IComparer{System#String}#Compare(System.String,System.String)
  isEii: true
  parent: CodeJam.Strings.NaturalOrderStringComparer
  langs:
  - csharp
  - vb
  name: IComparer<String>.Compare(String, String)
  nameWithType: NaturalOrderStringComparer.IComparer<String>.Compare(String, String)
  fullName: CodeJam.Strings.NaturalOrderStringComparer.System.Collections.Generic.IComparer<System.String>.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Strings/NaturalOrderStringComparer.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: System.Collections.Generic.IComparer<System.String>.Compare
    path: ../Main/src/Strings/NaturalOrderStringComparer.cs
    startLine: 250
  assemblies:
  - CodeJam
  namespace: CodeJam.Strings
  summary: "\nCompares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.\n"
  example: []
  syntax:
    content: int IComparer<string>.Compare(string x, string y)
    parameters:
    - id: x
      type: System.String
      description: The first object to compare.
    - id: y
      type: System.String
      description: The second object to compare.
    return:
      type: System.Int32
      description: "\nA signed integer that indicates the relative values of <code data-dev-comment-type=\"paramref\" class=\"paramref\">x</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">y</code>,\nas shown in the following table.\nValue Meaning Less than zero <code data-dev-comment-type=\"paramref\" class=\"paramref\">x</code> is less than <code data-dev-comment-type=\"paramref\" class=\"paramref\">y</code>.\nZero <code data-dev-comment-type=\"paramref\" class=\"paramref\">x</code> equals <code data-dev-comment-type=\"paramref\" class=\"paramref\">y</code>.\nGreater than zero <code data-dev-comment-type=\"paramref\" class=\"paramref\">x</code> is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">y</code>.\n"
    content.vb: Function System.Collections.Generic.IComparer<System.String>.Compare(x As String, y As String) As Integer Implements IComparer(Of String).Compare
  overload: CodeJam.Strings.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare*
  implements:
  - System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)
  nameWithType.vb: NaturalOrderStringComparer.System.Collections.Generic.IComparer<System.String>.Compare(String, String)
  name.vb: System.Collections.Generic.IComparer<System.String>.Compare(String, String)
references:
- uid: CodeJam.Strings
  commentId: N:CodeJam.Strings
  isExternal: false
  name: CodeJam.Strings
  nameWithType: CodeJam.Strings
  fullName: CodeJam.Strings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IComparer{System.String}
  commentId: T:System.Collections.Generic.IComparer{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<String>
  nameWithType: IComparer<String>
  fullName: System.Collections.Generic.IComparer<System.String>
  nameWithType.vb: IComparer(Of String)
  fullName.vb: System.Collections.Generic.IComparer(Of System.String)
  name.vb: IComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, NaturalOrderStringComparer>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, NaturalOrderStringComparer>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Strings.NaturalOrderStringComparer>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, NaturalOrderStringComparer)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Strings.NaturalOrderStringComparer)(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, NaturalOrderStringComparer)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, NaturalOrderStringComparer>
    nameWithType: RangeExtensions.Contains<T, NaturalOrderStringComparer>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Strings.NaturalOrderStringComparer>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, NaturalOrderStringComparer)
    nameWithType: RangeExtensions.Contains(Of T, NaturalOrderStringComparer)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Strings.NaturalOrderStringComparer)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, NaturalOrderStringComparer>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, NaturalOrderStringComparer>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Strings.NaturalOrderStringComparer>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, NaturalOrderStringComparer)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Strings.NaturalOrderStringComparer)(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, NaturalOrderStringComparer)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, NaturalOrderStringComparer>
    nameWithType: RangeExtensions.StartsAfter<T, NaturalOrderStringComparer>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Strings.NaturalOrderStringComparer>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, NaturalOrderStringComparer)
    nameWithType: RangeExtensions.StartsAfter(Of T, NaturalOrderStringComparer)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Strings.NaturalOrderStringComparer)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, NaturalOrderStringComparer>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, NaturalOrderStringComparer>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Strings.NaturalOrderStringComparer>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, NaturalOrderStringComparer)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Strings.NaturalOrderStringComparer)(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, NaturalOrderStringComparer)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, NaturalOrderStringComparer>
    nameWithType: RangeExtensions.EndsBefore<T, NaturalOrderStringComparer>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Strings.NaturalOrderStringComparer>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, NaturalOrderStringComparer)
    nameWithType: RangeExtensions.EndsBefore(Of T, NaturalOrderStringComparer)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Strings.NaturalOrderStringComparer)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, NaturalOrderStringComparer>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, NaturalOrderStringComparer>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Strings.NaturalOrderStringComparer>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, NaturalOrderStringComparer)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Strings.NaturalOrderStringComparer)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, NaturalOrderStringComparer)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, NaturalOrderStringComparer>
    nameWithType: RangeExtensions.Contains<T, TKey, NaturalOrderStringComparer>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Strings.NaturalOrderStringComparer>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, NaturalOrderStringComparer)
    nameWithType: RangeExtensions.Contains(Of T, TKey, NaturalOrderStringComparer)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Strings.NaturalOrderStringComparer)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, NaturalOrderStringComparer>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, NaturalOrderStringComparer>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Strings.NaturalOrderStringComparer>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, NaturalOrderStringComparer)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Strings.NaturalOrderStringComparer)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, NaturalOrderStringComparer)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, NaturalOrderStringComparer>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, NaturalOrderStringComparer>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Strings.NaturalOrderStringComparer>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, NaturalOrderStringComparer)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, NaturalOrderStringComparer)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Strings.NaturalOrderStringComparer)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.NaturalOrderStringComparer.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, NaturalOrderStringComparer>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, NaturalOrderStringComparer>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Strings.NaturalOrderStringComparer>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, NaturalOrderStringComparer)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Strings.NaturalOrderStringComparer)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, NaturalOrderStringComparer)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, NaturalOrderStringComparer>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, NaturalOrderStringComparer>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Strings.NaturalOrderStringComparer>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, NaturalOrderStringComparer)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, NaturalOrderStringComparer)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Strings.NaturalOrderStringComparer)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Strings.NaturalOrderStringComparer
  commentId: T:CodeJam.Strings.NaturalOrderStringComparer
  parent: CodeJam.Strings
  isExternal: false
  name: NaturalOrderStringComparer
  nameWithType: NaturalOrderStringComparer
  fullName: CodeJam.Strings.NaturalOrderStringComparer
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: true
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison{System.String}
  commentId: T:System.Comparison{System.String}
  parent: System
  definition: System.Comparison`1
  name: Comparison<String>
  nameWithType: Comparison<String>
  fullName: System.Comparison<System.String>
  nameWithType.vb: Comparison(Of String)
  fullName.vb: System.Comparison(Of System.String)
  name.vb: Comparison(Of String)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.NaturalOrderStringComparer.Compare*
  commentId: Overload:CodeJam.Strings.NaturalOrderStringComparer.Compare
  isExternal: false
  name: Compare
  nameWithType: NaturalOrderStringComparer.Compare
  fullName: CodeJam.Strings.NaturalOrderStringComparer.Compare
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Strings.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare*
  commentId: Overload:CodeJam.Strings.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare
  isExternal: false
  name: IComparer<String>.Compare
  nameWithType: NaturalOrderStringComparer.IComparer<String>.Compare
  fullName: CodeJam.Strings.NaturalOrderStringComparer.System.Collections.Generic.IComparer<System.String>.Compare
  nameWithType.vb: NaturalOrderStringComparer.System.Collections.Generic.IComparer<System.String>.Compare
  name.vb: System.Collections.Generic.IComparer<System.String>.Compare
- uid: System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)
  commentId: M:System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)
  parent: System.Collections.Generic.IComparer{System.String}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(String, String)
  nameWithType: IComparer<String>.Compare(String, String)
  fullName: System.Collections.Generic.IComparer<System.String>.Compare(System.String, System.String)
  nameWithType.vb: IComparer(Of String).Compare(String, String)
  fullName.vb: System.Collections.Generic.IComparer(Of System.String).Compare(System.String, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<String>.Compare
    fullName: System.Collections.Generic.IComparer<System.String>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of String).Compare
    fullName: System.Collections.Generic.IComparer(Of System.String).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
