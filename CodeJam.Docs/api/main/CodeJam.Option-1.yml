### YamlMime:ManagedReference
items:
- uid: CodeJam.Option`1
  commentId: T:CodeJam.Option`1
  id: Option`1
  parent: CodeJam
  children:
  - CodeJam.Option`1.Equals(CodeJam.Option{`0})
  - CodeJam.Option`1.Equals(System.Object)
  - CodeJam.Option`1.GetHashCode
  - CodeJam.Option`1.HasValue
  - CodeJam.Option`1.IsNone
  - CodeJam.Option`1.IsSome
  - CodeJam.Option`1.op_Equality(CodeJam.Option{`0},CodeJam.Option{`0})
  - CodeJam.Option`1.op_Explicit(CodeJam.Option{`0})~`0
  - CodeJam.Option`1.op_Implicit(`0)~CodeJam.Option{`0}
  - CodeJam.Option`1.op_Inequality(CodeJam.Option{`0},CodeJam.Option{`0})
  - CodeJam.Option`1.ToString
  - CodeJam.Option`1.Value
  langs:
  - csharp
  - vb
  name: Option<T>
  nameWithType: Option<T>
  fullName: CodeJam.Option<T>
  type: Class
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Option
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 11
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nRepresents an optional value.\n"
  example: []
  syntax:
    content: 'public abstract class Option<T> : IOption<T>, IEquatable<Option<T>>'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public MustInherit Class Option(Of T)
          Implements IOption(Of T), IEquatable(Of  Option(Of T) )
  inheritance:
  - System.Object
  derivedClasses:
  - CodeJam.Option`1.None
  - CodeJam.Option`1.Some
  implements:
  - CodeJam.IOption{{T}}
  - System.IEquatable{CodeJam.Option`1}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.IOption{`0}.CodeJam.Option.Do``1(System.Action{CodeJam.IOption{{T}}},System.Action)
  - CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{{T}},{TResult}},System.Func{{TResult}})
  - CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``1({T})
  - CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}})
  - CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},{TResult})
  - CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},System.Func{{TResult}})
  - CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  nameWithType.vb: Option(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: CodeJam.Option(Of T)
  name.vb: Option(Of T)
- uid: CodeJam.Option`1.HasValue
  commentId: P:CodeJam.Option`1.HasValue
  id: HasValue
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: Option<T>.HasValue
  fullName: CodeJam.Option<T>.HasValue
  type: Property
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasValue
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nGets a value indicating whether the current object has a value.\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasValue As Boolean
  overload: CodeJam.Option`1.HasValue*
  implements:
  - CodeJam.IOption{{T}}.HasValue
  nameWithType.vb: Option(Of T).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Option(Of T).HasValue
- uid: CodeJam.Option`1.IsSome
  commentId: P:CodeJam.Option`1.IsSome
  id: IsSome
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: IsSome
  nameWithType: Option<T>.IsSome
  fullName: CodeJam.Option<T>.IsSome
  type: Property
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsSome
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nGets a value indicating whether the current object has a value.\n"
  example: []
  syntax:
    content: public bool IsSome { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSome As Boolean
  overload: CodeJam.Option`1.IsSome*
  nameWithType.vb: Option(Of T).IsSome
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Option(Of T).IsSome
- uid: CodeJam.Option`1.IsNone
  commentId: P:CodeJam.Option`1.IsNone
  id: IsNone
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: IsNone
  nameWithType: Option<T>.IsNone
  fullName: CodeJam.Option<T>.IsNone
  type: Property
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNone
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 27
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nGets a value indicating whether the current object does not have a value.\n"
  example: []
  syntax:
    content: public bool IsNone { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNone As Boolean
  overload: CodeJam.Option`1.IsNone*
  nameWithType.vb: Option(Of T).IsNone
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Option(Of T).IsNone
- uid: CodeJam.Option`1.Value
  commentId: P:CodeJam.Option`1.Value
  id: Value
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Option<T>.Value
  fullName: CodeJam.Option<T>.Value
  type: Property
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Value
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 32
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nGets the value of the current object.\n"
  example: []
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: CodeJam.Option`1.Value*
  implements:
  - CodeJam.IOption{{T}}.Value
  nameWithType.vb: Option(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Option(Of T).Value
- uid: CodeJam.Option`1.op_Implicit(`0)~CodeJam.Option{`0}
  commentId: M:CodeJam.Option`1.op_Implicit(`0)~CodeJam.Option{`0}
  id: op_Implicit(`0)~CodeJam.Option{`0}
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: Implicit(T to Option<T>)
  nameWithType: Option<T>.Implicit(T to Option<T>)
  fullName: CodeJam.Option<T>.Implicit(T to CodeJam.Option<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Implicit
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 47
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nCreates a new object initialized to a specified value.\n"
  example: []
  syntax:
    content: public static implicit operator Option<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: Value to convert.
    return:
      type: CodeJam.Option`1
      description: Instance of <xref href="CodeJam.Option%601.Some" data-throw-if-not-resolved="false"></xref>.
    content.vb: 'Public Shared Widening Operator CType(value As T) As '
  overload: CodeJam.Option`1.op_Implicit*
  nameWithType.vb: Option(Of T).Widening(T to Option(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Option(Of T).Widening(T to CodeJam.Option(Of T))
  name.vb: Widening(T to Option(Of T))
- uid: CodeJam.Option`1.op_Explicit(CodeJam.Option{`0})~`0
  commentId: M:CodeJam.Option`1.op_Explicit(CodeJam.Option{`0})~`0
  id: op_Explicit(CodeJam.Option{`0})~`0
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: Explicit(Option<T> to T)
  nameWithType: Option<T>.Explicit(Option<T> to T)
  fullName: CodeJam.Option<T>.Explicit(CodeJam.Option<T> to T)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Explicit
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 55
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nExtracts value from <code data-dev-comment-type=\"paramref\" class=\"paramref\">option</code>\n"
  example: []
  syntax:
    content: public static explicit operator T(Option<T> option)
    parameters:
    - id: option
      type: CodeJam.Option`1
      description: ''
    return:
      type: '{T}'
      description: Value of <code data-dev-comment-type="paramref" class="paramref">option</code>
    content.vb: Public Shared Narrowing Operator CType(option As  Option (Of T)) As T
  overload: CodeJam.Option`1.op_Explicit*
  nameWithType.vb: Option(Of T).Narrowing(Option(Of T) to T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Option(Of T).Narrowing(CodeJam.Option(Of T) to T)
  name.vb: Narrowing(Option(Of T) to T)
- uid: CodeJam.Option`1.op_Equality(CodeJam.Option{`0},CodeJam.Option{`0})
  commentId: M:CodeJam.Option`1.op_Equality(CodeJam.Option{`0},CodeJam.Option{`0})
  id: op_Equality(CodeJam.Option{`0},CodeJam.Option{`0})
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: Equality(Option<T>, Option<T>)
  nameWithType: Option<T>.Equality(Option<T>, Option<T>)
  fullName: CodeJam.Option<T>.Equality(CodeJam.Option<T>, CodeJam.Option<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Equality
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 64
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nEquality operator.\n"
  example: []
  syntax:
    content: public static bool operator ==(Option<T> left, Option<T> right)
    parameters:
    - id: left
      type: CodeJam.Option`1
      description: Left operand.
    - id: right
      type: CodeJam.Option`1
      description: Right operand.
    return:
      type: System.Boolean
      description: <code>True</code>, if <code data-dev-comment-type="paramref" class="paramref">left</code> equals <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator =(left As  Option (Of T), right As  Option (Of T)) As Boolean
  overload: CodeJam.Option`1.op_Equality*
  nameWithType.vb: Option(Of T).Equality(Option(Of T), Option(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Option(Of T).Equality(CodeJam.Option(Of T), CodeJam.Option(Of T))
  name.vb: Equality(Option(Of T), Option(Of T))
- uid: CodeJam.Option`1.op_Inequality(CodeJam.Option{`0},CodeJam.Option{`0})
  commentId: M:CodeJam.Option`1.op_Inequality(CodeJam.Option{`0},CodeJam.Option{`0})
  id: op_Inequality(CodeJam.Option{`0},CodeJam.Option{`0})
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: Inequality(Option<T>, Option<T>)
  nameWithType: Option<T>.Inequality(Option<T>, Option<T>)
  fullName: CodeJam.Option<T>.Inequality(CodeJam.Option<T>, CodeJam.Option<T>)
  type: Operator
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: op_Inequality
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 78
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nUnequality operator.\n"
  example: []
  syntax:
    content: public static bool operator !=(Option<T> left, Option<T> right)
    parameters:
    - id: left
      type: CodeJam.Option`1
      description: Left operand.
    - id: right
      type: CodeJam.Option`1
      description: Right operand.
    return:
      type: System.Boolean
      description: <code>True</code>, if <code data-dev-comment-type="paramref" class="paramref">left</code> not equals <code data-dev-comment-type="paramref" class="paramref">right</code>.
    content.vb: Public Shared Operator <>(left As  Option (Of T), right As  Option (Of T)) As Boolean
  overload: CodeJam.Option`1.op_Inequality*
  nameWithType.vb: Option(Of T).Inequality(Option(Of T), Option(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Option(Of T).Inequality(CodeJam.Option(Of T), CodeJam.Option(Of T))
  name.vb: Inequality(Option(Of T), Option(Of T))
- uid: CodeJam.Option`1.Equals(CodeJam.Option{`0})
  commentId: M:CodeJam.Option`1.Equals(CodeJam.Option{`0})
  id: Equals(CodeJam.Option{`0})
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: Equals(Option<T>)
  nameWithType: Option<T>.Equals(Option<T>)
  fullName: CodeJam.Option<T>.Equals(CodeJam.Option<T>)
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 90
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(Option<T> other)
    parameters:
    - id: other
      type: CodeJam.Option`1
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: true if the current object is equal to the <code data-dev-comment-type="paramref" class="paramref">other</code> parameter; otherwise, false.
    content.vb: Public Function Equals(other As  Option (Of T)) As Boolean
  overload: CodeJam.Option`1.Equals*
  implements:
  - System.IEquatable{CodeJam.Option`1}.Equals(CodeJam.Option{{T}})
  nameWithType.vb: Option(Of T).Equals(Option(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Option(Of T).Equals(CodeJam.Option(Of T))
  name.vb: Equals(Option(Of T))
- uid: CodeJam.Option`1.Equals(System.Object)
  commentId: M:CodeJam.Option`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Option<T>.Equals(Object)
  fullName: CodeJam.Option<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 113
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with the current instance. '
    return:
      type: System.Boolean
      description: "\ntrue if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and this instance are the same type and represent the same value;\notherwise, false.\n"
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: CodeJam.Option`1.Equals*
  nameWithType.vb: Option(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Option(Of T).Equals(System.Object)
- uid: CodeJam.Option`1.GetHashCode
  commentId: M:CodeJam.Option`1.GetHashCode
  id: GetHashCode
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Option<T>.GetHashCode()
  fullName: CodeJam.Option<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 122
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: CodeJam.Option`1.GetHashCode*
  nameWithType.vb: Option(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Option(Of T).GetHashCode()
- uid: CodeJam.Option`1.ToString
  commentId: M:CodeJam.Option`1.ToString
  id: ToString
  parent: CodeJam.Option`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Option<T>.ToString()
  fullName: CodeJam.Option<T>.ToString()
  type: Method
  source:
    remote:
      path: Main/src/Structures/Option/Option`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Structures/Option/Option`1.cs
    startLine: 127
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Returns the fully qualified type name of this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing a fully qualified type name.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: CodeJam.Option`1.ToString*
  nameWithType.vb: Option(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Option(Of T).ToString()
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.IOption{{T}}
  commentId: T:CodeJam.IOption{``0}
  parent: CodeJam
  definition: CodeJam.IOption`1
  name: IOption<T>
  nameWithType: IOption<T>
  fullName: CodeJam.IOption<T>
  nameWithType.vb: IOption(Of T)
  fullName.vb: CodeJam.IOption(Of T)
  name.vb: IOption(Of T)
  spec.csharp:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{CodeJam.Option`1}
  commentId: T:System.IEquatable{CodeJam.Option`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Option<T>>
  nameWithType: IEquatable<Option<T>>
  fullName: System.IEquatable<CodeJam.Option<T>>
  nameWithType.vb: IEquatable(Of Option(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Option(Of T))
  name.vb: IEquatable(Of Option(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.Do``1(System.Action{CodeJam.IOption{{T}}},System.Action)
  commentId: M:CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  parent: CodeJam.Option
  definition: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  name: Do<T>(Action<IOption<T>>, Action)
  nameWithType: Option.Do<T>(Action<IOption<T>>, Action)
  fullName: CodeJam.Option.Do<T>(System.Action<CodeJam.IOption<T>>, System.Action)
  nameWithType.vb: Option.Do(Of T)(Action(Of IOption(Of T)), Action)
  fullName.vb: CodeJam.Option.Do(Of T)(System.Action(Of CodeJam.IOption(Of T)), System.Action)
  name.vb: Do(Of T)(Action(Of IOption(Of T)), Action)
  spec.csharp:
  - uid: CodeJam.Option.Do``1(System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do<T>
    nameWithType: Option.Do<T>
    fullName: CodeJam.Option.Do<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.Do``1(System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do(Of T)
    nameWithType: Option.Do(Of T)
    fullName: CodeJam.Option.Do(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{{T}},{TResult}},System.Func{{TResult}})
  commentId: M:CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  parent: CodeJam.Option
  definition: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  name: GetValueOrDefault<T, TResult>(Func<IOption<T>, TResult>, Func<TResult>)
  nameWithType: Option.GetValueOrDefault<T, TResult>(Func<IOption<T>, TResult>, Func<TResult>)
  fullName: CodeJam.Option.GetValueOrDefault<T, TResult>(System.Func<CodeJam.IOption<T>, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.GetValueOrDefault(Of T, TResult)(Func(Of IOption(Of T), TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T, TResult)(System.Func(Of CodeJam.IOption(Of T), TResult), System.Func(Of TResult))
  name.vb: GetValueOrDefault(Of T, TResult)(Func(Of IOption(Of T), TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault<T, TResult>
    nameWithType: Option.GetValueOrDefault<T, TResult>
    fullName: CodeJam.Option.GetValueOrDefault<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``2(System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault(Of T, TResult)
    nameWithType: Option.GetValueOrDefault(Of T, TResult)
    fullName: CodeJam.Option.GetValueOrDefault(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.IOption{`0}.CodeJam.Option.GetValueOrDefault``1({T})
  commentId: M:CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  parent: CodeJam.Option
  definition: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  name: GetValueOrDefault<T>(T)
  nameWithType: Option.GetValueOrDefault<T>(T)
  fullName: CodeJam.Option.GetValueOrDefault<T>(T)
  nameWithType.vb: Option.GetValueOrDefault(Of T)(T)
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T)(T)
  name.vb: GetValueOrDefault(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``1(``0)
    name: GetValueOrDefault<T>
    nameWithType: Option.GetValueOrDefault<T>
    fullName: CodeJam.Option.GetValueOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``1(``0)
    name: GetValueOrDefault(Of T)
    nameWithType: Option.GetValueOrDefault(Of T)
    fullName: CodeJam.Option.GetValueOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  parent: CodeJam.Option
  definition: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  name: With<T, TResult>(Func<T, TResult>)
  nameWithType: Option.With<T, TResult>(Func<T, TResult>)
  fullName: CodeJam.Option.With<T, TResult>(System.Func<T, TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Func(Of T, TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(System.Func(Of T, TResult))
  name.vb: With(Of T, TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},{TResult})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  parent: CodeJam.Option
  definition: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  name: With<T, TResult>(Func<T, TResult>, TResult)
  nameWithType: Option.With<T, TResult>(Func<T, TResult>, TResult)
  fullName: CodeJam.Option.With<T, TResult>(System.Func<T, TResult>, TResult)
  nameWithType.vb: Option.With(Of T, TResult)(Func(Of T, TResult), TResult)
  fullName.vb: CodeJam.Option.With(Of T, TResult)(System.Func(Of T, TResult), TResult)
  name.vb: With(Of T, TResult)(Func(Of T, TResult), TResult)
  spec.csharp:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},``1)
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},``1)
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Option.With``2(System.Func{{T},{TResult}},System.Func{{TResult}})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  parent: CodeJam.Option
  definition: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  name: With<T, TResult>(Func<T, TResult>, Func<TResult>)
  nameWithType: Option.With<T, TResult>(Func<T, TResult>, Func<TResult>)
  fullName: CodeJam.Option.With<T, TResult>(System.Func<T, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Func(Of T, TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(System.Func(Of T, TResult), System.Func(Of TResult))
  name.vb: With(Of T, TResult)(Func(Of T, TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},System.Func{``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(System.Func{``0,``1},System.Func{``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, Option<T>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, Option<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Option<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, Option(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Option(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, Option(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, Option<T>>
    nameWithType: RangeExtensions.Contains<T, Option<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Option<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, Option(Of T))
    nameWithType: RangeExtensions.Contains(Of T, Option(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Option(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, Option<T>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, Option<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Option<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, Option(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Option(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, Option(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, Option<T>>
    nameWithType: RangeExtensions.StartsAfter<T, Option<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Option<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, Option(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, Option(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Option(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, Option<T>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, Option<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Option<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, Option(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Option(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, Option(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, Option<T>>
    nameWithType: RangeExtensions.EndsBefore<T, Option<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Option<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, Option(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, Option(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Option(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, Option<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, Option<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Option<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, Option(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Option(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, Option(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, Option<T>>
    nameWithType: RangeExtensions.Contains<T, TKey, Option<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Option<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, Option(Of T))
    nameWithType: RangeExtensions.Contains(Of T, TKey, Option(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Option(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, Option<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, Option<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Option<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, Option(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Option(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, Option(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, Option<T>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, Option<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Option<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, Option(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, Option(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Option(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, Option<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, Option<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Option<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, Option(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Option(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, Option(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, Option<T>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, Option<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Option<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, Option(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, Option(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Option(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.IOption`1
  commentId: T:CodeJam.IOption`1
  isExternal: false
  name: IOption<T>
  nameWithType: IOption<T>
  fullName: CodeJam.IOption<T>
  nameWithType.vb: IOption(Of T)
  fullName.vb: CodeJam.IOption(Of T)
  name.vb: IOption(Of T)
  spec.csharp:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  commentId: M:CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
  isExternal: true
  name: Do<T>(IOption<T>, Action<IOption<T>>, Action)
  nameWithType: Option.Do<T>(IOption<T>, Action<IOption<T>>, Action)
  fullName: CodeJam.Option.Do<T>(CodeJam.IOption<T>, System.Action<CodeJam.IOption<T>>, System.Action)
  nameWithType.vb: Option.Do(Of T)(IOption(Of T), Action(Of IOption(Of T)), Action)
  fullName.vb: CodeJam.Option.Do(Of T)(CodeJam.IOption(Of T), System.Action(Of CodeJam.IOption(Of T)), System.Action)
  name.vb: Do(Of T)(IOption(Of T), Action(Of IOption(Of T)), Action)
  spec.csharp:
  - uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do<T>
    nameWithType: Option.Do<T>
    fullName: CodeJam.Option.Do<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)
    name: Do(Of T)
    nameWithType: Option.Do(Of T)
    fullName: CodeJam.Option.Do(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option
  commentId: T:CodeJam.Option
  parent: CodeJam
  isExternal: false
  name: Option
  nameWithType: Option
  fullName: CodeJam.Option
- uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  commentId: M:CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
  isExternal: true
  name: GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>)
  nameWithType: Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>)
  fullName: CodeJam.Option.GetValueOrDefault<T, TResult>(CodeJam.IOption<T>, System.Func<CodeJam.IOption<T>, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.GetValueOrDefault(Of T, TResult)(IOption(Of T), Func(Of IOption(Of T), TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T, TResult)(CodeJam.IOption(Of T), System.Func(Of CodeJam.IOption(Of T), TResult), System.Func(Of TResult))
  name.vb: GetValueOrDefault(Of T, TResult)(IOption(Of T), Func(Of IOption(Of T), TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault<T, TResult>
    nameWithType: Option.GetValueOrDefault<T, TResult>
    fullName: CodeJam.Option.GetValueOrDefault<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})
    name: GetValueOrDefault(Of T, TResult)
    nameWithType: Option.GetValueOrDefault(Of T, TResult)
    fullName: CodeJam.Option.GetValueOrDefault(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  commentId: M:CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
  isExternal: false
  name: GetValueOrDefault<T>(IOption<T>, T)
  nameWithType: Option.GetValueOrDefault<T>(IOption<T>, T)
  fullName: CodeJam.Option.GetValueOrDefault<T>(CodeJam.IOption<T>, T)
  nameWithType.vb: Option.GetValueOrDefault(Of T)(IOption(Of T), T)
  fullName.vb: CodeJam.Option.GetValueOrDefault(Of T)(CodeJam.IOption(Of T), T)
  name.vb: GetValueOrDefault(Of T)(IOption(Of T), T)
  spec.csharp:
  - uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
    name: GetValueOrDefault<T>
    nameWithType: Option.GetValueOrDefault<T>
    fullName: CodeJam.Option.GetValueOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)
    name: GetValueOrDefault(Of T)
    nameWithType: Option.GetValueOrDefault(Of T)
    fullName: CodeJam.Option.GetValueOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.IOption`1
    name: IOption
    nameWithType: IOption
    fullName: CodeJam.IOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
  isExternal: true
  name: With<T, TResult>(Option<T>, Func<T, TResult>)
  nameWithType: Option.With<T, TResult>(Option<T>, Func<T, TResult>)
  fullName: CodeJam.Option.With<T, TResult>(CodeJam.Option<T>, System.Func<T, TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Option(Of T), Func(Of T, TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(CodeJam.Option(Of T), System.Func(Of T, TResult))
  name.vb: With(Of T, TResult)(Option(Of T), Func(Of T, TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
  isExternal: true
  name: With<T, TResult>(Option<T>, Func<T, TResult>, TResult)
  nameWithType: Option.With<T, TResult>(Option<T>, Func<T, TResult>, TResult)
  fullName: CodeJam.Option.With<T, TResult>(CodeJam.Option<T>, System.Func<T, TResult>, TResult)
  nameWithType.vb: Option.With(Of T, TResult)(Option(Of T), Func(Of T, TResult), TResult)
  fullName.vb: CodeJam.Option.With(Of T, TResult)(CodeJam.Option(Of T), System.Func(Of T, TResult), TResult)
  name.vb: With(Of T, TResult)(Option(Of T), Func(Of T, TResult), TResult)
  spec.csharp:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  commentId: M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
  isExternal: true
  name: With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>)
  nameWithType: Option.With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>)
  fullName: CodeJam.Option.With<T, TResult>(CodeJam.Option<T>, System.Func<T, TResult>, System.Func<TResult>)
  nameWithType.vb: Option.With(Of T, TResult)(Option(Of T), Func(Of T, TResult), Func(Of TResult))
  fullName.vb: CodeJam.Option.With(Of T, TResult)(CodeJam.Option(Of T), System.Func(Of T, TResult), System.Func(Of TResult))
  name.vb: With(Of T, TResult)(Option(Of T), Func(Of T, TResult), Func(Of TResult))
  spec.csharp:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
    name: With<T, TResult>
    nameWithType: Option.With<T, TResult>
    fullName: CodeJam.Option.With<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})
    name: With(Of T, TResult)
    nameWithType: Option.With(Of T, TResult)
    fullName: CodeJam.Option.With(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Option`1.HasValue*
  commentId: Overload:CodeJam.Option`1.HasValue
  isExternal: false
  name: HasValue
  nameWithType: Option<T>.HasValue
  fullName: CodeJam.Option<T>.HasValue
  nameWithType.vb: Option(Of T).HasValue
  fullName.vb: CodeJam.Option(Of T).HasValue
- uid: CodeJam.IOption{{T}}.HasValue
  commentId: P:CodeJam.IOption{`0}.HasValue
  parent: CodeJam.IOption{{T}}
  definition: CodeJam.IOption`1.HasValue
  name: HasValue
  nameWithType: IOption<T>.HasValue
  fullName: CodeJam.IOption<T>.HasValue
  nameWithType.vb: IOption(Of T).HasValue
  fullName.vb: CodeJam.IOption(Of T).HasValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.IOption`1.HasValue
  commentId: P:CodeJam.IOption`1.HasValue
  isExternal: false
  name: HasValue
  nameWithType: IOption<T>.HasValue
  fullName: CodeJam.IOption<T>.HasValue
  nameWithType.vb: IOption(Of T).HasValue
  fullName.vb: CodeJam.IOption(Of T).HasValue
- uid: CodeJam.Option`1.IsSome*
  commentId: Overload:CodeJam.Option`1.IsSome
  isExternal: false
  name: IsSome
  nameWithType: Option<T>.IsSome
  fullName: CodeJam.Option<T>.IsSome
  nameWithType.vb: Option(Of T).IsSome
  fullName.vb: CodeJam.Option(Of T).IsSome
- uid: CodeJam.Option`1.IsNone*
  commentId: Overload:CodeJam.Option`1.IsNone
  isExternal: false
  name: IsNone
  nameWithType: Option<T>.IsNone
  fullName: CodeJam.Option<T>.IsNone
  nameWithType.vb: Option(Of T).IsNone
  fullName.vb: CodeJam.Option(Of T).IsNone
- uid: CodeJam.Option`1.Value*
  commentId: Overload:CodeJam.Option`1.Value
  isExternal: false
  name: Value
  nameWithType: Option<T>.Value
  fullName: CodeJam.Option<T>.Value
  nameWithType.vb: Option(Of T).Value
  fullName.vb: CodeJam.Option(Of T).Value
- uid: CodeJam.IOption{{T}}.Value
  commentId: P:CodeJam.IOption{`0}.Value
  parent: CodeJam.IOption{{T}}
  definition: CodeJam.IOption`1.Value
  name: Value
  nameWithType: IOption<T>.Value
  fullName: CodeJam.IOption<T>.Value
  nameWithType.vb: IOption(Of T).Value
  fullName.vb: CodeJam.IOption(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.IOption`1.Value
  commentId: P:CodeJam.IOption`1.Value
  isExternal: false
  name: Value
  nameWithType: IOption<T>.Value
  fullName: CodeJam.IOption<T>.Value
  nameWithType.vb: IOption(Of T).Value
  fullName.vb: CodeJam.IOption(Of T).Value
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Option`1.Some
  commentId: T:CodeJam.Option`1.Some
  isExternal: false
  name: Option.Some<>
  nameWithType: Option.Some<>
  fullName: CodeJam.Option.Some<>
  nameWithType.vb: Option.Some(Of )
  fullName.vb: CodeJam.Option.Some(Of )
  name.vb: Option.Some(Of )
  spec.csharp:
  - uid: CodeJam.Option`1.Some
    name: Option.Some
    nameWithType: Option.Some
    fullName: CodeJam.Option.Some
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Option`1.Some
    name: Option.Some
    nameWithType: Option.Some
    fullName: CodeJam.Option.Some
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.op_Implicit*
  commentId: Overload:CodeJam.Option`1.op_Implicit
  isExternal: false
  name: Implicit
  nameWithType: Option<T>.Implicit
  fullName: CodeJam.Option<T>.Implicit
  nameWithType.vb: Option(Of T).Widening
  fullName.vb: CodeJam.Option(Of T).Widening
  name.vb: Widening
- uid: CodeJam.Option`1
  commentId: T:CodeJam.Option`1
  parent: CodeJam
  isExternal: false
  name: Option<T>
  nameWithType: Option<T>
  fullName: CodeJam.Option<T>
  nameWithType.vb: Option(Of T)
  fullName.vb: CodeJam.Option(Of T)
  name.vb: Option(Of T)
  spec.csharp:
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.op_Explicit*
  commentId: Overload:CodeJam.Option`1.op_Explicit
  isExternal: false
  name: Explicit
  nameWithType: Option<T>.Explicit
  fullName: CodeJam.Option<T>.Explicit
  nameWithType.vb: Option(Of T).Narrowing
  fullName.vb: CodeJam.Option(Of T).Narrowing
  name.vb: Narrowing
- uid: CodeJam.Option`1.op_Equality*
  commentId: Overload:CodeJam.Option`1.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Option<T>.Equality
  fullName: CodeJam.Option<T>.Equality
  nameWithType.vb: Option(Of T).Equality
  fullName.vb: CodeJam.Option(Of T).Equality
- uid: CodeJam.Option`1.op_Inequality*
  commentId: Overload:CodeJam.Option`1.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Option<T>.Inequality
  fullName: CodeJam.Option<T>.Inequality
  nameWithType.vb: Option(Of T).Inequality
  fullName.vb: CodeJam.Option(Of T).Inequality
- uid: CodeJam.Option`1.Equals*
  commentId: Overload:CodeJam.Option`1.Equals
  isExternal: false
  name: Equals
  nameWithType: Option<T>.Equals
  fullName: CodeJam.Option<T>.Equals
  nameWithType.vb: Option(Of T).Equals
  fullName.vb: CodeJam.Option(Of T).Equals
- uid: System.IEquatable{CodeJam.Option`1}.Equals(CodeJam.Option{{T}})
  commentId: M:System.IEquatable{CodeJam.Option`1}.Equals(CodeJam.Option{`0})
  parent: System.IEquatable{CodeJam.Option`1}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Option<T>)
  nameWithType: IEquatable<Option<T>>.Equals(Option<T>)
  fullName: System.IEquatable<CodeJam.Option<T>>.Equals(CodeJam.Option<T>)
  nameWithType.vb: IEquatable(Of Option(Of T)).Equals(Option(Of T))
  fullName.vb: System.IEquatable(Of CodeJam.Option(Of T)).Equals(CodeJam.Option(Of T))
  name.vb: Equals(Option(Of T))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Option<T>>.Equals
    fullName: System.IEquatable<CodeJam.Option<T>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Option(Of T)).Equals
    fullName: System.IEquatable(Of CodeJam.Option(Of T)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Option`1
    name: Option
    nameWithType: Option
    fullName: CodeJam.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.GetHashCode*
  commentId: Overload:CodeJam.Option`1.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Option<T>.GetHashCode
  fullName: CodeJam.Option<T>.GetHashCode
  nameWithType.vb: Option(Of T).GetHashCode
  fullName.vb: CodeJam.Option(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Option`1.ToString*
  commentId: Overload:CodeJam.Option`1.ToString
  isExternal: false
  name: ToString
  nameWithType: Option<T>.ToString
  fullName: CodeJam.Option<T>.ToString
  nameWithType.vb: Option(Of T).ToString
  fullName.vb: CodeJam.Option(Of T).ToString
