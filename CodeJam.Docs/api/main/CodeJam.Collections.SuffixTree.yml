### YamlMime:ManagedReference
items:
- uid: CodeJam.Collections.SuffixTree
  commentId: T:CodeJam.Collections.SuffixTree
  id: SuffixTree
  parent: CodeJam.Collections
  children:
  - CodeJam.Collections.SuffixTree.#ctor
  - CodeJam.Collections.SuffixTree.AppendNodeText(System.Text.StringBuilder,System.Int32)
  - CodeJam.Collections.SuffixTree.BuildFor(System.Int32,System.Int32)
  - CodeJam.Collections.SuffixTree.Compact
  - CodeJam.Collections.SuffixTree.InvalidNodeIndex
  langs:
  - csharp
  - vb
  name: SuffixTree
  nameWithType: SuffixTree
  fullName: CodeJam.Collections.SuffixTree
  type: Class
  source:
    remote:
      path: Main/src/Collections/SuffixTree/SuffixTree.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SuffixTree
    path: ../Main/src/Collections/SuffixTree/SuffixTree.cs
    startLine: 17
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nImplementation of the suffix tree with Ukkonen&apos;s algorithm\n<remarks>\nSee http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english/9513423\nand http://www.cise.ufl.edu/~sahni/dsaaj/enrich/c16/suffix.htm\n</remarks>\n"
  example: []
  syntax:
    content: 'public class SuffixTree : SuffixTreeBase'
    content.vb: >-
      Public Class SuffixTree
          Inherits SuffixTreeBase
  inheritance:
  - System.Object
  - CodeJam.Collections.SuffixTreeBase
  inheritedMembers:
  - CodeJam.Collections.SuffixTreeBase.RootNodeIndex
  - CodeJam.Collections.SuffixTreeBase.Root
  - CodeJam.Collections.SuffixTreeBase.EdgeComparer
  - CodeJam.Collections.SuffixTreeBase.AddNode(CodeJam.Collections.SuffixTreeBase.Node)
  - CodeJam.Collections.SuffixTreeBase.UpdateNode(System.Int32,CodeJam.Collections.SuffixTreeBase.Node)
  - CodeJam.Collections.SuffixTreeBase.GetNode(System.Int32)
  - CodeJam.Collections.SuffixTreeBase.NodesCount
  - CodeJam.Collections.SuffixTreeBase.InternalData
  - CodeJam.Collections.SuffixTreeBase.StringLocations
  - CodeJam.Collections.SuffixTreeBase.Add(System.String)
  - CodeJam.Collections.SuffixTreeBase.All
  - CodeJam.Collections.SuffixTreeBase.Contains(System.String)
  - CodeJam.Collections.SuffixTreeBase.ContainsSuffix(System.String)
  - CodeJam.Collections.SuffixTreeBase.StartingWith(System.String)
  - CodeJam.Collections.SuffixTreeBase.Print
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CodeJam.Collections.SuffixTree.InvalidNodeIndex
  commentId: F:CodeJam.Collections.SuffixTree.InvalidNodeIndex
  id: InvalidNodeIndex
  parent: CodeJam.Collections.SuffixTree
  langs:
  - csharp
  - vb
  name: InvalidNodeIndex
  nameWithType: SuffixTree.InvalidNodeIndex
  fullName: CodeJam.Collections.SuffixTree.InvalidNodeIndex
  type: Field
  source:
    remote:
      path: Main/src/Collections/SuffixTree/SuffixTree.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: InvalidNodeIndex
    path: ../Main/src/Collections/SuffixTree/SuffixTree.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Unassigned node index
  example: []
  syntax:
    content: protected const int InvalidNodeIndex = -1
    return:
      type: System.Int32
    content.vb: Protected Const InvalidNodeIndex As Integer = -1
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: CodeJam.Collections.SuffixTree.#ctor
  commentId: M:CodeJam.Collections.SuffixTree.#ctor
  id: '#ctor'
  parent: CodeJam.Collections.SuffixTree
  langs:
  - csharp
  - vb
  name: SuffixTree()
  nameWithType: SuffixTree.SuffixTree()
  fullName: CodeJam.Collections.SuffixTree.SuffixTree()
  type: Constructor
  source:
    remote:
      path: Main/src/Collections/SuffixTree/SuffixTree.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Collections/SuffixTree/SuffixTree.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates instance of <xref href=\"CodeJam.Collections.SuffixTree\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SuffixTree()
    content.vb: Public Sub New
  overload: CodeJam.Collections.SuffixTree.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CodeJam.Collections.SuffixTree.Compact
  commentId: M:CodeJam.Collections.SuffixTree.Compact
  id: Compact
  parent: CodeJam.Collections.SuffixTree
  langs:
  - csharp
  - vb
  name: Compact()
  nameWithType: SuffixTree.Compact()
  fullName: CodeJam.Collections.SuffixTree.Compact()
  type: Method
  source:
    remote:
      path: Main/src/Collections/SuffixTree/SuffixTree.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Compact
    path: ../Main/src/Collections/SuffixTree/SuffixTree.cs
    startLine: 55
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Releases internal structures used only for tree building to free some memory
  remarks: "\nCalling this method may result in a worse building algorithm complexity for subsequent <xref href=\"CodeJam.Collections.SuffixTreeBase.Add(System.String)\" data-throw-if-not-resolved=\"false\"></xref> calls.\nSo, it is not recommended to call it unless no more string are going to be added to the tree.\n"
  example: []
  syntax:
    content: public void Compact()
    content.vb: Public Sub Compact
  overload: CodeJam.Collections.SuffixTree.Compact*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CodeJam.Collections.SuffixTree.BuildFor(System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.SuffixTree.BuildFor(System.Int32,System.Int32)
  id: BuildFor(System.Int32,System.Int32)
  parent: CodeJam.Collections.SuffixTree
  langs:
  - csharp
  - vb
  name: BuildFor(Int32, Int32)
  nameWithType: SuffixTree.BuildFor(Int32, Int32)
  fullName: CodeJam.Collections.SuffixTree.BuildFor(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/SuffixTree/SuffixTree.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BuildFor
    path: ../Main/src/Collections/SuffixTree/SuffixTree.cs
    startLine: 65
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: Appends suffixes for the last added string
  example: []
  syntax:
    content: protected override void BuildFor(int begin, int end)
    parameters:
    - id: begin
      type: System.Int32
    - id: end
      type: System.Int32
    content.vb: Protected Overrides Sub BuildFor(begin As Integer, end As Integer)
  overridden: CodeJam.Collections.SuffixTreeBase.BuildFor(System.Int32,System.Int32)
  overload: CodeJam.Collections.SuffixTree.BuildFor*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: CodeJam.Collections.SuffixTree.AppendNodeText(System.Text.StringBuilder,System.Int32)
  commentId: M:CodeJam.Collections.SuffixTree.AppendNodeText(System.Text.StringBuilder,System.Int32)
  id: AppendNodeText(System.Text.StringBuilder,System.Int32)
  parent: CodeJam.Collections.SuffixTree
  langs:
  - csharp
  - vb
  name: AppendNodeText(StringBuilder, Int32)
  nameWithType: SuffixTree.AppendNodeText(StringBuilder, Int32)
  fullName: CodeJam.Collections.SuffixTree.AppendNodeText(System.Text.StringBuilder, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Collections/SuffixTree/SuffixTree.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AppendNodeText
    path: ../Main/src/Collections/SuffixTree/SuffixTree.cs
    startLine: 334
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAppends specified node text.\n"
  example: []
  syntax:
    content: protected override void AppendNodeText(StringBuilder sb, int nodeIndex)
    parameters:
    - id: sb
      type: System.Text.StringBuilder
      description: <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to append node text to
    - id: nodeIndex
      type: System.Int32
      description: Node index.
    content.vb: Protected Overrides Sub AppendNodeText(sb As StringBuilder, nodeIndex As Integer)
  overridden: CodeJam.Collections.SuffixTreeBase.AppendNodeText(System.Text.StringBuilder,System.Int32)
  overload: CodeJam.Collections.SuffixTree.AppendNodeText*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: CodeJam.Collections
  commentId: N:CodeJam.Collections
  isExternal: false
  name: CodeJam.Collections
  nameWithType: CodeJam.Collections
  fullName: CodeJam.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.Collections.SuffixTreeBase
  commentId: T:CodeJam.Collections.SuffixTreeBase
  parent: CodeJam.Collections
  isExternal: false
  name: SuffixTreeBase
  nameWithType: SuffixTreeBase
  fullName: CodeJam.Collections.SuffixTreeBase
- uid: CodeJam.Collections.SuffixTreeBase.RootNodeIndex
  commentId: F:CodeJam.Collections.SuffixTreeBase.RootNodeIndex
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: RootNodeIndex
  nameWithType: SuffixTreeBase.RootNodeIndex
  fullName: CodeJam.Collections.SuffixTreeBase.RootNodeIndex
- uid: CodeJam.Collections.SuffixTreeBase.Root
  commentId: P:CodeJam.Collections.SuffixTreeBase.Root
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: Root
  nameWithType: SuffixTreeBase.Root
  fullName: CodeJam.Collections.SuffixTreeBase.Root
- uid: CodeJam.Collections.SuffixTreeBase.EdgeComparer
  commentId: P:CodeJam.Collections.SuffixTreeBase.EdgeComparer
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: EdgeComparer
  nameWithType: SuffixTreeBase.EdgeComparer
  fullName: CodeJam.Collections.SuffixTreeBase.EdgeComparer
- uid: CodeJam.Collections.SuffixTreeBase.AddNode(CodeJam.Collections.SuffixTreeBase.Node)
  commentId: M:CodeJam.Collections.SuffixTreeBase.AddNode(CodeJam.Collections.SuffixTreeBase.Node)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: AddNode(SuffixTreeBase.Node)
  nameWithType: SuffixTreeBase.AddNode(SuffixTreeBase.Node)
  fullName: CodeJam.Collections.SuffixTreeBase.AddNode(CodeJam.Collections.SuffixTreeBase.Node)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.AddNode(CodeJam.Collections.SuffixTreeBase.Node)
    name: AddNode
    nameWithType: SuffixTreeBase.AddNode
    fullName: CodeJam.Collections.SuffixTreeBase.AddNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Collections.SuffixTreeBase.Node
    name: SuffixTreeBase.Node
    nameWithType: SuffixTreeBase.Node
    fullName: CodeJam.Collections.SuffixTreeBase.Node
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.AddNode(CodeJam.Collections.SuffixTreeBase.Node)
    name: AddNode
    nameWithType: SuffixTreeBase.AddNode
    fullName: CodeJam.Collections.SuffixTreeBase.AddNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Collections.SuffixTreeBase.Node
    name: SuffixTreeBase.Node
    nameWithType: SuffixTreeBase.Node
    fullName: CodeJam.Collections.SuffixTreeBase.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.UpdateNode(System.Int32,CodeJam.Collections.SuffixTreeBase.Node)
  commentId: M:CodeJam.Collections.SuffixTreeBase.UpdateNode(System.Int32,CodeJam.Collections.SuffixTreeBase.Node)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: UpdateNode(Int32, SuffixTreeBase.Node)
  nameWithType: SuffixTreeBase.UpdateNode(Int32, SuffixTreeBase.Node)
  fullName: CodeJam.Collections.SuffixTreeBase.UpdateNode(System.Int32, CodeJam.Collections.SuffixTreeBase.Node)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.UpdateNode(System.Int32,CodeJam.Collections.SuffixTreeBase.Node)
    name: UpdateNode
    nameWithType: SuffixTreeBase.UpdateNode
    fullName: CodeJam.Collections.SuffixTreeBase.UpdateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Collections.SuffixTreeBase.Node
    name: SuffixTreeBase.Node
    nameWithType: SuffixTreeBase.Node
    fullName: CodeJam.Collections.SuffixTreeBase.Node
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.UpdateNode(System.Int32,CodeJam.Collections.SuffixTreeBase.Node)
    name: UpdateNode
    nameWithType: SuffixTreeBase.UpdateNode
    fullName: CodeJam.Collections.SuffixTreeBase.UpdateNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Collections.SuffixTreeBase.Node
    name: SuffixTreeBase.Node
    nameWithType: SuffixTreeBase.Node
    fullName: CodeJam.Collections.SuffixTreeBase.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.GetNode(System.Int32)
  commentId: M:CodeJam.Collections.SuffixTreeBase.GetNode(System.Int32)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: GetNode(Int32)
  nameWithType: SuffixTreeBase.GetNode(Int32)
  fullName: CodeJam.Collections.SuffixTreeBase.GetNode(System.Int32)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.GetNode(System.Int32)
    name: GetNode
    nameWithType: SuffixTreeBase.GetNode
    fullName: CodeJam.Collections.SuffixTreeBase.GetNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.GetNode(System.Int32)
    name: GetNode
    nameWithType: SuffixTreeBase.GetNode
    fullName: CodeJam.Collections.SuffixTreeBase.GetNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.NodesCount
  commentId: P:CodeJam.Collections.SuffixTreeBase.NodesCount
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: NodesCount
  nameWithType: SuffixTreeBase.NodesCount
  fullName: CodeJam.Collections.SuffixTreeBase.NodesCount
- uid: CodeJam.Collections.SuffixTreeBase.InternalData
  commentId: P:CodeJam.Collections.SuffixTreeBase.InternalData
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: InternalData
  nameWithType: SuffixTreeBase.InternalData
  fullName: CodeJam.Collections.SuffixTreeBase.InternalData
- uid: CodeJam.Collections.SuffixTreeBase.StringLocations
  commentId: P:CodeJam.Collections.SuffixTreeBase.StringLocations
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: StringLocations
  nameWithType: SuffixTreeBase.StringLocations
  fullName: CodeJam.Collections.SuffixTreeBase.StringLocations
- uid: CodeJam.Collections.SuffixTreeBase.Add(System.String)
  commentId: M:CodeJam.Collections.SuffixTreeBase.Add(System.String)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: Add(String)
  nameWithType: SuffixTreeBase.Add(String)
  fullName: CodeJam.Collections.SuffixTreeBase.Add(System.String)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.Add(System.String)
    name: Add
    nameWithType: SuffixTreeBase.Add
    fullName: CodeJam.Collections.SuffixTreeBase.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.Add(System.String)
    name: Add
    nameWithType: SuffixTreeBase.Add
    fullName: CodeJam.Collections.SuffixTreeBase.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.All
  commentId: M:CodeJam.Collections.SuffixTreeBase.All
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: All()
  nameWithType: SuffixTreeBase.All()
  fullName: CodeJam.Collections.SuffixTreeBase.All()
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.All
    name: All
    nameWithType: SuffixTreeBase.All
    fullName: CodeJam.Collections.SuffixTreeBase.All
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.All
    name: All
    nameWithType: SuffixTreeBase.All
    fullName: CodeJam.Collections.SuffixTreeBase.All
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.Contains(System.String)
  commentId: M:CodeJam.Collections.SuffixTreeBase.Contains(System.String)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: Contains(String)
  nameWithType: SuffixTreeBase.Contains(String)
  fullName: CodeJam.Collections.SuffixTreeBase.Contains(System.String)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.Contains(System.String)
    name: Contains
    nameWithType: SuffixTreeBase.Contains
    fullName: CodeJam.Collections.SuffixTreeBase.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.Contains(System.String)
    name: Contains
    nameWithType: SuffixTreeBase.Contains
    fullName: CodeJam.Collections.SuffixTreeBase.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.ContainsSuffix(System.String)
  commentId: M:CodeJam.Collections.SuffixTreeBase.ContainsSuffix(System.String)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: ContainsSuffix(String)
  nameWithType: SuffixTreeBase.ContainsSuffix(String)
  fullName: CodeJam.Collections.SuffixTreeBase.ContainsSuffix(System.String)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.ContainsSuffix(System.String)
    name: ContainsSuffix
    nameWithType: SuffixTreeBase.ContainsSuffix
    fullName: CodeJam.Collections.SuffixTreeBase.ContainsSuffix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.ContainsSuffix(System.String)
    name: ContainsSuffix
    nameWithType: SuffixTreeBase.ContainsSuffix
    fullName: CodeJam.Collections.SuffixTreeBase.ContainsSuffix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.StartingWith(System.String)
  commentId: M:CodeJam.Collections.SuffixTreeBase.StartingWith(System.String)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: StartingWith(String)
  nameWithType: SuffixTreeBase.StartingWith(String)
  fullName: CodeJam.Collections.SuffixTreeBase.StartingWith(System.String)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.StartingWith(System.String)
    name: StartingWith
    nameWithType: SuffixTreeBase.StartingWith
    fullName: CodeJam.Collections.SuffixTreeBase.StartingWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.StartingWith(System.String)
    name: StartingWith
    nameWithType: SuffixTreeBase.StartingWith
    fullName: CodeJam.Collections.SuffixTreeBase.StartingWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTreeBase.Print
  commentId: M:CodeJam.Collections.SuffixTreeBase.Print
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: false
  name: Print()
  nameWithType: SuffixTreeBase.Print()
  fullName: CodeJam.Collections.SuffixTreeBase.Print()
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.Print
    name: Print
    nameWithType: SuffixTreeBase.Print
    fullName: CodeJam.Collections.SuffixTreeBase.Print
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.Print
    name: Print
    nameWithType: SuffixTreeBase.Print
    fullName: CodeJam.Collections.SuffixTreeBase.Print
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, SuffixTree>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, SuffixTree>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Collections.SuffixTree>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, SuffixTree)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Collections.SuffixTree)(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, SuffixTree)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, SuffixTree>
    nameWithType: RangeExtensions.Contains<T, SuffixTree>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Collections.SuffixTree>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, SuffixTree)
    nameWithType: RangeExtensions.Contains(Of T, SuffixTree)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Collections.SuffixTree)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, SuffixTree>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, SuffixTree>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Collections.SuffixTree>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, SuffixTree)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Collections.SuffixTree)(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, SuffixTree)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, SuffixTree>
    nameWithType: RangeExtensions.StartsAfter<T, SuffixTree>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Collections.SuffixTree>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, SuffixTree)
    nameWithType: RangeExtensions.StartsAfter(Of T, SuffixTree)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Collections.SuffixTree)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, SuffixTree>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, SuffixTree>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Collections.SuffixTree>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, SuffixTree)(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Collections.SuffixTree)(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, SuffixTree)(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, SuffixTree>
    nameWithType: RangeExtensions.EndsBefore<T, SuffixTree>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Collections.SuffixTree>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, SuffixTree)
    nameWithType: RangeExtensions.EndsBefore(Of T, SuffixTree)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Collections.SuffixTree)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, SuffixTree>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, SuffixTree>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Collections.SuffixTree>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, SuffixTree)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Collections.SuffixTree)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, SuffixTree)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, SuffixTree>
    nameWithType: RangeExtensions.Contains<T, TKey, SuffixTree>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Collections.SuffixTree>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, SuffixTree)
    nameWithType: RangeExtensions.Contains(Of T, TKey, SuffixTree)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Collections.SuffixTree)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, SuffixTree>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, SuffixTree>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Collections.SuffixTree>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, SuffixTree)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Collections.SuffixTree)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, SuffixTree)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, SuffixTree>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, SuffixTree>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Collections.SuffixTree>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, SuffixTree)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, SuffixTree)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Collections.SuffixTree)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, SuffixTree>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, SuffixTree>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Collections.SuffixTree>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, SuffixTree)(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Collections.SuffixTree)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, SuffixTree)(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, SuffixTree>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, SuffixTree>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Collections.SuffixTree>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, SuffixTree)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, SuffixTree)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Collections.SuffixTree)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CodeJam.Collections.SuffixTree
  commentId: T:CodeJam.Collections.SuffixTree
  isExternal: false
  name: SuffixTree
  nameWithType: SuffixTree
  fullName: CodeJam.Collections.SuffixTree
- uid: CodeJam.Collections.SuffixTree.#ctor*
  commentId: Overload:CodeJam.Collections.SuffixTree.#ctor
  isExternal: false
  name: SuffixTree
  nameWithType: SuffixTree.SuffixTree
  fullName: CodeJam.Collections.SuffixTree.SuffixTree
- uid: CodeJam.Collections.SuffixTree.Compact*
  commentId: Overload:CodeJam.Collections.SuffixTree.Compact
  isExternal: false
  name: Compact
  nameWithType: SuffixTree.Compact
  fullName: CodeJam.Collections.SuffixTree.Compact
- uid: CodeJam.Collections.SuffixTreeBase.BuildFor(System.Int32,System.Int32)
  commentId: M:CodeJam.Collections.SuffixTreeBase.BuildFor(System.Int32,System.Int32)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: BuildFor(Int32, Int32)
  nameWithType: SuffixTreeBase.BuildFor(Int32, Int32)
  fullName: CodeJam.Collections.SuffixTreeBase.BuildFor(System.Int32, System.Int32)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.BuildFor(System.Int32,System.Int32)
    name: BuildFor
    nameWithType: SuffixTreeBase.BuildFor
    fullName: CodeJam.Collections.SuffixTreeBase.BuildFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.BuildFor(System.Int32,System.Int32)
    name: BuildFor
    nameWithType: SuffixTreeBase.BuildFor
    fullName: CodeJam.Collections.SuffixTreeBase.BuildFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.BuildFor*
  commentId: Overload:CodeJam.Collections.SuffixTree.BuildFor
  isExternal: false
  name: BuildFor
  nameWithType: SuffixTree.BuildFor
  fullName: CodeJam.Collections.SuffixTree.BuildFor
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: CodeJam.Collections.SuffixTreeBase.AppendNodeText(System.Text.StringBuilder,System.Int32)
  commentId: M:CodeJam.Collections.SuffixTreeBase.AppendNodeText(System.Text.StringBuilder,System.Int32)
  parent: CodeJam.Collections.SuffixTreeBase
  isExternal: true
  name: AppendNodeText(StringBuilder, Int32)
  nameWithType: SuffixTreeBase.AppendNodeText(StringBuilder, Int32)
  fullName: CodeJam.Collections.SuffixTreeBase.AppendNodeText(System.Text.StringBuilder, System.Int32)
  spec.csharp:
  - uid: CodeJam.Collections.SuffixTreeBase.AppendNodeText(System.Text.StringBuilder,System.Int32)
    name: AppendNodeText
    nameWithType: SuffixTreeBase.AppendNodeText
    fullName: CodeJam.Collections.SuffixTreeBase.AppendNodeText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Collections.SuffixTreeBase.AppendNodeText(System.Text.StringBuilder,System.Int32)
    name: AppendNodeText
    nameWithType: SuffixTreeBase.AppendNodeText
    fullName: CodeJam.Collections.SuffixTreeBase.AppendNodeText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.SuffixTree.AppendNodeText*
  commentId: Overload:CodeJam.Collections.SuffixTree.AppendNodeText
  isExternal: false
  name: AppendNodeText
  nameWithType: SuffixTree.AppendNodeText
  fullName: CodeJam.Collections.SuffixTree.AppendNodeText
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
