### YamlMime:ManagedReference
items:
- uid: CodeJam.Collections.LazyDictionary
  commentId: T:CodeJam.Collections.LazyDictionary
  id: LazyDictionary
  parent: CodeJam.Collections
  children:
  - CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Boolean)
  - CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  - CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  - CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  langs:
  - csharp
  - vb
  name: LazyDictionary
  nameWithType: LazyDictionary
  fullName: CodeJam.Collections.LazyDictionary
  type: Class
  source:
    remote:
      path: Main/src/Collections/Dictionary/LazyDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LazyDictionary
    path: ../Main/src/Collections/Dictionary/LazyDictionary.cs
    startLine: 13
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nProvides static methods for <xref href=\"CodeJam.Collections.ILazyDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class LazyDictionary
    content.vb: Public Module LazyDictionary
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  commentId: M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  id: Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)
  parent: CodeJam.Collections.LazyDictionary
  langs:
  - csharp
  - vb
  name: Create<TKey, TValue>(Func<TKey, TValue>, IEqualityComparer<TKey>, Boolean)
  nameWithType: LazyDictionary.Create<TKey, TValue>(Func<TKey, TValue>, IEqualityComparer<TKey>, Boolean)
  fullName: CodeJam.Collections.LazyDictionary.Create<TKey, TValue>(System.Func<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Dictionary/LazyDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Collections/Dictionary/LazyDictionary.cs
    startLine: 28
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates implementation of <xref href=\"CodeJam.Collections.ILazyDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, IEqualityComparer<TKey> comparer, bool threadSafe)
    parameters:
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: Function to create value on demand.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: Key comparer.
    - id: threadSafe
      type: System.Boolean
      description: "\nIf true, creates a thread safe implementation.\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">valueFactory</code> guaranteed to call only once.\n"
    typeParameters:
    - id: TKey
      description: Type of key
    - id: TValue
      description: Type of value
    return:
      type: CodeJam.Collections.ILazyDictionary{{TKey},{TValue}}
      description: <xref href="CodeJam.Collections.ILazyDictionary%602" data-throw-if-not-resolved="false"></xref> implementation.
    content.vb: Public Shared Function Create(Of TKey, TValue)(valueFactory As Func(Of TKey, TValue), comparer As IEqualityComparer(Of TKey), threadSafe As Boolean) As ILazyDictionary(Of TKey, TValue)
  overload: CodeJam.Collections.LazyDictionary.Create*
  nameWithType.vb: LazyDictionary.Create(Of TKey, TValue)(Func(Of TKey, TValue), IEqualityComparer(Of TKey), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.LazyDictionary.Create(Of TKey, TValue)(System.Func(Of TKey, TValue), System.Collections.Generic.IEqualityComparer(Of TKey), System.Boolean)
  name.vb: Create(Of TKey, TValue)(Func(Of TKey, TValue), IEqualityComparer(Of TKey), Boolean)
- uid: CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Boolean)
  commentId: M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Boolean)
  id: Create``2(System.Func{``0,``1},System.Boolean)
  parent: CodeJam.Collections.LazyDictionary
  langs:
  - csharp
  - vb
  name: Create<TKey, TValue>(Func<TKey, TValue>, Boolean)
  nameWithType: LazyDictionary.Create<TKey, TValue>(Func<TKey, TValue>, Boolean)
  fullName: CodeJam.Collections.LazyDictionary.Create<TKey, TValue>(System.Func<TKey, TValue>, System.Boolean)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Dictionary/LazyDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Collections/Dictionary/LazyDictionary.cs
    startLine: 49
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates implementation of <xref href=\"CodeJam.Collections.ILazyDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, bool threadSafe)
    parameters:
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: Function to create value on demand.
    - id: threadSafe
      type: System.Boolean
      description: "\nIf true, creates a thread safe implementation.\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">valueFactory</code> guaranteed to call only once.\n"
    typeParameters:
    - id: TKey
      description: Type of key
    - id: TValue
      description: Type of value
    return:
      type: CodeJam.Collections.ILazyDictionary{{TKey},{TValue}}
      description: <xref href="CodeJam.Collections.ILazyDictionary%602" data-throw-if-not-resolved="false"></xref> implementation.
    content.vb: Public Shared Function Create(Of TKey, TValue)(valueFactory As Func(Of TKey, TValue), threadSafe As Boolean) As ILazyDictionary(Of TKey, TValue)
  overload: CodeJam.Collections.LazyDictionary.Create*
  nameWithType.vb: LazyDictionary.Create(Of TKey, TValue)(Func(Of TKey, TValue), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.LazyDictionary.Create(Of TKey, TValue)(System.Func(Of TKey, TValue), System.Boolean)
  name.vb: Create(Of TKey, TValue)(Func(Of TKey, TValue), Boolean)
- uid: CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  id: Create``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)
  parent: CodeJam.Collections.LazyDictionary
  langs:
  - csharp
  - vb
  name: Create<TKey, TValue>(Func<TKey, TValue>, LazyThreadSafetyMode)
  nameWithType: LazyDictionary.Create<TKey, TValue>(Func<TKey, TValue>, LazyThreadSafetyMode)
  fullName: CodeJam.Collections.LazyDictionary.Create<TKey, TValue>(System.Func<TKey, TValue>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Dictionary/LazyDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Collections/Dictionary/LazyDictionary.cs
    startLine: 66
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates implementation of <xref href=\"CodeJam.Collections.ILazyDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: Function to create value on demand.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: 'One of the enumeration values that specifies the thread safety mode. '
    typeParameters:
    - id: TKey
      description: Type of key
    - id: TValue
      description: Type of value
    return:
      type: CodeJam.Collections.ILazyDictionary{{TKey},{TValue}}
      description: <xref href="CodeJam.Collections.ILazyDictionary%602" data-throw-if-not-resolved="false"></xref> implementation.
    content.vb: Public Shared Function Create(Of TKey, TValue)(valueFactory As Func(Of TKey, TValue), threadSafety As LazyThreadSafetyMode) As ILazyDictionary(Of TKey, TValue)
  overload: CodeJam.Collections.LazyDictionary.Create*
  nameWithType.vb: LazyDictionary.Create(Of TKey, TValue)(Func(Of TKey, TValue), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.LazyDictionary.Create(Of TKey, TValue)(System.Func(Of TKey, TValue), System.Threading.LazyThreadSafetyMode)
  name.vb: Create(Of TKey, TValue)(Func(Of TKey, TValue), LazyThreadSafetyMode)
- uid: CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  commentId: M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  id: Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)
  parent: CodeJam.Collections.LazyDictionary
  langs:
  - csharp
  - vb
  name: Create<TKey, TValue>(Func<TKey, TValue>, IEqualityComparer<TKey>, LazyThreadSafetyMode)
  nameWithType: LazyDictionary.Create<TKey, TValue>(Func<TKey, TValue>, IEqualityComparer<TKey>, LazyThreadSafetyMode)
  fullName: CodeJam.Collections.LazyDictionary.Create<TKey, TValue>(System.Func<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>, System.Threading.LazyThreadSafetyMode)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Dictionary/LazyDictionary.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Create
    path: ../Main/src/Collections/Dictionary/LazyDictionary.cs
    startLine: 94
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nCreates implementation of <xref href=\"CodeJam.Collections.ILazyDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, IEqualityComparer<TKey> comparer, LazyThreadSafetyMode threadSafety)
    parameters:
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: Function to create value on demand.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: Key comparer.
    - id: threadSafety
      type: System.Threading.LazyThreadSafetyMode
      description: 'One of the enumeration values that specifies the thread safety mode. '
    typeParameters:
    - id: TKey
      description: Type of key
    - id: TValue
      description: Type of value
    return:
      type: CodeJam.Collections.ILazyDictionary{{TKey},{TValue}}
      description: <xref href="CodeJam.Collections.ILazyDictionary%602" data-throw-if-not-resolved="false"></xref> implementation.
    content.vb: Public Shared Function Create(Of TKey, TValue)(valueFactory As Func(Of TKey, TValue), comparer As IEqualityComparer(Of TKey), threadSafety As LazyThreadSafetyMode) As ILazyDictionary(Of TKey, TValue)
  overload: CodeJam.Collections.LazyDictionary.Create*
  nameWithType.vb: LazyDictionary.Create(Of TKey, TValue)(Func(Of TKey, TValue), IEqualityComparer(Of TKey), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Collections.LazyDictionary.Create(Of TKey, TValue)(System.Func(Of TKey, TValue), System.Collections.Generic.IEqualityComparer(Of TKey), System.Threading.LazyThreadSafetyMode)
  name.vb: Create(Of TKey, TValue)(Func(Of TKey, TValue), IEqualityComparer(Of TKey), LazyThreadSafetyMode)
references:
- uid: CodeJam.Collections.ILazyDictionary`2
  commentId: T:CodeJam.Collections.ILazyDictionary`2
  isExternal: false
  name: ILazyDictionary<TKey, TValue>
  nameWithType: ILazyDictionary<TKey, TValue>
  fullName: CodeJam.Collections.ILazyDictionary<TKey, TValue>
  nameWithType.vb: ILazyDictionary(Of TKey, TValue)
  fullName.vb: CodeJam.Collections.ILazyDictionary(Of TKey, TValue)
  name.vb: ILazyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: CodeJam.Collections.ILazyDictionary`2
    name: ILazyDictionary
    nameWithType: ILazyDictionary
    fullName: CodeJam.Collections.ILazyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Collections.ILazyDictionary`2
    name: ILazyDictionary
    nameWithType: ILazyDictionary
    fullName: CodeJam.Collections.ILazyDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections
  commentId: N:CodeJam.Collections
  isExternal: false
  name: CodeJam.Collections
  nameWithType: CodeJam.Collections
  fullName: CodeJam.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Collections.LazyDictionary.Create*
  commentId: Overload:CodeJam.Collections.LazyDictionary.Create
  isExternal: false
  name: Create
  nameWithType: LazyDictionary.Create
  fullName: CodeJam.Collections.LazyDictionary.Create
- uid: System.Func{{TKey},{TValue}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TKey, TValue>
  nameWithType: Func<TKey, TValue>
  fullName: System.Func<TKey, TValue>
  nameWithType.vb: Func(Of TKey, TValue)
  fullName.vb: System.Func(Of TKey, TValue)
  name.vb: Func(Of TKey, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Collections.ILazyDictionary{{TKey},{TValue}}
  commentId: T:CodeJam.Collections.ILazyDictionary{``0,``1}
  parent: CodeJam.Collections
  definition: CodeJam.Collections.ILazyDictionary`2
  name: ILazyDictionary<TKey, TValue>
  nameWithType: ILazyDictionary<TKey, TValue>
  fullName: CodeJam.Collections.ILazyDictionary<TKey, TValue>
  nameWithType.vb: ILazyDictionary(Of TKey, TValue)
  fullName.vb: CodeJam.Collections.ILazyDictionary(Of TKey, TValue)
  name.vb: ILazyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: CodeJam.Collections.ILazyDictionary`2
    name: ILazyDictionary
    nameWithType: ILazyDictionary
    fullName: CodeJam.Collections.ILazyDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Collections.ILazyDictionary`2
    name: ILazyDictionary
    nameWithType: ILazyDictionary
    fullName: CodeJam.Collections.ILazyDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.LazyThreadSafetyMode
  commentId: T:System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: true
  name: LazyThreadSafetyMode
  nameWithType: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
