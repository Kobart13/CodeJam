### YamlMime:ManagedReference
items:
- uid: CodeJam.Threading.ParallelExtensions
  commentId: T:CodeJam.Threading.ParallelExtensions
  id: ParallelExtensions
  parent: CodeJam.Threading
  children:
  - CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.Int32,System.String)
  - CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.String)
  - CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)
  - CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0},System.String)
  - CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.String)
  - CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  - CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Action{``1},System.String)
  - CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  langs:
  - csharp
  - vb
  name: ParallelExtensions
  nameWithType: ParallelExtensions
  fullName: CodeJam.Threading.ParallelExtensions
  type: Class
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ParallelExtensions
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 10
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nParallel extensions.\n"
  example: []
  syntax:
    content: public static class ParallelExtensions
    content.vb: Public Module ParallelExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  id: RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String)
  nameWithType: ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel<TSource, TTarget>(System.Collections.Generic.IEnumerable<TSource>, System.Int32, System.Func<TSource, TTarget>, System.Int32, System.Action<TTarget>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 24
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nImplements Provider-Consumer pattern.\n"
  example: []
  syntax:
    content: public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, int providerCount, Func<TSource, TTarget> providerFunc, int consumerCount, Action<TTarget> consumerAction, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Incoming data.
    - id: providerCount
      type: System.Int32
      description: Number of provider threads.
    - id: providerFunc
      type: System.Func{{TSource},{TTarget}}
      description: Provider function
    - id: consumerCount
      type: System.Int32
      description: Number of consumer threads.
    - id: consumerAction
      type: System.Action{{TTarget}}
      description: Consumer action.
    - id: processName
      type: System.String
      description: Process name pattern.
    typeParameters:
    - id: TSource
      description: ''
    - id: TTarget
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(Of TSource, TTarget)(source As IEnumerable(Of TSource), providerCount As Integer, providerFunc As Func(Of TSource, TTarget), consumerCount As Integer, consumerAction As Action(Of TTarget), processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Int32, Func(Of TSource, TTarget), Int32, Action(Of TTarget), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(Of TSource, TTarget)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32, System.Func(Of TSource, TTarget), System.Int32, System.Action(Of TTarget), System.String)
  name.vb: RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Int32, Func(Of TSource, TTarget), Int32, Action(Of TTarget), String)
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  id: RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32,System.Action{``1},System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String)
  nameWithType: ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel<TSource, TTarget>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TTarget>, System.Int32, System.Action<TTarget>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 67
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nImplements Provider-Consumer pattern.\n"
  example: []
  syntax:
    content: public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, Func<TSource, TTarget> providerFunc, int consumerCount, Action<TTarget> consumerAction, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Incoming data.
    - id: providerFunc
      type: System.Func{{TSource},{TTarget}}
      description: Provider function
    - id: consumerCount
      type: System.Int32
      description: Number of consumer threads.
    - id: consumerAction
      type: System.Action{{TTarget}}
      description: Consumer action.
    - id: processName
      type: System.String
      description: Process name pattern.
    typeParameters:
    - id: TSource
      description: ''
    - id: TTarget
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(Of TSource, TTarget)(source As IEnumerable(Of TSource), providerFunc As Func(Of TSource, TTarget), consumerCount As Integer, consumerAction As Action(Of TTarget), processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Func(Of TSource, TTarget), Int32, Action(Of TTarget), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(Of TSource, TTarget)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TTarget), System.Int32, System.Action(Of TTarget), System.String)
  name.vb: RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Func(Of TSource, TTarget), Int32, Action(Of TTarget), String)
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Action{``1},System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Action{``1},System.String)
  id: RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Action{``1},System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String)
  nameWithType: ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel<TSource, TTarget>(System.Collections.Generic.IEnumerable<TSource>, System.Int32, System.Func<TSource, TTarget>, System.Action<TTarget>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 85
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nImplements Provider-Consumer pattern.\n"
  example: []
  syntax:
    content: public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, int providerCount, Func<TSource, TTarget> providerFunc, Action<TTarget> consumerAction, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Incoming data.
    - id: providerCount
      type: System.Int32
      description: Number of provider threads.
    - id: providerFunc
      type: System.Func{{TSource},{TTarget}}
      description: Provider function
    - id: consumerAction
      type: System.Action{{TTarget}}
      description: Consumer action.
    - id: processName
      type: System.String
      description: Process name pattern.
    typeParameters:
    - id: TSource
      description: ''
    - id: TTarget
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(Of TSource, TTarget)(source As IEnumerable(Of TSource), providerCount As Integer, providerFunc As Func(Of TSource, TTarget), consumerAction As Action(Of TTarget), processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Int32, Func(Of TSource, TTarget), Action(Of TTarget), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(Of TSource, TTarget)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32, System.Func(Of TSource, TTarget), System.Action(Of TTarget), System.String)
  name.vb: RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Int32, Func(Of TSource, TTarget), Action(Of TTarget), String)
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.String)
  id: RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String)
  nameWithType: ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel<TSource, TTarget>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TTarget>, System.Action<TTarget>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 102
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nImplements Provider-Consumer pattern.\n"
  example: []
  syntax:
    content: public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, Func<TSource, TTarget> providerFunc, Action<TTarget> consumerAction, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: Incoming data.
    - id: providerFunc
      type: System.Func{{TSource},{TTarget}}
      description: Provider function
    - id: consumerAction
      type: System.Action{{TTarget}}
      description: Consumer action.
    - id: processName
      type: System.String
      description: Process name pattern.
    typeParameters:
    - id: TSource
      description: ''
    - id: TTarget
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(Of TSource, TTarget)(source As IEnumerable(Of TSource), providerFunc As Func(Of TSource, TTarget), consumerAction As Action(Of TTarget), processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Func(Of TSource, TTarget), Action(Of TTarget), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(Of TSource, TTarget)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TTarget), System.Action(Of TTarget), System.String)
  name.vb: RunInParallel(Of TSource, TTarget)(IEnumerable(Of TSource), Func(Of TSource, TTarget), Action(Of TTarget), String)
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.Int32,System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.Int32,System.String)
  id: RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.Int32,System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel(IEnumerable<Action>, Int32, String)
  nameWithType: ParallelExtensions.RunInParallel(IEnumerable<Action>, Int32, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable<System.Action>, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 115
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nRuns in parallel provided source of actions.\n"
  example: []
  syntax:
    content: public static void RunInParallel(this IEnumerable<Action> source, int parallelCount, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Action}
      description: Actions to run.
    - id: parallelCount
      type: System.Int32
      description: number of threads to use.
    - id: processName
      type: System.String
      description: Process name pattern.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(source As IEnumerable(Of Action), parallelCount As Integer, processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(IEnumerable(Of Action), Int32, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable(Of System.Action), System.Int32, System.String)
  name.vb: RunInParallel(IEnumerable(Of Action), Int32, String)
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.String)
  id: RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel(IEnumerable<Action>, String)
  nameWithType: ParallelExtensions.RunInParallel(IEnumerable<Action>, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable<System.Action>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 137
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nRuns in parallel provided source of actions.\n"
  example: []
  syntax:
    content: public static void RunInParallel(this IEnumerable<Action> source, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Action}
      description: Actions to run.
    - id: processName
      type: System.String
      description: Process name pattern.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(source As IEnumerable(Of Action), processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(IEnumerable(Of Action), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable(Of System.Action), System.String)
  name.vb: RunInParallel(IEnumerable(Of Action), String)
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0},System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0},System.String)
  id: RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0},System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String)
  nameWithType: ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel<T>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Action<T>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 148
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nRuns in parallel actions for provided data source.\n"
  example: []
  syntax:
    content: public static void RunInParallel<T>(this IEnumerable<T> source, int parallelCount, Action<T> action, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Source to run.
    - id: parallelCount
      type: System.Int32
      description: number of threads to use.
    - id: action
      type: System.Action{{T}}
      description: Action to run.
    - id: processName
      type: System.String
      description: Process name.
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(Of T)(source As IEnumerable(Of T), parallelCount As Integer, action As Action(Of T), processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(Of T)(IEnumerable(Of T), Int32, Action(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Action(Of T), System.String)
  name.vb: RunInParallel(Of T)(IEnumerable(Of T), Int32, Action(Of T), String)
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)
  commentId: M:CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)
  id: RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)
  isExtensionMethod: true
  parent: CodeJam.Threading.ParallelExtensions
  langs:
  - csharp
  - vb
  name: RunInParallel<T>(IEnumerable<T>, Action<T>, String)
  nameWithType: ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String)
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Threading/ParallelExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RunInParallel
    path: ../Main/src/Threading/ParallelExtensions.cs
    startLine: 174
  assemblies:
  - CodeJam
  namespace: CodeJam.Threading
  summary: "\nRuns in parallel actions for provided data source.\n"
  example: []
  syntax:
    content: public static void RunInParallel<T>(this IEnumerable<T> source, Action<T> action, string processName = "ParallelProcess")
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Source to run.
    - id: action
      type: System.Action{{T}}
      description: Action to run.
    - id: processName
      type: System.String
      description: Process name.
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RunInParallel(Of T)(source As IEnumerable(Of T), action As Action(Of T), processName As String = "ParallelProcess")
  overload: CodeJam.Threading.ParallelExtensions.RunInParallel*
  nameWithType.vb: ParallelExtensions.RunInParallel(Of T)(IEnumerable(Of T), Action(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Threading.ParallelExtensions.RunInParallel(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T), System.String)
  name.vb: RunInParallel(Of T)(IEnumerable(Of T), Action(Of T), String)
references:
- uid: CodeJam.Threading
  commentId: N:CodeJam.Threading
  isExternal: false
  name: CodeJam.Threading
  nameWithType: CodeJam.Threading
  fullName: CodeJam.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Threading.ParallelExtensions.RunInParallel*
  commentId: Overload:CodeJam.Threading.ParallelExtensions.RunInParallel
  isExternal: false
  name: RunInParallel
  nameWithType: ParallelExtensions.RunInParallel
  fullName: CodeJam.Threading.ParallelExtensions.RunInParallel
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{{TSource},{TTarget}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TTarget>
  nameWithType: Func<TSource, TTarget>
  fullName: System.Func<TSource, TTarget>
  nameWithType.vb: Func(Of TSource, TTarget)
  fullName.vb: System.Func(Of TSource, TTarget)
  name.vb: Func(Of TSource, TTarget)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TTarget}}
  commentId: T:System.Action{``1}
  parent: System
  definition: System.Action`1
  name: Action<TTarget>
  nameWithType: Action<TTarget>
  fullName: System.Action<TTarget>
  nameWithType.vb: Action(Of TTarget)
  fullName.vb: System.Action(Of TTarget)
  name.vb: Action(Of TTarget)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Action}
  commentId: T:System.Collections.Generic.IEnumerable{System.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<System.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
