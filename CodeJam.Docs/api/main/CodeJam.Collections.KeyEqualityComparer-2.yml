### YamlMime:ManagedReference
items:
- uid: CodeJam.Collections.KeyEqualityComparer`2
  commentId: T:CodeJam.Collections.KeyEqualityComparer`2
  id: KeyEqualityComparer`2
  parent: CodeJam.Collections
  children:
  - CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})
  - CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})
  - CodeJam.Collections.KeyEqualityComparer`2.Comparer
  - CodeJam.Collections.KeyEqualityComparer`2.Equals(`0,`0)
  - CodeJam.Collections.KeyEqualityComparer`2.GetHashCode(`0)
  - CodeJam.Collections.KeyEqualityComparer`2.KeySelector
  langs:
  - csharp
  - vb
  name: KeyEqualityComparer<T, TKey>
  nameWithType: KeyEqualityComparer<T, TKey>
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>
  type: Class
  source:
    remote:
      path: Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: KeyEqualityComparer
    path: ../Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
    startLine: 11
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nAn implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref>\ninterface for compare values by comparing their extracted key values.\n"
  example: []
  syntax:
    content: 'public sealed class KeyEqualityComparer<T, TKey> : IEqualityComparer<T>'
    typeParameters:
    - id: T
    - id: TKey
    content.vb: >-
      Public NotInheritable Class KeyEqualityComparer(Of T, TKey)
          Implements IEqualityComparer(Of T)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEqualityComparer{{T}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  nameWithType.vb: KeyEqualityComparer(Of T, TKey)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey)
  name.vb: KeyEqualityComparer(Of T, TKey)
- uid: CodeJam.Collections.KeyEqualityComparer`2.KeySelector
  commentId: P:CodeJam.Collections.KeyEqualityComparer`2.KeySelector
  id: KeySelector
  parent: CodeJam.Collections.KeyEqualityComparer`2
  langs:
  - csharp
  - vb
  name: KeySelector
  nameWithType: KeyEqualityComparer<T, TKey>.KeySelector
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.KeySelector
  type: Property
  source:
    remote:
      path: Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: KeySelector
    path: ../Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
    startLine: 20
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nGets the function to extract the key for each element.\n"
  example: []
  syntax:
    content: public Func<T, TKey> KeySelector { get; }
    parameters: []
    return:
      type: System.Func{{T},{TKey}}
      description: "\nThe function to extract the key for each element.\n"
    content.vb: Public ReadOnly Property KeySelector As Func(Of T, TKey)
  overload: CodeJam.Collections.KeyEqualityComparer`2.KeySelector*
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).KeySelector
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).KeySelector
- uid: CodeJam.Collections.KeyEqualityComparer`2.Comparer
  commentId: P:CodeJam.Collections.KeyEqualityComparer`2.Comparer
  id: Comparer
  parent: CodeJam.Collections.KeyEqualityComparer`2
  langs:
  - csharp
  - vb
  name: Comparer
  nameWithType: KeyEqualityComparer<T, TKey>.Comparer
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.Comparer
  type: Property
  source:
    remote:
      path: Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Comparer
    path: ../Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
    startLine: 29
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nGets the equality comparer to use to compare the keys.\n"
  example: []
  syntax:
    content: public IEqualityComparer<TKey> Comparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\nThe equality comparer to use to compare the keys.\n"
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)
  overload: CodeJam.Collections.KeyEqualityComparer`2.Comparer*
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).Comparer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).Comparer
- uid: CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})
  commentId: M:CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})
  id: '#ctor(System.Func{`0,`1})'
  parent: CodeJam.Collections.KeyEqualityComparer`2
  langs:
  - csharp
  - vb
  name: KeyEqualityComparer(Func<T, TKey>)
  nameWithType: KeyEqualityComparer<T, TKey>.KeyEqualityComparer(Func<T, TKey>)
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.KeyEqualityComparer(System.Func<T, TKey>)
  type: Constructor
  source:
    remote:
      path: Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
    startLine: 36
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInitializes a new instance of the <xref href=\"CodeJam.Collections.KeyEqualityComparer%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public KeyEqualityComparer(Func<T, TKey> keySelector)
    parameters:
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The function to extract the key for each element.
    content.vb: Public Sub New(keySelector As Func(Of T, TKey))
  overload: CodeJam.Collections.KeyEqualityComparer`2.#ctor*
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).KeyEqualityComparer(Func(Of T, TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).KeyEqualityComparer(System.Func(Of T, TKey))
  name.vb: KeyEqualityComparer(Func(Of T, TKey))
- uid: CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})
  commentId: M:CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})
  id: '#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})'
  parent: CodeJam.Collections.KeyEqualityComparer`2
  langs:
  - csharp
  - vb
  name: KeyEqualityComparer(Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType: KeyEqualityComparer<T, TKey>.KeyEqualityComparer(Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.KeyEqualityComparer(System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: .ctor
    path: ../Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
    startLine: 49
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nInitializes a new instance of the <xref href=\"CodeJam.Collections.KeyEqualityComparer%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public KeyEqualityComparer(Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: keySelector
      type: System.Func{{T},{TKey}}
      description: The function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The equality comparer to use to compare the keys.
    content.vb: Public Sub New(keySelector As Func(Of T, TKey), comparer As IEqualityComparer(Of TKey))
  overload: CodeJam.Collections.KeyEqualityComparer`2.#ctor*
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).KeyEqualityComparer(Func(Of T, TKey), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).KeyEqualityComparer(System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: KeyEqualityComparer(Func(Of T, TKey), IEqualityComparer(Of TKey))
- uid: CodeJam.Collections.KeyEqualityComparer`2.Equals(`0,`0)
  commentId: M:CodeJam.Collections.KeyEqualityComparer`2.Equals(`0,`0)
  id: Equals(`0,`0)
  parent: CodeJam.Collections.KeyEqualityComparer`2
  langs:
  - csharp
  - vb
  name: Equals(T, T)
  nameWithType: KeyEqualityComparer<T, TKey>.Equals(T, T)
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.Equals(T, T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Equals
    path: ../Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
    startLine: 65
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nDetermines whether the specified objects are equal.\n"
  example: []
  syntax:
    content: public bool Equals(T x, T y)
    parameters:
    - id: x
      type: '{T}'
      description: The first object of type <code data-dev-comment-type="typeparamref" class="typeparamref">T</code> to compare.
    - id: y
      type: '{T}'
      description: The second object of type <code data-dev-comment-type="typeparamref" class="typeparamref">T</code> to compare.
    return:
      type: System.Boolean
      description: "\ntrue if the specified objects are equal; otherwise, false.\n"
    content.vb: Public Function Equals(x As T, y As T) As Boolean
  overload: CodeJam.Collections.KeyEqualityComparer`2.Equals*
  implements:
  - System.Collections.Generic.IEqualityComparer{{T}}.Equals({T},{T})
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).Equals(T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).Equals(T, T)
- uid: CodeJam.Collections.KeyEqualityComparer`2.GetHashCode(`0)
  commentId: M:CodeJam.Collections.KeyEqualityComparer`2.GetHashCode(`0)
  id: GetHashCode(`0)
  parent: CodeJam.Collections.KeyEqualityComparer`2
  langs:
  - csharp
  - vb
  name: GetHashCode(T)
  nameWithType: KeyEqualityComparer<T, TKey>.GetHashCode(T)
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.GetHashCode(T)
  type: Method
  source:
    remote:
      path: Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetHashCode
    path: ../Main/src/Collections/Dictionary/KeyEqualityComparer`1.cs
    startLine: 75
  assemblies:
  - CodeJam
  namespace: CodeJam.Collections
  summary: "\nReturns a hash code for the specified object.\n"
  example: []
  syntax:
    content: public int GetHashCode(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> for which a hash code is to be returned.
    return:
      type: System.Int32
      description: "\nA hash code for the specified object.\n"
    content.vb: Public Function GetHashCode(obj As T) As Integer
  overload: CodeJam.Collections.KeyEqualityComparer`2.GetHashCode*
  implements:
  - System.Collections.Generic.IEqualityComparer{{T}}.GetHashCode({T})
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).GetHashCode(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).GetHashCode(T)
references:
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections
  commentId: N:CodeJam.Collections
  isExternal: false
  name: CodeJam.Collections
  nameWithType: CodeJam.Collections
  fullName: CodeJam.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, KeyEqualityComparer<T, TKey>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, KeyEqualityComparer<T, TKey>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Collections.KeyEqualityComparer<T, TKey>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, KeyEqualityComparer(Of T, TKey))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, KeyEqualityComparer(Of T, TKey))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, KeyEqualityComparer<T, TKey>>
    nameWithType: RangeExtensions.Contains<T, KeyEqualityComparer<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Collections.KeyEqualityComparer<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, KeyEqualityComparer(Of T, TKey))
    nameWithType: RangeExtensions.Contains(Of T, KeyEqualityComparer(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, KeyEqualityComparer<T, TKey>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, KeyEqualityComparer<T, TKey>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Collections.KeyEqualityComparer<T, TKey>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, KeyEqualityComparer(Of T, TKey))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, KeyEqualityComparer(Of T, TKey))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, KeyEqualityComparer<T, TKey>>
    nameWithType: RangeExtensions.StartsAfter<T, KeyEqualityComparer<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Collections.KeyEqualityComparer<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, KeyEqualityComparer(Of T, TKey))
    nameWithType: RangeExtensions.StartsAfter(Of T, KeyEqualityComparer(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, KeyEqualityComparer<T, TKey>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, KeyEqualityComparer<T, TKey>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Collections.KeyEqualityComparer<T, TKey>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, KeyEqualityComparer(Of T, TKey))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, KeyEqualityComparer(Of T, TKey))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, KeyEqualityComparer<T, TKey>>
    nameWithType: RangeExtensions.EndsBefore<T, KeyEqualityComparer<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Collections.KeyEqualityComparer<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, KeyEqualityComparer(Of T, TKey))
    nameWithType: RangeExtensions.EndsBefore(Of T, KeyEqualityComparer(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, KeyEqualityComparer<T, TKey>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, KeyEqualityComparer<T, TKey>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Collections.KeyEqualityComparer<T, TKey>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, KeyEqualityComparer(Of T, TKey))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, KeyEqualityComparer(Of T, TKey))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, KeyEqualityComparer<T, TKey>>
    nameWithType: RangeExtensions.Contains<T, TKey, KeyEqualityComparer<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Collections.KeyEqualityComparer<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, KeyEqualityComparer(Of T, TKey))
    nameWithType: RangeExtensions.Contains(Of T, TKey, KeyEqualityComparer(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, KeyEqualityComparer<T, TKey>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, KeyEqualityComparer<T, TKey>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Collections.KeyEqualityComparer<T, TKey>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, KeyEqualityComparer(Of T, TKey))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, KeyEqualityComparer(Of T, TKey))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, KeyEqualityComparer<T, TKey>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, KeyEqualityComparer<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Collections.KeyEqualityComparer<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, KeyEqualityComparer(Of T, TKey))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, KeyEqualityComparer(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, KeyEqualityComparer<T, TKey>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, KeyEqualityComparer<T, TKey>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Collections.KeyEqualityComparer<T, TKey>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, KeyEqualityComparer(Of T, TKey))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, KeyEqualityComparer(Of T, TKey))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, KeyEqualityComparer<T, TKey>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, KeyEqualityComparer<T, TKey>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Collections.KeyEqualityComparer<T, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, KeyEqualityComparer(Of T, TKey))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, KeyEqualityComparer(Of T, TKey))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Collections.KeyEqualityComparer(Of T, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: CodeJam.Collections.KeyEqualityComparer`2.KeySelector*
  commentId: Overload:CodeJam.Collections.KeyEqualityComparer`2.KeySelector
  isExternal: false
  name: KeySelector
  nameWithType: KeyEqualityComparer<T, TKey>.KeySelector
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.KeySelector
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).KeySelector
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).KeySelector
- uid: System.Func{{T},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<T, TKey>
  nameWithType: Func<T, TKey>
  fullName: System.Func<T, TKey>
  nameWithType.vb: Func(Of T, TKey)
  fullName.vb: System.Func(Of T, TKey)
  name.vb: Func(Of T, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.Comparer*
  commentId: Overload:CodeJam.Collections.KeyEqualityComparer`2.Comparer
  isExternal: false
  name: Comparer
  nameWithType: KeyEqualityComparer<T, TKey>.Comparer
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.Comparer
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).Comparer
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).Comparer
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2
  commentId: T:CodeJam.Collections.KeyEqualityComparer`2
  isExternal: false
  name: KeyEqualityComparer<T, TKey>
  nameWithType: KeyEqualityComparer<T, TKey>
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>
  nameWithType.vb: KeyEqualityComparer(Of T, TKey)
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey)
  name.vb: KeyEqualityComparer(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Collections.KeyEqualityComparer`2
    name: KeyEqualityComparer
    nameWithType: KeyEqualityComparer
    fullName: CodeJam.Collections.KeyEqualityComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Collections.KeyEqualityComparer`2
    name: KeyEqualityComparer
    nameWithType: KeyEqualityComparer
    fullName: CodeJam.Collections.KeyEqualityComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Collections.KeyEqualityComparer`2.#ctor*
  commentId: Overload:CodeJam.Collections.KeyEqualityComparer`2.#ctor
  isExternal: false
  name: KeyEqualityComparer
  nameWithType: KeyEqualityComparer<T, TKey>.KeyEqualityComparer
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.KeyEqualityComparer
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).KeyEqualityComparer
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).KeyEqualityComparer
- uid: CodeJam.Collections.KeyEqualityComparer`2.Equals*
  commentId: Overload:CodeJam.Collections.KeyEqualityComparer`2.Equals
  isExternal: false
  name: Equals
  nameWithType: KeyEqualityComparer<T, TKey>.Equals
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.Equals
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).Equals
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).Equals
- uid: System.Collections.Generic.IEqualityComparer{{T}}.Equals({T},{T})
  commentId: M:System.Collections.Generic.IEqualityComparer{`0}.Equals(`0,`0)
  parent: System.Collections.Generic.IEqualityComparer{{T}}
  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  name: Equals(T, T)
  nameWithType: IEqualityComparer<T>.Equals(T, T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)
  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<T>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of T).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  isExternal: true
  name: Equals(T, T)
  nameWithType: IEqualityComparer<T>.Equals(T, T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)
  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<T>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of T).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Collections.KeyEqualityComparer`2.GetHashCode*
  commentId: Overload:CodeJam.Collections.KeyEqualityComparer`2.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: KeyEqualityComparer<T, TKey>.GetHashCode
  fullName: CodeJam.Collections.KeyEqualityComparer<T, TKey>.GetHashCode
  nameWithType.vb: KeyEqualityComparer(Of T, TKey).GetHashCode
  fullName.vb: CodeJam.Collections.KeyEqualityComparer(Of T, TKey).GetHashCode
- uid: System.Collections.Generic.IEqualityComparer{{T}}.GetHashCode({T})
  commentId: M:System.Collections.Generic.IEqualityComparer{`0}.GetHashCode(`0)
  parent: System.Collections.Generic.IEqualityComparer{{T}}
  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  name: GetHashCode(T)
  nameWithType: IEqualityComparer<T>.GetHashCode(T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)
  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<T>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of T).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  isExternal: true
  name: GetHashCode(T)
  nameWithType: IEqualityComparer<T>.GetHashCode(T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)
  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<T>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of T).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
