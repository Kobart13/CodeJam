### YamlMime:ManagedReference
items:
- uid: CodeJam.DebugEnumCode
  commentId: T:CodeJam.DebugEnumCode
  id: DebugEnumCode
  parent: CodeJam
  children:
  - CodeJam.DebugEnumCode.AnyFlagSet``1(``0,System.String,``0)
  - CodeJam.DebugEnumCode.AnyFlagUnset``1(``0,System.String,``0)
  - CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String)
  - CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String,System.Object[])
  - CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String)
  - CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String,System.Object[])
  - CodeJam.DebugEnumCode.Defined``1(``0,System.String)
  - CodeJam.DebugEnumCode.FlagsDefined``1(``0,System.String)
  - CodeJam.DebugEnumCode.FlagSet``1(``0,System.String,``0)
  - CodeJam.DebugEnumCode.FlagUnset``1(``0,System.String,``0)
  - CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String)
  - CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String,System.Object[])
  - CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String)
  - CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: DebugEnumCode
  nameWithType: DebugEnumCode
  fullName: CodeJam.DebugEnumCode
  type: Class
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DebugEnumCode
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Enum assertions class.
  example: []
  syntax:
    content: public static class DebugEnumCode
    content.vb: Public Module DebugEnumCode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.DebugEnumCode.Defined``1(``0,System.String)
  commentId: M:CodeJam.DebugEnumCode.Defined``1(``0,System.String)
  id: Defined``1(``0,System.String)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: Defined<TEnum>(TEnum, String)
  nameWithType: DebugEnumCode.Defined<TEnum>(TEnum, String)
  fullName: CodeJam.DebugEnumCode.Defined<TEnum>(TEnum, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Defined
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 30
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that specified argument enum value is defined.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void Defined<TEnum>(TEnum value, string argName)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub Defined(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, argName As String)
  overload: CodeJam.DebugEnumCode.Defined*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.Defined(Of TEnum)(TEnum, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.Defined(Of TEnum)(TEnum, System.String)
  name.vb: Defined(Of TEnum)(TEnum, String)
- uid: CodeJam.DebugEnumCode.FlagsDefined``1(``0,System.String)
  commentId: M:CodeJam.DebugEnumCode.FlagsDefined``1(``0,System.String)
  id: FlagsDefined``1(``0,System.String)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: FlagsDefined<TEnum>(TEnum, String)
  nameWithType: DebugEnumCode.FlagsDefined<TEnum>(TEnum, String)
  fullName: CodeJam.DebugEnumCode.FlagsDefined<TEnum>(TEnum, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FlagsDefined
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that all bits of the flags combination are defined.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void FlagsDefined<TEnum>(TEnum argFlags, string argName)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: argFlags
      type: '{TEnum}'
      description: The bitwise combinations of the flags to check.
    - id: argName
      type: System.String
      description: Name of the argument.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub FlagsDefined(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(argFlags As TEnum, argName As String)
  overload: CodeJam.DebugEnumCode.FlagsDefined*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.FlagsDefined(Of TEnum)(TEnum, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.FlagsDefined(Of TEnum)(TEnum, System.String)
  name.vb: FlagsDefined(Of TEnum)(TEnum, String)
- uid: CodeJam.DebugEnumCode.FlagSet``1(``0,System.String,``0)
  commentId: M:CodeJam.DebugEnumCode.FlagSet``1(``0,System.String,``0)
  id: FlagSet``1(``0,System.String,``0)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: FlagSet<TEnum>(TEnum, String, TEnum)
  nameWithType: DebugEnumCode.FlagSet<TEnum>(TEnum, String, TEnum)
  fullName: CodeJam.DebugEnumCode.FlagSet<TEnum>(TEnum, System.String, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FlagSet
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 63
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that the specified argument flag is set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void FlagSet<TEnum>(TEnum value, string argName, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub FlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, argName As String, flag As TEnum)
  overload: CodeJam.DebugEnumCode.FlagSet*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.FlagSet(Of TEnum)(TEnum, String, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.FlagSet(Of TEnum)(TEnum, System.String, TEnum)
  name.vb: FlagSet(Of TEnum)(TEnum, String, TEnum)
- uid: CodeJam.DebugEnumCode.AnyFlagUnset``1(``0,System.String,``0)
  commentId: M:CodeJam.DebugEnumCode.AnyFlagUnset``1(``0,System.String,``0)
  id: AnyFlagUnset``1(``0,System.String,``0)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: AnyFlagUnset<TEnum>(TEnum, String, TEnum)
  nameWithType: DebugEnumCode.AnyFlagUnset<TEnum>(TEnum, String, TEnum)
  fullName: CodeJam.DebugEnumCode.AnyFlagUnset<TEnum>(TEnum, System.String, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AnyFlagUnset
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 80
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that any bit from specified argument flag is not set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void AnyFlagUnset<TEnum>(TEnum value, string argName, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub AnyFlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, argName As String, flags As TEnum)
  overload: CodeJam.DebugEnumCode.AnyFlagUnset*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.AnyFlagUnset(Of TEnum)(TEnum, String, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.AnyFlagUnset(Of TEnum)(TEnum, System.String, TEnum)
  name.vb: AnyFlagUnset(Of TEnum)(TEnum, String, TEnum)
- uid: CodeJam.DebugEnumCode.AnyFlagSet``1(``0,System.String,``0)
  commentId: M:CodeJam.DebugEnumCode.AnyFlagSet``1(``0,System.String,``0)
  id: AnyFlagSet``1(``0,System.String,``0)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: AnyFlagSet<TEnum>(TEnum, String, TEnum)
  nameWithType: DebugEnumCode.AnyFlagSet<TEnum>(TEnum, String, TEnum)
  fullName: CodeJam.DebugEnumCode.AnyFlagSet<TEnum>(TEnum, System.String, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AnyFlagSet
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 97
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that any bit from specified argument flag is set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void AnyFlagSet<TEnum>(TEnum value, string argName, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub AnyFlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, argName As String, flags As TEnum)
  overload: CodeJam.DebugEnumCode.AnyFlagSet*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.AnyFlagSet(Of TEnum)(TEnum, String, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.AnyFlagSet(Of TEnum)(TEnum, System.String, TEnum)
  name.vb: AnyFlagSet(Of TEnum)(TEnum, String, TEnum)
- uid: CodeJam.DebugEnumCode.FlagUnset``1(``0,System.String,``0)
  commentId: M:CodeJam.DebugEnumCode.FlagUnset``1(``0,System.String,``0)
  id: FlagUnset``1(``0,System.String,``0)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: FlagUnset<TEnum>(TEnum, String, TEnum)
  nameWithType: DebugEnumCode.FlagUnset<TEnum>(TEnum, String, TEnum)
  fullName: CodeJam.DebugEnumCode.FlagUnset<TEnum>(TEnum, System.String, TEnum)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FlagUnset
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 114
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that the specified argument flag is not set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void FlagUnset<TEnum>(TEnum value, string argName, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub FlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, argName As String, flag As TEnum)
  overload: CodeJam.DebugEnumCode.FlagUnset*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.FlagUnset(Of TEnum)(TEnum, String, TEnum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.FlagUnset(Of TEnum)(TEnum, System.String, TEnum)
  name.vb: FlagUnset(Of TEnum)(TEnum, String, TEnum)
- uid: CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String)
  commentId: M:CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String)
  id: StateFlagSet``1(``0,``0,System.String)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: StateFlagSet<TEnum>(TEnum, TEnum, String)
  nameWithType: DebugEnumCode.StateFlagSet<TEnum>(TEnum, TEnum, String)
  fullName: CodeJam.DebugEnumCode.StateFlagSet<TEnum>(TEnum, TEnum, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StateFlagSet
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 133
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that the specified state flag is set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void StateFlagSet<TEnum>(TEnum value, TEnum flag, string message)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    - id: message
      type: System.String
      description: The message.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub StateFlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum, message As String)
  overload: CodeJam.DebugEnumCode.StateFlagSet*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.StateFlagSet(Of TEnum)(TEnum, TEnum, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.StateFlagSet(Of TEnum)(TEnum, TEnum, System.String)
  name.vb: StateFlagSet(Of TEnum)(TEnum, TEnum, String)
- uid: CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String,System.Object[])
  commentId: M:CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String,System.Object[])
  id: StateFlagSet``1(``0,``0,System.String,System.Object[])
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: StateFlagSet<TEnum>(TEnum, TEnum, String, Object[])
  nameWithType: DebugEnumCode.StateFlagSet<TEnum>(TEnum, TEnum, String, Object[])
  fullName: CodeJam.DebugEnumCode.StateFlagSet<TEnum>(TEnum, TEnum, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StateFlagSet
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 147
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that the specified state flag is set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void StateFlagSet<TEnum>(TEnum value, TEnum flag, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub StateFlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.DebugEnumCode.StateFlagSet*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.StateFlagSet(Of TEnum)(TEnum, TEnum, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.StateFlagSet(Of TEnum)(TEnum, TEnum, System.String, System.Object())
  name.vb: StateFlagSet(Of TEnum)(TEnum, TEnum, String, Object())
- uid: CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String)
  commentId: M:CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String)
  id: AnyStateFlagUnset``1(``0,``0,System.String)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: AnyStateFlagUnset<TEnum>(TEnum, TEnum, String)
  nameWithType: DebugEnumCode.AnyStateFlagUnset<TEnum>(TEnum, TEnum, String)
  fullName: CodeJam.DebugEnumCode.AnyStateFlagUnset<TEnum>(TEnum, TEnum, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AnyStateFlagUnset
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 164
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that any bit from specified state flag is not set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void AnyStateFlagUnset<TEnum>(TEnum value, TEnum flags, string message)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    - id: message
      type: System.String
      description: The message.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub AnyStateFlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flags As TEnum, message As String)
  overload: CodeJam.DebugEnumCode.AnyStateFlagUnset*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.AnyStateFlagUnset(Of TEnum)(TEnum, TEnum, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.AnyStateFlagUnset(Of TEnum)(TEnum, TEnum, System.String)
  name.vb: AnyStateFlagUnset(Of TEnum)(TEnum, TEnum, String)
- uid: CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String,System.Object[])
  commentId: M:CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String,System.Object[])
  id: AnyStateFlagUnset``1(``0,``0,System.String,System.Object[])
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: AnyStateFlagUnset<TEnum>(TEnum, TEnum, String, Object[])
  nameWithType: DebugEnumCode.AnyStateFlagUnset<TEnum>(TEnum, TEnum, String, Object[])
  fullName: CodeJam.DebugEnumCode.AnyStateFlagUnset<TEnum>(TEnum, TEnum, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AnyStateFlagUnset
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 179
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that any bit from specified state flag is not set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void AnyStateFlagUnset<TEnum>(TEnum value, TEnum flags, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub AnyStateFlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flags As TEnum, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.DebugEnumCode.AnyStateFlagUnset*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.AnyStateFlagUnset(Of TEnum)(TEnum, TEnum, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.AnyStateFlagUnset(Of TEnum)(TEnum, TEnum, System.String, System.Object())
  name.vb: AnyStateFlagUnset(Of TEnum)(TEnum, TEnum, String, Object())
- uid: CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String)
  commentId: M:CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String)
  id: AnyStateFlagSet``1(``0,``0,System.String)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: AnyStateFlagSet<TEnum>(TEnum, TEnum, String)
  nameWithType: DebugEnumCode.AnyStateFlagSet<TEnum>(TEnum, TEnum, String)
  fullName: CodeJam.DebugEnumCode.AnyStateFlagSet<TEnum>(TEnum, TEnum, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AnyStateFlagSet
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 196
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that any bit from specified state flag is set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void AnyStateFlagSet<TEnum>(TEnum value, TEnum flags, string message)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    - id: message
      type: System.String
      description: The message.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub AnyStateFlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flags As TEnum, message As String)
  overload: CodeJam.DebugEnumCode.AnyStateFlagSet*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.AnyStateFlagSet(Of TEnum)(TEnum, TEnum, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.AnyStateFlagSet(Of TEnum)(TEnum, TEnum, System.String)
  name.vb: AnyStateFlagSet(Of TEnum)(TEnum, TEnum, String)
- uid: CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String,System.Object[])
  commentId: M:CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String,System.Object[])
  id: AnyStateFlagSet``1(``0,``0,System.String,System.Object[])
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: AnyStateFlagSet<TEnum>(TEnum, TEnum, String, Object[])
  nameWithType: DebugEnumCode.AnyStateFlagSet<TEnum>(TEnum, TEnum, String, Object[])
  fullName: CodeJam.DebugEnumCode.AnyStateFlagSet<TEnum>(TEnum, TEnum, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AnyStateFlagSet
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 211
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that any bit from specified state flag is set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void AnyStateFlagSet<TEnum>(TEnum value, TEnum flags, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flags
      type: '{TEnum}'
      description: The bitwise combinations of the flags.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub AnyStateFlagSet(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flags As TEnum, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.DebugEnumCode.AnyStateFlagSet*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.AnyStateFlagSet(Of TEnum)(TEnum, TEnum, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.AnyStateFlagSet(Of TEnum)(TEnum, TEnum, System.String, System.Object())
  name.vb: AnyStateFlagSet(Of TEnum)(TEnum, TEnum, String, Object())
- uid: CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String)
  commentId: M:CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String)
  id: StateFlagUnset``1(``0,``0,System.String)
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: StateFlagUnset<TEnum>(TEnum, TEnum, String)
  nameWithType: DebugEnumCode.StateFlagUnset<TEnum>(TEnum, TEnum, String)
  fullName: CodeJam.DebugEnumCode.StateFlagUnset<TEnum>(TEnum, TEnum, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StateFlagUnset
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 228
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that the specified state flag is not set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void StateFlagUnset<TEnum>(TEnum value, TEnum flag, string message)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    - id: message
      type: System.String
      description: The message.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub StateFlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum, message As String)
  overload: CodeJam.DebugEnumCode.StateFlagUnset*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.StateFlagUnset(Of TEnum)(TEnum, TEnum, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.StateFlagUnset(Of TEnum)(TEnum, TEnum, System.String)
  name.vb: StateFlagUnset(Of TEnum)(TEnum, TEnum, String)
- uid: CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String,System.Object[])
  commentId: M:CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String,System.Object[])
  id: StateFlagUnset``1(``0,``0,System.String,System.Object[])
  parent: CodeJam.DebugEnumCode
  langs:
  - csharp
  - vb
  name: StateFlagUnset<TEnum>(TEnum, TEnum, String, Object[])
  nameWithType: DebugEnumCode.StateFlagUnset<TEnum>(TEnum, TEnum, String, Object[])
  fullName: CodeJam.DebugEnumCode.StateFlagUnset<TEnum>(TEnum, TEnum, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/DebugEnumCode.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StateFlagUnset
    path: ../Main/src/Assertions/DebugEnumCode.generated.cs
    startLine: 243
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts that the specified state flag is not set.
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void StateFlagUnset<TEnum>(TEnum value, TEnum flag, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible
    parameters:
    - id: value
      type: '{TEnum}'
      description: The value.
    - id: flag
      type: '{TEnum}'
      description: The flag.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    typeParameters:
    - id: TEnum
      description: The type of the enum value.
    content.vb: >-
      <Conditional("DEBUG")>

      Public Shared Sub StateFlagUnset(Of TEnum As {Structure, IComparable, IFormattable, IConvertible})(value As TEnum, flag As TEnum, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.DebugEnumCode.StateFlagUnset*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  nameWithType.vb: DebugEnumCode.StateFlagUnset(Of TEnum)(TEnum, TEnum, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.DebugEnumCode.StateFlagUnset(Of TEnum)(TEnum, TEnum, System.String, System.Object())
  name.vb: StateFlagUnset(Of TEnum)(TEnum, TEnum, String, Object())
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.DebugEnumCode.Defined*
  commentId: Overload:CodeJam.DebugEnumCode.Defined
  isExternal: false
  name: Defined
  nameWithType: DebugEnumCode.Defined
  fullName: CodeJam.DebugEnumCode.Defined
- uid: '{TEnum}'
  commentId: '!:TEnum'
  definition: TEnum
  name: TEnum
  nameWithType: TEnum
  fullName: TEnum
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TEnum
  isExternal: false
  name: TEnum
  nameWithType: TEnum
  fullName: TEnum
- uid: CodeJam.DebugEnumCode.FlagsDefined*
  commentId: Overload:CodeJam.DebugEnumCode.FlagsDefined
  isExternal: false
  name: FlagsDefined
  nameWithType: DebugEnumCode.FlagsDefined
  fullName: CodeJam.DebugEnumCode.FlagsDefined
- uid: CodeJam.DebugEnumCode.FlagSet*
  commentId: Overload:CodeJam.DebugEnumCode.FlagSet
  isExternal: false
  name: FlagSet
  nameWithType: DebugEnumCode.FlagSet
  fullName: CodeJam.DebugEnumCode.FlagSet
- uid: CodeJam.DebugEnumCode.AnyFlagUnset*
  commentId: Overload:CodeJam.DebugEnumCode.AnyFlagUnset
  isExternal: false
  name: AnyFlagUnset
  nameWithType: DebugEnumCode.AnyFlagUnset
  fullName: CodeJam.DebugEnumCode.AnyFlagUnset
- uid: CodeJam.DebugEnumCode.AnyFlagSet*
  commentId: Overload:CodeJam.DebugEnumCode.AnyFlagSet
  isExternal: false
  name: AnyFlagSet
  nameWithType: DebugEnumCode.AnyFlagSet
  fullName: CodeJam.DebugEnumCode.AnyFlagSet
- uid: CodeJam.DebugEnumCode.FlagUnset*
  commentId: Overload:CodeJam.DebugEnumCode.FlagUnset
  isExternal: false
  name: FlagUnset
  nameWithType: DebugEnumCode.FlagUnset
  fullName: CodeJam.DebugEnumCode.FlagUnset
- uid: CodeJam.DebugEnumCode.StateFlagSet*
  commentId: Overload:CodeJam.DebugEnumCode.StateFlagSet
  isExternal: false
  name: StateFlagSet
  nameWithType: DebugEnumCode.StateFlagSet
  fullName: CodeJam.DebugEnumCode.StateFlagSet
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.DebugEnumCode.AnyStateFlagUnset*
  commentId: Overload:CodeJam.DebugEnumCode.AnyStateFlagUnset
  isExternal: false
  name: AnyStateFlagUnset
  nameWithType: DebugEnumCode.AnyStateFlagUnset
  fullName: CodeJam.DebugEnumCode.AnyStateFlagUnset
- uid: CodeJam.DebugEnumCode.AnyStateFlagSet*
  commentId: Overload:CodeJam.DebugEnumCode.AnyStateFlagSet
  isExternal: false
  name: AnyStateFlagSet
  nameWithType: DebugEnumCode.AnyStateFlagSet
  fullName: CodeJam.DebugEnumCode.AnyStateFlagSet
- uid: CodeJam.DebugEnumCode.StateFlagUnset*
  commentId: Overload:CodeJam.DebugEnumCode.StateFlagUnset
  isExternal: false
  name: StateFlagUnset
  nameWithType: DebugEnumCode.StateFlagUnset
  fullName: CodeJam.DebugEnumCode.StateFlagUnset
