### YamlMime:ManagedReference
items:
- uid: CodeJam.Code
  commentId: T:CodeJam.Code
  id: Code
  parent: CodeJam
  children:
  - CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String)
  - CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String,System.Object[])
  - CodeJam.Code.AssertState(System.Boolean,System.String)
  - CodeJam.Code.AssertState(System.Boolean,System.String,System.Object[])
  - CodeJam.Code.BugIf(System.Boolean,System.String)
  - CodeJam.Code.BugIf(System.Boolean,System.String,System.Object[])
  - CodeJam.Code.DisposedIf``1(System.Boolean,``0)
  - CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String)
  - CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String,System.Object[])
  - CodeJam.Code.DisposedIfNull``2(``0,``1)
  - CodeJam.Code.DisposedIfNull``2(``0,``1,System.String)
  - CodeJam.Code.DisposedIfNull``2(``0,``1,System.String,System.Object[])
  - CodeJam.Code.InRange(System.Double,System.String,System.Double,System.Double)
  - CodeJam.Code.InRange(System.Int32,System.String,System.Int32,System.Int32)
  - CodeJam.Code.InRange``1(``0,System.String,``0,``0)
  - CodeJam.Code.ItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - CodeJam.Code.NotNull``1(``0,System.String)
  - CodeJam.Code.NotNull``1(System.Nullable{``0},System.String)
  - CodeJam.Code.NotNullAndItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - CodeJam.Code.NotNullNorEmpty(System.String,System.String)
  - CodeJam.Code.NotNullNorWhiteSpace(System.String,System.String)
  - CodeJam.Code.ValidCount(System.Int32,System.String)
  - CodeJam.Code.ValidCount(System.Int32,System.String,System.Int32)
  - CodeJam.Code.ValidIndex(System.Int32,System.String)
  - CodeJam.Code.ValidIndex(System.Int32,System.String,System.Int32)
  - CodeJam.Code.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)
  - CodeJam.Code.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: Code
  nameWithType: Code
  fullName: CodeJam.Code
  type: Class
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Code
    path: ../Main/src/Assertions/Code.cs
    startLine: 14
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertions class.
  example: []
  syntax:
    content: public static class Code
    content.vb: Public Module Code
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Code.DisposedIf``1(System.Boolean,``0)
  commentId: M:CodeJam.Code.DisposedIf``1(System.Boolean,``0)
  id: DisposedIf``1(System.Boolean,``0)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: DisposedIf<TDisposable>(Boolean, TDisposable)
  nameWithType: Code.DisposedIf<TDisposable>(Boolean, TDisposable)
  fullName: CodeJam.Code.DisposedIf<TDisposable>(System.Boolean, TDisposable)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.NonDebug.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DisposedIf
    path: ../Main/src/Assertions/Code.NonDebug.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for object disposal
  example: []
  syntax:
    content: 'public static void DisposedIf<TDisposable>(bool disposed, TDisposable thisReference)where TDisposable : IDisposable'
    parameters:
    - id: disposed
      type: System.Boolean
      description: Dispose condition.
    - id: thisReference
      type: '{TDisposable}'
      description: The this reference.
    typeParameters:
    - id: TDisposable
      description: The type of the disposable.
    content.vb: Public Shared Sub DisposedIf(Of TDisposable As IDisposable)(disposed As Boolean, thisReference As TDisposable)
  overload: CodeJam.Code.DisposedIf*
  nameWithType.vb: Code.DisposedIf(Of TDisposable)(Boolean, TDisposable)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.DisposedIf(Of TDisposable)(System.Boolean, TDisposable)
  name.vb: DisposedIf(Of TDisposable)(Boolean, TDisposable)
- uid: CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String)
  commentId: M:CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String)
  id: DisposedIf``1(System.Boolean,``0,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: DisposedIf<TDisposable>(Boolean, TDisposable, String)
  nameWithType: Code.DisposedIf<TDisposable>(Boolean, TDisposable, String)
  fullName: CodeJam.Code.DisposedIf<TDisposable>(System.Boolean, TDisposable, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.NonDebug.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DisposedIf
    path: ../Main/src/Assertions/Code.NonDebug.cs
    startLine: 38
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for object disposal
  example: []
  syntax:
    content: 'public static void DisposedIf<TDisposable>(bool disposed, TDisposable thisReference, string message)where TDisposable : IDisposable'
    parameters:
    - id: disposed
      type: System.Boolean
      description: Dispose condition.
    - id: thisReference
      type: '{TDisposable}'
      description: The this reference.
    - id: message
      type: System.String
      description: The message.
    typeParameters:
    - id: TDisposable
      description: The type of the disposable.
    content.vb: Public Shared Sub DisposedIf(Of TDisposable As IDisposable)(disposed As Boolean, thisReference As TDisposable, message As String)
  overload: CodeJam.Code.DisposedIf*
  nameWithType.vb: Code.DisposedIf(Of TDisposable)(Boolean, TDisposable, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.DisposedIf(Of TDisposable)(System.Boolean, TDisposable, System.String)
  name.vb: DisposedIf(Of TDisposable)(Boolean, TDisposable, String)
- uid: CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String,System.Object[])
  commentId: M:CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String,System.Object[])
  id: DisposedIf``1(System.Boolean,``0,System.String,System.Object[])
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: DisposedIf<TDisposable>(Boolean, TDisposable, String, Object[])
  nameWithType: Code.DisposedIf<TDisposable>(Boolean, TDisposable, String, Object[])
  fullName: CodeJam.Code.DisposedIf<TDisposable>(System.Boolean, TDisposable, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.NonDebug.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DisposedIf
    path: ../Main/src/Assertions/Code.NonDebug.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for object disposal
  example: []
  syntax:
    content: 'public static void DisposedIf<TDisposable>(bool disposed, TDisposable thisReference, string messageFormat, params object[] args)where TDisposable : IDisposable'
    parameters:
    - id: disposed
      type: System.Boolean
      description: Dispose condition.
    - id: thisReference
      type: '{TDisposable}'
      description: The this reference.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    typeParameters:
    - id: TDisposable
      description: The type of the disposable.
    content.vb: Public Shared Sub DisposedIf(Of TDisposable As IDisposable)(disposed As Boolean, thisReference As TDisposable, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.Code.DisposedIf*
  nameWithType.vb: Code.DisposedIf(Of TDisposable)(Boolean, TDisposable, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.DisposedIf(Of TDisposable)(System.Boolean, TDisposable, System.String, System.Object())
  name.vb: DisposedIf(Of TDisposable)(Boolean, TDisposable, String, Object())
- uid: CodeJam.Code.DisposedIfNull``2(``0,``1)
  commentId: M:CodeJam.Code.DisposedIfNull``2(``0,``1)
  id: DisposedIfNull``2(``0,``1)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: DisposedIfNull<TResource, TDisposable>(TResource, TDisposable)
  nameWithType: Code.DisposedIfNull<TResource, TDisposable>(TResource, TDisposable)
  fullName: CodeJam.Code.DisposedIfNull<TResource, TDisposable>(TResource, TDisposable)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.NonDebug.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DisposedIfNull
    path: ../Main/src/Assertions/Code.NonDebug.cs
    startLine: 74
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for object disposal
  example: []
  syntax:
    content: 'public static void DisposedIfNull<TResource, TDisposable>(TResource resource, TDisposable thisReference)where TResource : class where TDisposable : IDisposable'
    parameters:
    - id: resource
      type: '{TResource}'
      description: The resource. Should be not null if the object is not disposed.
    - id: thisReference
      type: '{TDisposable}'
      description: The this reference.
    typeParameters:
    - id: TResource
      description: The type of the resource.
    - id: TDisposable
      description: The type of the disposable.
    content.vb: Public Shared Sub DisposedIfNull(Of TResource As Class, TDisposable As IDisposable)(resource As TResource, thisReference As TDisposable)
  overload: CodeJam.Code.DisposedIfNull*
  nameWithType.vb: Code.DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable)
  name.vb: DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable)
- uid: CodeJam.Code.DisposedIfNull``2(``0,``1,System.String)
  commentId: M:CodeJam.Code.DisposedIfNull``2(``0,``1,System.String)
  id: DisposedIfNull``2(``0,``1,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, String)
  nameWithType: Code.DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, String)
  fullName: CodeJam.Code.DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.NonDebug.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DisposedIfNull
    path: ../Main/src/Assertions/Code.NonDebug.cs
    startLine: 92
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for object disposal
  example: []
  syntax:
    content: 'public static void DisposedIfNull<TResource, TDisposable>(TResource resource, TDisposable thisReference, string message)where TResource : class where TDisposable : IDisposable'
    parameters:
    - id: resource
      type: '{TResource}'
      description: The resource. Should be not null if the object is not disposed.
    - id: thisReference
      type: '{TDisposable}'
      description: The this reference.
    - id: message
      type: System.String
      description: The message.
    typeParameters:
    - id: TResource
      description: The type of the resource.
    - id: TDisposable
      description: The type of the disposable.
    content.vb: Public Shared Sub DisposedIfNull(Of TResource As Class, TDisposable As IDisposable)(resource As TResource, thisReference As TDisposable, message As String)
  overload: CodeJam.Code.DisposedIfNull*
  nameWithType.vb: Code.DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable, System.String)
  name.vb: DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable, String)
- uid: CodeJam.Code.DisposedIfNull``2(``0,``1,System.String,System.Object[])
  commentId: M:CodeJam.Code.DisposedIfNull``2(``0,``1,System.String,System.Object[])
  id: DisposedIfNull``2(``0,``1,System.String,System.Object[])
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, String, Object[])
  nameWithType: Code.DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, String, Object[])
  fullName: CodeJam.Code.DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.NonDebug.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: DisposedIfNull
    path: ../Main/src/Assertions/Code.NonDebug.cs
    startLine: 112
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for object disposal
  example: []
  syntax:
    content: 'public static void DisposedIfNull<TResource, TDisposable>(TResource resource, TDisposable thisReference, string messageFormat, params object[] args)where TResource : class where TDisposable : IDisposable'
    parameters:
    - id: resource
      type: '{TResource}'
      description: The resource. Should be not null if the object is not disposed.
    - id: thisReference
      type: '{TDisposable}'
      description: The this reference.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    typeParameters:
    - id: TResource
      description: The type of the resource.
    - id: TDisposable
      description: The type of the disposable.
    content.vb: Public Shared Sub DisposedIfNull(Of TResource As Class, TDisposable As IDisposable)(resource As TResource, thisReference As TDisposable, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.Code.DisposedIfNull*
  nameWithType.vb: Code.DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable, System.String, System.Object())
  name.vb: DisposedIfNull(Of TResource, TDisposable)(TResource, TDisposable, String, Object())
- uid: CodeJam.Code.NotNull``1(``0,System.String)
  commentId: M:CodeJam.Code.NotNull``1(``0,System.String)
  id: NotNull``1(``0,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: NotNull<T>(T, String)
  nameWithType: Code.NotNull<T>(T, String)
  fullName: CodeJam.Code.NotNull<T>(T, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNull
    path: ../Main/src/Assertions/Code.cs
    startLine: 22
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Ensures that <code data-dev-comment-type="paramref" class="paramref">arg</code> != <code>null</code>
  example: []
  syntax:
    content: 'public static void NotNull<T>(T arg, string argName)where T : class'
    parameters:
    - id: arg
      type: '{T}'
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    typeParameters:
    - id: T
      description: Type of the value. Auto-inferred in most cases
    content.vb: Public Shared Sub NotNull(Of T As Class)(arg As T, argName As String)
  overload: CodeJam.Code.NotNull*
  nameWithType.vb: Code.NotNull(Of T)(T, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.NotNull(Of T)(T, System.String)
  name.vb: NotNull(Of T)(T, String)
- uid: CodeJam.Code.ItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:CodeJam.Code.ItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: ItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: ItemNotNull<T>(IEnumerable<T>, String)
  nameWithType: Code.ItemNotNull<T>(IEnumerable<T>, String)
  fullName: CodeJam.Code.ItemNotNull<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ItemNotNull
    path: ../Main/src/Assertions/Code.cs
    startLine: 36
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Ensures that all items in <code data-dev-comment-type="paramref" class="paramref">arg</code> != <code>null</code>
  example: []
  syntax:
    content: 'public static void ItemNotNull<T>(IEnumerable<T> arg, string argName)where T : class'
    parameters:
    - id: arg
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    typeParameters:
    - id: T
      description: Type of the value. Auto-inferred in most cases
    content.vb: Public Shared Sub ItemNotNull(Of T As Class)(arg As IEnumerable(Of T), argName As String)
  overload: CodeJam.Code.ItemNotNull*
  nameWithType.vb: Code.ItemNotNull(Of T)(IEnumerable(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.ItemNotNull(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: ItemNotNull(Of T)(IEnumerable(Of T), String)
- uid: CodeJam.Code.NotNullAndItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:CodeJam.Code.NotNullAndItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: NotNullAndItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: NotNullAndItemNotNull<T>(IEnumerable<T>, String)
  nameWithType: Code.NotNullAndItemNotNull<T>(IEnumerable<T>, String)
  fullName: CodeJam.Code.NotNullAndItemNotNull<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNullAndItemNotNull
    path: ../Main/src/Assertions/Code.cs
    startLine: 51
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Ensures that <code data-dev-comment-type="paramref" class="paramref">arg</code> and its all items != <code>null</code>
  example: []
  syntax:
    content: 'public static void NotNullAndItemNotNull<T>(IEnumerable<T> arg, string argName)where T : class'
    parameters:
    - id: arg
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    typeParameters:
    - id: T
      description: Type of the value. Auto-inferred in most cases
    content.vb: Public Shared Sub NotNullAndItemNotNull(Of T As Class)(arg As IEnumerable(Of T), argName As String)
  overload: CodeJam.Code.NotNullAndItemNotNull*
  nameWithType.vb: Code.NotNullAndItemNotNull(Of T)(IEnumerable(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.NotNullAndItemNotNull(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: NotNullAndItemNotNull(Of T)(IEnumerable(Of T), String)
- uid: CodeJam.Code.NotNull``1(System.Nullable{``0},System.String)
  commentId: M:CodeJam.Code.NotNull``1(System.Nullable{``0},System.String)
  id: NotNull``1(System.Nullable{``0},System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: NotNull<T>(Nullable<T>, String)
  nameWithType: Code.NotNull<T>(Nullable<T>, String)
  fullName: CodeJam.Code.NotNull<T>(System.Nullable<T>, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNull
    path: ../Main/src/Assertions/Code.cs
    startLine: 66
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Ensures that <code data-dev-comment-type="paramref" class="paramref">arg</code> != <code>null</code>
  example: []
  syntax:
    content: 'public static void NotNull<T>(T? arg, string argName)where T : struct'
    parameters:
    - id: arg
      type: System.Nullable{{T}}
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    typeParameters:
    - id: T
      description: Type of the value. Auto-inferred in most cases
    content.vb: Public Shared Sub NotNull(Of T As Structure)(arg As T?, argName As String)
  overload: CodeJam.Code.NotNull*
  nameWithType.vb: Code.NotNull(Of T)(Nullable(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.NotNull(Of T)(System.Nullable(Of T), System.String)
  name.vb: NotNull(Of T)(Nullable(Of T), String)
- uid: CodeJam.Code.NotNullNorEmpty(System.String,System.String)
  commentId: M:CodeJam.Code.NotNullNorEmpty(System.String,System.String)
  id: NotNullNorEmpty(System.String,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: NotNullNorEmpty(String, String)
  nameWithType: Code.NotNullNorEmpty(String, String)
  fullName: CodeJam.Code.NotNullNorEmpty(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNullNorEmpty
    path: ../Main/src/Assertions/Code.cs
    startLine: 79
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Ensures that <code data-dev-comment-type="paramref" class="paramref">arg</code> is not null nor empty
  example: []
  syntax:
    content: public static void NotNullNorEmpty(string arg, string argName)
    parameters:
    - id: arg
      type: System.String
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: Public Shared Sub NotNullNorEmpty(arg As String, argName As String)
  overload: CodeJam.Code.NotNullNorEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.NotNullNorWhiteSpace(System.String,System.String)
  commentId: M:CodeJam.Code.NotNullNorWhiteSpace(System.String,System.String)
  id: NotNullNorWhiteSpace(System.String,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: NotNullNorWhiteSpace(String, String)
  nameWithType: Code.NotNullNorWhiteSpace(String, String)
  fullName: CodeJam.Code.NotNullNorWhiteSpace(System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NotNullNorWhiteSpace
    path: ../Main/src/Assertions/Code.cs
    startLine: 92
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Ensures that <code data-dev-comment-type="paramref" class="paramref">arg</code> is not null nor white space
  example: []
  syntax:
    content: public static void NotNullNorWhiteSpace(string arg, string argName)
    parameters:
    - id: arg
      type: System.String
      description: The argument.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: Public Shared Sub NotNullNorWhiteSpace(arg As String, argName As String)
  overload: CodeJam.Code.NotNullNorWhiteSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String)
  commentId: M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String)
  id: AssertArgument(System.Boolean,System.String,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: AssertArgument(Boolean, String, String)
  nameWithType: Code.AssertArgument(Boolean, String, String)
  fullName: CodeJam.Code.AssertArgument(System.Boolean, System.String, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AssertArgument
    path: ../Main/src/Assertions/Code.cs
    startLine: 106
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for the argument value
  example: []
  syntax:
    content: public static void AssertArgument(bool condition, string argName, string message)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to check
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: message
      type: System.String
      description: The message.
    content.vb: Public Shared Sub AssertArgument(condition As Boolean, argName As String, message As String)
  overload: CodeJam.Code.AssertArgument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String,System.Object[])
  commentId: M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String,System.Object[])
  id: AssertArgument(System.Boolean,System.String,System.String,System.Object[])
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: AssertArgument(Boolean, String, String, Object[])
  nameWithType: Code.AssertArgument(Boolean, String, String, Object[])
  fullName: CodeJam.Code.AssertArgument(System.Boolean, System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AssertArgument
    path: ../Main/src/Assertions/Code.cs
    startLine: 122
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for the argument value
  example: []
  syntax:
    content: public static void AssertArgument(bool condition, string argName, string messageFormat, params object[] args)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to check
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    content.vb: Public Shared Sub AssertArgument(condition As Boolean, argName As String, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.Code.AssertArgument*
  nameWithType.vb: Code.AssertArgument(Boolean, String, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.AssertArgument(System.Boolean, System.String, System.String, System.Object())
  name.vb: AssertArgument(Boolean, String, String, Object())
- uid: CodeJam.Code.InRange(System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:CodeJam.Code.InRange(System.Int32,System.String,System.Int32,System.Int32)
  id: InRange(System.Int32,System.String,System.Int32,System.Int32)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: InRange(Int32, String, Int32, Int32)
  nameWithType: Code.InRange(Int32, String, Int32, Int32)
  fullName: CodeJam.Code.InRange(System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: InRange
    path: ../Main/src/Assertions/Code.cs
    startLine: 141
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for the argument in range
  example: []
  syntax:
    content: public static void InRange(int value, string argName, int fromValue, int toValue)
    parameters:
    - id: value
      type: System.Int32
      description: The value.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: fromValue
      type: System.Int32
      description: From value (inclusive).
    - id: toValue
      type: System.Int32
      description: To value (inclusive).
    content.vb: Public Shared Sub InRange(value As Integer, argName As String, fromValue As Integer, toValue As Integer)
  overload: CodeJam.Code.InRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.InRange(System.Double,System.String,System.Double,System.Double)
  commentId: M:CodeJam.Code.InRange(System.Double,System.String,System.Double,System.Double)
  id: InRange(System.Double,System.String,System.Double,System.Double)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: InRange(Double, String, Double, Double)
  nameWithType: Code.InRange(Double, String, Double, Double)
  fullName: CodeJam.Code.InRange(System.Double, System.String, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: InRange
    path: ../Main/src/Assertions/Code.cs
    startLine: 158
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for the argument in range
  example: []
  syntax:
    content: public static void InRange(double value, string argName, double fromValue, double toValue)
    parameters:
    - id: value
      type: System.Double
      description: The value.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: fromValue
      type: System.Double
      description: From value (inclusive).
    - id: toValue
      type: System.Double
      description: To value (inclusive).
    content.vb: Public Shared Sub InRange(value As Double, argName As String, fromValue As Double, toValue As Double)
  overload: CodeJam.Code.InRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.InRange``1(``0,System.String,``0,``0)
  commentId: M:CodeJam.Code.InRange``1(``0,System.String,``0,``0)
  id: InRange``1(``0,System.String,``0,``0)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: InRange<T>(T, String, T, T)
  nameWithType: Code.InRange<T>(T, String, T, T)
  fullName: CodeJam.Code.InRange<T>(T, System.String, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: InRange
    path: ../Main/src/Assertions/Code.cs
    startLine: 177
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for the argument in range
  example: []
  syntax:
    content: public static void InRange<T>(T value, string argName, T fromValue, T toValue)
    parameters:
    - id: value
      type: '{T}'
      description: The value.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: fromValue
      type: '{T}'
      description: From value (inclusive).
    - id: toValue
      type: '{T}'
      description: To value (inclusive).
    typeParameters:
    - id: T
      description: Type of the value
    content.vb: Public Shared Sub InRange(Of T)(value As T, argName As String, fromValue As T, toValue As T)
  overload: CodeJam.Code.InRange*
  nameWithType.vb: Code.InRange(Of T)(T, String, T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.InRange(Of T)(T, System.String, T, T)
  name.vb: InRange(Of T)(T, String, T, T)
- uid: CodeJam.Code.ValidCount(System.Int32,System.String)
  commentId: M:CodeJam.Code.ValidCount(System.Int32,System.String)
  id: ValidCount(System.Int32,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: ValidCount(Int32, String)
  nameWithType: Code.ValidCount(Int32, String)
  fullName: CodeJam.Code.ValidCount(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ValidCount
    path: ../Main/src/Assertions/Code.cs
    startLine: 195
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts if the passed value is not a valid count.
  example: []
  syntax:
    content: public static void ValidCount(int count, string argName)
    parameters:
    - id: count
      type: System.Int32
      description: The count value.
    - id: argName
      type: System.String
      description: The name of the argument.
    content.vb: Public Shared Sub ValidCount(count As Integer, argName As String)
  overload: CodeJam.Code.ValidCount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.ValidCount(System.Int32,System.String,System.Int32)
  commentId: M:CodeJam.Code.ValidCount(System.Int32,System.String,System.Int32)
  id: ValidCount(System.Int32,System.String,System.Int32)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: ValidCount(Int32, String, Int32)
  nameWithType: Code.ValidCount(Int32, String, Int32)
  fullName: CodeJam.Code.ValidCount(System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ValidCount
    path: ../Main/src/Assertions/Code.cs
    startLine: 204
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts if the passed value is not a valid count.
  example: []
  syntax:
    content: public static void ValidCount(int count, string argName, int length)
    parameters:
    - id: count
      type: System.Int32
      description: The count value.
    - id: argName
      type: System.String
      description: The name of the argument.
    - id: length
      type: System.Int32
      description: The length.
    content.vb: Public Shared Sub ValidCount(count As Integer, argName As String, length As Integer)
  overload: CodeJam.Code.ValidCount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.ValidIndex(System.Int32,System.String)
  commentId: M:CodeJam.Code.ValidIndex(System.Int32,System.String)
  id: ValidIndex(System.Int32,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: ValidIndex(Int32, String)
  nameWithType: Code.ValidIndex(Int32, String)
  fullName: CodeJam.Code.ValidIndex(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ValidIndex
    path: ../Main/src/Assertions/Code.cs
    startLine: 216
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for index in range
  example: []
  syntax:
    content: public static void ValidIndex(int index, string argName)
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    - id: argName
      type: System.String
      description: Name of the argument.
    content.vb: Public Shared Sub ValidIndex(index As Integer, argName As String)
  overload: CodeJam.Code.ValidIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.ValidIndex(System.Int32,System.String,System.Int32)
  commentId: M:CodeJam.Code.ValidIndex(System.Int32,System.String,System.Int32)
  id: ValidIndex(System.Int32,System.String,System.Int32)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: ValidIndex(Int32, String, Int32)
  nameWithType: Code.ValidIndex(Int32, String, Int32)
  fullName: CodeJam.Code.ValidIndex(System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ValidIndex
    path: ../Main/src/Assertions/Code.cs
    startLine: 230
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for index in range
  example: []
  syntax:
    content: public static void ValidIndex(int index, string argName, int length)
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    - id: argName
      type: System.String
      description: Name of the argument.
    - id: length
      type: System.Int32
      description: The length.
    content.vb: Public Shared Sub ValidIndex(index As Integer, argName As String, length As Integer)
  overload: CodeJam.Code.ValidIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)
  commentId: M:CodeJam.Code.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)
  id: ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: ValidIndexPair(Int32, String, Int32, String, Int32)
  nameWithType: Code.ValidIndexPair(Int32, String, Int32, String, Int32)
  fullName: CodeJam.Code.ValidIndexPair(System.Int32, System.String, System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ValidIndexPair
    path: ../Main/src/Assertions/Code.cs
    startLine: 247
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for from-to index pair
  example: []
  syntax:
    content: public static void ValidIndexPair(int fromIndex, string fromIndexName, int toIndex, string toIndexName, int length)
    parameters:
    - id: fromIndex
      type: System.Int32
      description: From index.
    - id: fromIndexName
      type: System.String
      description: Name of from index.
    - id: toIndex
      type: System.Int32
      description: To index.
    - id: toIndexName
      type: System.String
      description: Name of to index.
    - id: length
      type: System.Int32
      description: The length.
    content.vb: Public Shared Sub ValidIndexPair(fromIndex As Integer, fromIndexName As String, toIndex As Integer, toIndexName As String, length As Integer)
  overload: CodeJam.Code.ValidIndexPair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)
  commentId: M:CodeJam.Code.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)
  id: ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: ValidIndexAndCount(Int32, String, Int32, String, Int32)
  nameWithType: Code.ValidIndexAndCount(Int32, String, Int32, String, Int32)
  fullName: CodeJam.Code.ValidIndexAndCount(System.Int32, System.String, System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ValidIndexAndCount
    path: ../Main/src/Assertions/Code.cs
    startLine: 268
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Assertion for startIndex-count pair
  example: []
  syntax:
    content: public static void ValidIndexAndCount(int startIndex, string startIndexName, int count, string countName, int length)
    parameters:
    - id: startIndex
      type: System.Int32
      description: The start index.
    - id: startIndexName
      type: System.String
      description: Start name of the index.
    - id: count
      type: System.Int32
      description: The count.
    - id: countName
      type: System.String
      description: Name of the count.
    - id: length
      type: System.Int32
      description: The length.
    content.vb: Public Shared Sub ValidIndexAndCount(startIndex As Integer, startIndexName As String, count As Integer, countName As String, length As Integer)
  overload: CodeJam.Code.ValidIndexAndCount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.AssertState(System.Boolean,System.String)
  commentId: M:CodeJam.Code.AssertState(System.Boolean,System.String)
  id: AssertState(System.Boolean,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: AssertState(Boolean, String)
  nameWithType: Code.AssertState(Boolean, String)
  fullName: CodeJam.Code.AssertState(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AssertState
    path: ../Main/src/Assertions/Code.cs
    startLine: 287
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: State assertion
  example: []
  syntax:
    content: public static void AssertState(bool condition, string message)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to check
    - id: message
      type: System.String
      description: The message.
    content.vb: Public Shared Sub AssertState(condition As Boolean, message As String)
  overload: CodeJam.Code.AssertState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.AssertState(System.Boolean,System.String,System.Object[])
  commentId: M:CodeJam.Code.AssertState(System.Boolean,System.String,System.Object[])
  id: AssertState(System.Boolean,System.String,System.Object[])
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: AssertState(Boolean, String, Object[])
  nameWithType: Code.AssertState(Boolean, String, Object[])
  fullName: CodeJam.Code.AssertState(System.Boolean, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AssertState
    path: ../Main/src/Assertions/Code.cs
    startLine: 301
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: State assertion
  example: []
  syntax:
    content: public static void AssertState(bool condition, string messageFormat, params object[] args)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to check
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    content.vb: Public Shared Sub AssertState(condition As Boolean, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.Code.AssertState*
  nameWithType.vb: Code.AssertState(Boolean, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.AssertState(System.Boolean, System.String, System.Object())
  name.vb: AssertState(Boolean, String, Object())
- uid: CodeJam.Code.BugIf(System.Boolean,System.String)
  commentId: M:CodeJam.Code.BugIf(System.Boolean,System.String)
  id: BugIf(System.Boolean,System.String)
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: BugIf(Boolean, String)
  nameWithType: Code.BugIf(Boolean, String)
  fullName: CodeJam.Code.BugIf(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BugIf
    path: ../Main/src/Assertions/Code.cs
    startLine: 317
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts if the given condition is satisfied.
  example: []
  syntax:
    content: public static void BugIf(bool condition, string message)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to check.
    - id: message
      type: System.String
      description: The message.
    content.vb: Public Shared Sub BugIf(condition As Boolean, message As String)
  overload: CodeJam.Code.BugIf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.Code.BugIf(System.Boolean,System.String,System.Object[])
  commentId: M:CodeJam.Code.BugIf(System.Boolean,System.String,System.Object[])
  id: BugIf(System.Boolean,System.String,System.Object[])
  parent: CodeJam.Code
  langs:
  - csharp
  - vb
  name: BugIf(Boolean, String, Object[])
  nameWithType: Code.BugIf(Boolean, String, Object[])
  fullName: CodeJam.Code.BugIf(System.Boolean, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Main/src/Assertions/Code.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BugIf
    path: ../Main/src/Assertions/Code.cs
    startLine: 331
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: Asserts if the given condition is satisfied.
  example: []
  syntax:
    content: public static void BugIf(bool condition, string messageFormat, params object[] args)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to check.
    - id: messageFormat
      type: System.String
      description: The message format.
    - id: args
      type: System.Object[]
      description: The arguments.
    content.vb: Public Shared Sub BugIf(condition As Boolean, messageFormat As String, ParamArray args As Object())
  overload: CodeJam.Code.BugIf*
  nameWithType.vb: Code.BugIf(Boolean, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Code.BugIf(System.Boolean, System.String, System.Object())
  name.vb: BugIf(Boolean, String, Object())
references:
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Code.DisposedIf*
  commentId: Overload:CodeJam.Code.DisposedIf
  isExternal: false
  name: DisposedIf
  nameWithType: Code.DisposedIf
  fullName: CodeJam.Code.DisposedIf
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{TDisposable}'
  commentId: '!:TDisposable'
  definition: TDisposable
  name: TDisposable
  nameWithType: TDisposable
  fullName: TDisposable
- uid: TDisposable
  isExternal: false
  name: TDisposable
  nameWithType: TDisposable
  fullName: TDisposable
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CodeJam.Code.DisposedIfNull*
  commentId: Overload:CodeJam.Code.DisposedIfNull
  isExternal: false
  name: DisposedIfNull
  nameWithType: Code.DisposedIfNull
  fullName: CodeJam.Code.DisposedIfNull
- uid: '{TResource}'
  commentId: '!:TResource'
  definition: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: TResource
  isExternal: false
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: CodeJam.Code.NotNull*
  commentId: Overload:CodeJam.Code.NotNull
  isExternal: false
  name: NotNull
  nameWithType: Code.NotNull
  fullName: CodeJam.Code.NotNull
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Code.ItemNotNull*
  commentId: Overload:CodeJam.Code.ItemNotNull
  isExternal: false
  name: ItemNotNull
  nameWithType: Code.ItemNotNull
  fullName: CodeJam.Code.ItemNotNull
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Code.NotNullAndItemNotNull*
  commentId: Overload:CodeJam.Code.NotNullAndItemNotNull
  isExternal: false
  name: NotNullAndItemNotNull
  nameWithType: Code.NotNullAndItemNotNull
  fullName: CodeJam.Code.NotNullAndItemNotNull
- uid: System.Nullable{{T}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Code.NotNullNorEmpty*
  commentId: Overload:CodeJam.Code.NotNullNorEmpty
  isExternal: false
  name: NotNullNorEmpty
  nameWithType: Code.NotNullNorEmpty
  fullName: CodeJam.Code.NotNullNorEmpty
- uid: CodeJam.Code.NotNullNorWhiteSpace*
  commentId: Overload:CodeJam.Code.NotNullNorWhiteSpace
  isExternal: false
  name: NotNullNorWhiteSpace
  nameWithType: Code.NotNullNorWhiteSpace
  fullName: CodeJam.Code.NotNullNorWhiteSpace
- uid: CodeJam.Code.AssertArgument*
  commentId: Overload:CodeJam.Code.AssertArgument
  isExternal: false
  name: AssertArgument
  nameWithType: Code.AssertArgument
  fullName: CodeJam.Code.AssertArgument
- uid: CodeJam.Code.InRange*
  commentId: Overload:CodeJam.Code.InRange
  isExternal: false
  name: InRange
  nameWithType: Code.InRange
  fullName: CodeJam.Code.InRange
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: CodeJam.Code.ValidCount*
  commentId: Overload:CodeJam.Code.ValidCount
  isExternal: false
  name: ValidCount
  nameWithType: Code.ValidCount
  fullName: CodeJam.Code.ValidCount
- uid: CodeJam.Code.ValidIndex*
  commentId: Overload:CodeJam.Code.ValidIndex
  isExternal: false
  name: ValidIndex
  nameWithType: Code.ValidIndex
  fullName: CodeJam.Code.ValidIndex
- uid: CodeJam.Code.ValidIndexPair*
  commentId: Overload:CodeJam.Code.ValidIndexPair
  isExternal: false
  name: ValidIndexPair
  nameWithType: Code.ValidIndexPair
  fullName: CodeJam.Code.ValidIndexPair
- uid: CodeJam.Code.ValidIndexAndCount*
  commentId: Overload:CodeJam.Code.ValidIndexAndCount
  isExternal: false
  name: ValidIndexAndCount
  nameWithType: Code.ValidIndexAndCount
  fullName: CodeJam.Code.ValidIndexAndCount
- uid: CodeJam.Code.AssertState*
  commentId: Overload:CodeJam.Code.AssertState
  isExternal: false
  name: AssertState
  nameWithType: Code.AssertState
  fullName: CodeJam.Code.AssertState
- uid: CodeJam.Code.BugIf*
  commentId: Overload:CodeJam.Code.BugIf
  isExternal: false
  name: BugIf
  nameWithType: Code.BugIf
  fullName: CodeJam.Code.BugIf
