### YamlMime:ManagedReference
items:
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  id: RangeExtensions
  parent: CodeJam.Ranges
  children:
  - CodeJam.Ranges.RangeExtensions.Clamp``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0,``0)
  - CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  - CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{``0},``0,``0)
  - CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  - CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0},``1)
  - CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  - CodeJam.Ranges.RangeExtensions.Intersect``1(CodeJam.Ranges.Range{``0},``0,``0)
  - CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  - CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0},``1)
  - CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  - CodeJam.Ranges.RangeExtensions.MakeExclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.RangeExtensions.MakeInclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  - CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  - CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  - CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},``0)
  - CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  - CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  - CodeJam.Ranges.RangeExtensions.Union``1(CodeJam.Ranges.Range{``0},``0,``0)
  - CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  - CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0},``1)
  - CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  - CodeJam.Ranges.RangeExtensions.WithKey``2(CodeJam.Ranges.Range{``0},``1)
  - CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  - CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  - CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1})
  - CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1},System.Func{``0,``1})
  - CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  - CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  langs:
  - csharp
  - vb
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
  type: Class
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RangeExtensions
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 20
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extension methods for <xref href="CodeJam.Ranges.Range%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static class RangeExtensions
    content.vb: Public Module RangeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1})
  id: WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, T2>(Range<T>, Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2>(Range<T>, Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2>(CodeJam.Ranges.Range<T>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
    startLine: 28
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Updates the values of the boundaries of the range.
  example: []
  syntax:
    content: public static Range<T2> WithValues<T, T2>(this Range<T> range, Func<T, T2> newValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: newValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the boundaries. Used if boundary has a value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: T2
      description: The type of new range values.
    return:
      type: CodeJam.Ranges.Range{{T2}}
      description: A range with new values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, T2)(range As Range(Of T), newValueSelector As Func(Of T, T2)) As Range(Of T2)
  overload: CodeJam.Ranges.RangeExtensions.WithValues*
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2)(Range(Of T), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2)(CodeJam.Ranges.Range(Of T), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(Range(Of T), Func(Of T, T2))
- uid: CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1},System.Func{``0,``1})
  id: WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, T2>(Range<T>, Func<T, T2>, Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2>(Range<T>, Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2>(CodeJam.Ranges.Range<T>, System.Func<T, T2>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
    startLine: 45
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Updates the values of the boundaries of the range.
  example: []
  syntax:
    content: public static Range<T2> WithValues<T, T2>(this Range<T> range, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the From boundary. Used if boundary has a value.
    - id: toValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the To boundary. Used if boundary has a value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: T2
      description: The type of new range values.
    return:
      type: CodeJam.Ranges.Range{{T2}}
      description: A range with new values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, T2)(range As Range(Of T), fromValueSelector As Func(Of T, T2), toValueSelector As Func(Of T, T2)) As Range(Of T2)
  overload: CodeJam.Ranges.RangeExtensions.WithValues*
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2)(Range(Of T), Func(Of T, T2), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2)(CodeJam.Ranges.Range(Of T), System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2)(Range(Of T), Func(Of T, T2), Func(Of T, T2))
- uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  id: WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
    startLine: 63
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Updates the values of the boundaries of the range.
  example: []
  syntax:
    content: public static Range<T2, TKey> WithValues<T, T2, TKey>(this Range<T, TKey> range, Func<T, T2> newValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: newValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the boundaries. Used if boundary has a value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: T2
      description: The type of new range values.
    - id: TKey
      description: The type of the key.
    return:
      type: CodeJam.Ranges.Range{{T2},{TKey}}
      description: A range with new values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, T2, TKey)(range As Range(Of T, TKey), newValueSelector As Func(Of T, T2)) As Range(Of T2, TKey)
  overload: CodeJam.Ranges.RangeExtensions.WithValues*
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2))
- uid: CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  id: WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>, Func<T, T2>)
  nameWithType: RangeExtensions.WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>, Func<T, T2>)
  fullName: CodeJam.Ranges.RangeExtensions.WithValues<T, T2, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T2>, System.Func<T, T2>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithValues
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
    startLine: 80
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Updates the values of the boundaries of the range.
  example: []
  syntax:
    content: public static Range<T2, TKey> WithValues<T, T2, TKey>(this Range<T, TKey> range, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the From boundary. Used if boundary has a value.
    - id: toValueSelector
      type: System.Func{{T},{T2}}
      description: Callback to obtain a new value for the To boundary. Used if boundary has a value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: T2
      description: The type of new range values.
    - id: TKey
      description: The type of the key.
    return:
      type: CodeJam.Ranges.Range{{T2},{TKey}}
      description: A range with new values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithValues(Of T, T2, TKey)(range As Range(Of T, TKey), fromValueSelector As Func(Of T, T2), toValueSelector As Func(Of T, T2)) As Range(Of T2, TKey)
  overload: CodeJam.Ranges.RangeExtensions.WithValues*
  nameWithType.vb: RangeExtensions.WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2), Func(Of T, T2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithValues(Of T, T2, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T2), System.Func(Of T, T2))
  name.vb: WithValues(Of T, T2, TKey)(Range(Of T, TKey), Func(Of T, T2), Func(Of T, T2))
- uid: CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  id: WithoutKey``2(CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: WithoutKey<T, TKey>(Range<T, TKey>)
  nameWithType: RangeExtensions.WithoutKey<T, TKey>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.WithoutKey<T, TKey>(CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithoutKey
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.cs
    startLine: 96
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a range without a range key.
  example: []
  syntax:
    content: public static Range<T> WithoutKey<T, TKey>(this Range<T, TKey> range)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The range to remove key from.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the key.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: A new range without a key.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithoutKey(Of T, TKey)(range As Range(Of T, TKey)) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.WithoutKey*
  nameWithType.vb: RangeExtensions.WithoutKey(Of T, TKey)(Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithoutKey(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: WithoutKey(Of T, TKey)(Range(Of T, TKey))
- uid: CodeJam.Ranges.RangeExtensions.MakeInclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeInclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeInclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: MakeInclusive<T>(Range<T>, Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeInclusive<T>(Range<T>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive<T>(CodeJam.Ranges.Range<T>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeInclusive
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 23
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces exclusive boundaries with inclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static Range<T> MakeInclusive<T>(this Range<T> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: A range with inclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeInclusive(Of T)(range As Range(Of T), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.MakeInclusive*
  nameWithType.vb: RangeExtensions.MakeInclusive(Of T)(Range(Of T), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeInclusive(Of T)(CodeJam.Ranges.Range(Of T), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T)(Range(Of T), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.RangeExtensions.MakeExclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeExclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeExclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: MakeExclusive<T>(Range<T>, Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeExclusive<T>(Range<T>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive<T>(CodeJam.Ranges.Range<T>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeExclusive
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 56
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces inclusive boundaries with exclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static Range<T> MakeExclusive<T>(this Range<T> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: A range with exclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeExclusive(Of T)(range As Range(Of T), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.MakeExclusive*
  nameWithType.vb: RangeExtensions.MakeExclusive(Of T)(Range(Of T), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeExclusive(Of T)(CodeJam.Ranges.Range(Of T), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T)(Range(Of T), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.RangeExtensions.WithKey``2(CodeJam.Ranges.Range{``0},``1)
  commentId: M:CodeJam.Ranges.RangeExtensions.WithKey``2(CodeJam.Ranges.Range{``0},``1)
  id: WithKey``2(CodeJam.Ranges.Range{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: WithKey<T, TKey2>(Range<T>, TKey2)
  nameWithType: RangeExtensions.WithKey<T, TKey2>(Range<T>, TKey2)
  fullName: CodeJam.Ranges.RangeExtensions.WithKey<T, TKey2>(CodeJam.Ranges.Range<T>, TKey2)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithKey
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 87
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new range with the key specified.
  example: []
  syntax:
    content: public static Range<T, TKey2> WithKey<T, TKey2>(this Range<T> range, TKey2 key)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: key
      type: '{TKey2}'
      description: The value of the new key.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey2
      description: The type of the new key.
    return:
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: A new range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithKey(Of T, TKey2)(range As Range(Of T), key As TKey2) As Range(Of T, TKey2)
  overload: CodeJam.Ranges.RangeExtensions.WithKey*
  nameWithType.vb: RangeExtensions.WithKey(Of T, TKey2)(Range(Of T), TKey2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithKey(Of T, TKey2)(CodeJam.Ranges.Range(Of T), TKey2)
  name.vb: WithKey(Of T, TKey2)(Range(Of T), TKey2)
- uid: CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0)
  id: Contains``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(Range<T>, T)
  nameWithType: RangeExtensions.Contains<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 98
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains the specified value.
  example: []
  syntax:
    content: public static bool Contains<T>(this Range<T> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(range As Range(Of T), value As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: Contains(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(Range<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.Contains<T>(Range<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 109
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T>(this Range<T> range, RangeBoundaryFrom<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(range As Range(Of T), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(Range<T>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.Contains<T>(Range<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 124
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T>(this Range<T> range, RangeBoundaryTo<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(range As Range(Of T), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T)(Range(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T)(Range(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0,``0)
  id: Contains``1(CodeJam.Ranges.Range{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T>(Range<T>, T, T)
  nameWithType: RangeExtensions.Contains<T>(Range<T>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T>(CodeJam.Ranges.Range<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 140
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T>(this Range<T> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T)(range As Range(Of T), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T)(Range(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T)(CodeJam.Ranges.Range(Of T), T, T)
  name.vb: Contains(Of T)(Range(Of T), T, T)
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  id: Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 152
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains another range.
  example: []
  syntax:
    content: 'public static bool Contains<T, TRange>(this TRange range, Range<T> other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: '{TRange}'
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TRange
      description: The type of the range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TRange As IRange(Of T))(range As TRange, other As Range(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
- uid: CodeJam.Ranges.RangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{``0},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{``0},``0,``0)
  id: HasIntersection``1(CodeJam.Ranges.Range{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T>(Range<T>, T, T)
  nameWithType: RangeExtensions.HasIntersection<T>(Range<T>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T>(CodeJam.Ranges.Range<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 169
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T>(this Range<T> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T)(range As Range(Of T), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.HasIntersection*
  nameWithType.vb: RangeExtensions.HasIntersection(Of T)(Range(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T)(CodeJam.Ranges.Range(Of T), T, T)
  name.vb: HasIntersection(Of T)(Range(Of T), T, T)
- uid: CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0},``1)
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0},``1)
  id: HasIntersection``2(CodeJam.Ranges.Range{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TRange>(Range<T>, TRange)
  nameWithType: RangeExtensions.HasIntersection<T, TRange>(Range<T>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TRange>(CodeJam.Ranges.Range<T>, TRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 179
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range has intersection with another range.
  example: []
  syntax:
    content: 'public static bool HasIntersection<T, TRange>(this Range<T> range, TRange other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: '{TRange}'
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TRange
      description: The type of another range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TRange As IRange(Of T))(range As Range(Of T), other As TRange) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.HasIntersection*
  nameWithType.vb: RangeExtensions.HasIntersection(Of T, TRange)(Range(Of T), TRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TRange)(CodeJam.Ranges.Range(Of T), TRange)
  name.vb: HasIntersection(Of T, TRange)(Range(Of T), TRange)
- uid: CodeJam.Ranges.RangeExtensions.Clamp``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Clamp``1(CodeJam.Ranges.Range{``0},``0)
  id: Clamp``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Clamp<T>(Range<T>, T)
  nameWithType: RangeExtensions.Clamp<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.Clamp<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Clamp
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 198
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Ensures that the value fits into a range.
  example: []
  syntax:
    content: public static T Clamp<T>(this Range<T> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The range the value will be fitted to.
    - id: value
      type: '{T}'
      description: The value to be adjusted.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: '{T}'
      description: A new value that fits into a range specified
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(Of T)(range As Range(Of T), value As T) As T
  overload: CodeJam.Ranges.RangeExtensions.Clamp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The range is empty or any of its boundaries is exclusive.
  nameWithType.vb: RangeExtensions.Clamp(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Clamp(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: Clamp(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},``0)
  id: StartsAfter``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T>(Range<T>, T)
  nameWithType: RangeExtensions.StartsAfter<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 232
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the value specified.
  example: []
  syntax:
    content: public static bool StartsAfter<T>(this Range<T> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T)(range As Range(Of T), value As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: StartsAfter(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T>(Range<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.StartsAfter<T>(Range<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 241
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the boundary specified.
  example: []
  syntax:
    content: public static bool StartsAfter<T>(this Range<T> range, RangeBoundaryFrom<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T)(range As Range(Of T), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: StartsAfter(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T>(Range<T>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.StartsAfter<T>(Range<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 250
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the boundary specified.
  example: []
  syntax:
    content: public static bool StartsAfter<T>(this Range<T> range, RangeBoundaryTo<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T)(range As Range(Of T), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T)(Range(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: StartsAfter(Of T)(Range(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  id: StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 262
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the range specified.
  example: []
  syntax:
    content: 'public static bool StartsAfter<T, TRange>(this TRange range, Range<T> other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: '{TRange}'
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TRange
      description: The type of the range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T, TRange As IRange(Of T))(range As TRange, other As Range(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},``0)
  id: EndsBefore``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T>(Range<T>, T)
  nameWithType: RangeExtensions.EndsBefore<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 272
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the value specified.
  example: []
  syntax:
    content: public static bool EndsBefore<T>(this Range<T> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T)(range As Range(Of T), value As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: EndsBefore(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T>(Range<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.EndsBefore<T>(Range<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 281
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the boundary specified.
  example: []
  syntax:
    content: public static bool EndsBefore<T>(this Range<T> range, RangeBoundaryFrom<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T)(range As Range(Of T), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: EndsBefore(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T>(Range<T>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.EndsBefore<T>(Range<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 290
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the boundary specified.
  example: []
  syntax:
    content: public static bool EndsBefore<T>(this Range<T> range, RangeBoundaryTo<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T)(range As Range(Of T), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T)(Range(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: EndsBefore(Of T)(Range(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  id: EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 302
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the range specified.
  example: []
  syntax:
    content: 'public static bool EndsBefore<T, TRange>(this TRange range, Range<T> other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: '{TRange}'
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TRange
      description: The type of the range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T, TRange As IRange(Of T))(range As TRange, other As Range(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
- uid: CodeJam.Ranges.RangeExtensions.Union``1(CodeJam.Ranges.Range{``0},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``1(CodeJam.Ranges.Range{``0},``0,``0)
  id: Union``1(CodeJam.Ranges.Range{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T>(Range<T>, T, T)
  nameWithType: RangeExtensions.Union<T>(Range<T>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T>(CodeJam.Ranges.Range<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 315
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing both of the ranges.
  example: []
  syntax:
    content: public static Range<T> Union<T>(this Range<T> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: A union range containing both of the ranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T)(range As Range(Of T), from As T, to As T) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.Union*
  nameWithType.vb: RangeExtensions.Union(Of T)(Range(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T)(CodeJam.Ranges.Range(Of T), T, T)
  name.vb: Union(Of T)(Range(Of T), T, T)
- uid: CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0},``1)
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0},``1)
  id: Union``2(CodeJam.Ranges.Range{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T, TRange>(Range<T>, TRange)
  nameWithType: RangeExtensions.Union<T, TRange>(Range<T>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T, TRange>(CodeJam.Ranges.Range<T>, TRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 325
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing both of the ranges.
  example: []
  syntax:
    content: 'public static Range<T> Union<T, TRange>(this Range<T> range, TRange other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: '{TRange}'
      description: The range to union with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: A union range containing both of the ranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T, TRange As IRange(Of T))(range As Range(Of T), other As TRange) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.Union*
  nameWithType.vb: RangeExtensions.Union(Of T, TRange)(Range(Of T), TRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T, TRange)(CodeJam.Ranges.Range(Of T), TRange)
  name.vb: Union(Of T, TRange)(Range(Of T), TRange)
- uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},``0)
  id: ExtendFrom``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T>(Range<T>, T)
  nameWithType: RangeExtensions.ExtendFrom<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 347
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static Range<T> ExtendFrom<T>(this Range<T> range, T from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T)(range As Range(Of T), from As T) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.ExtendFrom*
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: ExtendFrom(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: ExtendFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T>(Range<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.ExtendFrom<T>(Range<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 358
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static Range<T> ExtendFrom<T>(this Range<T> range, RangeBoundaryFrom<T> from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T)(range As Range(Of T), from As RangeBoundaryFrom(Of T)) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.ExtendFrom*
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},``0)
  id: ExtendTo``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T>(Range<T>, T)
  nameWithType: RangeExtensions.ExtendTo<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 376
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static Range<T> ExtendTo<T>(this Range<T> range, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T)(range As Range(Of T), to As T) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.ExtendTo*
  nameWithType.vb: RangeExtensions.ExtendTo(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: ExtendTo(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: ExtendTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T>(Range<T>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.ExtendTo<T>(Range<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 387
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static Range<T> ExtendTo<T>(this Range<T> range, RangeBoundaryTo<T> to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T)(range As Range(Of T), to As RangeBoundaryTo(Of T)) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.ExtendTo*
  nameWithType.vb: RangeExtensions.ExtendTo(Of T)(Range(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T)(Range(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.Intersect``1(CodeJam.Ranges.Range{``0},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``1(CodeJam.Ranges.Range{``0},``0,``0)
  id: Intersect``1(CodeJam.Ranges.Range{``0},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T>(Range<T>, T, T)
  nameWithType: RangeExtensions.Intersect<T>(Range<T>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T>(CodeJam.Ranges.Range<T>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 406
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static Range<T> Intersect<T>(this Range<T> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T)(range As Range(Of T), from As T, to As T) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.Intersect*
  nameWithType.vb: RangeExtensions.Intersect(Of T)(Range(Of T), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T)(CodeJam.Ranges.Range(Of T), T, T)
  name.vb: Intersect(Of T)(Range(Of T), T, T)
- uid: CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0},``1)
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0},``1)
  id: Intersect``2(CodeJam.Ranges.Range{``0},``1)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TRange>(Range<T>, TRange)
  nameWithType: RangeExtensions.Intersect<T, TRange>(Range<T>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TRange>(CodeJam.Ranges.Range<T>, TRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 416
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: 'public static Range<T> Intersect<T, TRange>(this Range<T> range, TRange other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: other
      type: '{TRange}'
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TRange As IRange(Of T))(range As Range(Of T), other As TRange) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.Intersect*
  nameWithType.vb: RangeExtensions.Intersect(Of T, TRange)(Range(Of T), TRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TRange)(CodeJam.Ranges.Range(Of T), TRange)
  name.vb: Intersect(Of T, TRange)(Range(Of T), TRange)
- uid: CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},``0)
  id: TrimFrom``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T>(Range<T>, T)
  nameWithType: RangeExtensions.TrimFrom<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 432
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static Range<T> TrimFrom<T>(this Range<T> range, T from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new From boundary\nor the source fange if the new boundary is less than original\nor an empty range if the new From boundary is greater than To boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T)(range As Range(Of T), from As T) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.TrimFrom*
  nameWithType.vb: RangeExtensions.TrimFrom(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: TrimFrom(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: TrimFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T>(Range<T>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.TrimFrom<T>(Range<T>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 445
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static Range<T> TrimFrom<T>(this Range<T> range, RangeBoundaryFrom<T> from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new From boundary\nor the source fange if the new boundary is less than original\nor an empty range if the new From boundary is greater than To boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T)(range As Range(Of T), from As RangeBoundaryFrom(Of T)) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.TrimFrom*
  nameWithType.vb: RangeExtensions.TrimFrom(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T)(Range(Of T), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},``0)
  id: TrimTo``1(CodeJam.Ranges.Range{``0},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T>(Range<T>, T)
  nameWithType: RangeExtensions.TrimTo<T>(Range<T>, T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T>(CodeJam.Ranges.Range<T>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 460
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static Range<T> TrimTo<T>(this Range<T> range, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new To boundary\nor the source fange if the new boundary is greater than original\nor an empty range if the new To boundary is less than From boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T)(range As Range(Of T), to As T) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.TrimTo*
  nameWithType.vb: RangeExtensions.TrimTo(Of T)(Range(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T)(CodeJam.Ranges.Range(Of T), T)
  name.vb: TrimTo(Of T)(Range(Of T), T)
- uid: CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: TrimTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T>(Range<T>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.TrimTo<T>(Range<T>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T>(CodeJam.Ranges.Range<T>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.NoKey.cs
    startLine: 473
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static Range<T> TrimTo<T>(this Range<T> range, RangeBoundaryTo<T> to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: "\nA range with a new To boundary\nor the source fange if the new boundary is greater than original\nor an empty range if the new To boundary is less than From boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T)(range As Range(Of T), to As RangeBoundaryTo(Of T)) As Range(Of T)
  overload: CodeJam.Ranges.RangeExtensions.TrimTo*
  nameWithType.vb: RangeExtensions.TrimTo(Of T)(Range(Of T), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T)(CodeJam.Ranges.Range(Of T), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T)(Range(Of T), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: MakeInclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeInclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive<T, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeInclusive
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 33
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces exclusive boundaries with inclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static Range<T, TKey> MakeInclusive<T, TKey>(this Range<T, TKey> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: A range with inclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeInclusive(Of T, TKey)(range As Range(Of T, TKey), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.MakeInclusive*
  nameWithType.vb: RangeExtensions.MakeInclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeInclusive(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeInclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  id: MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: MakeExclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  nameWithType: RangeExtensions.MakeExclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>)
  fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive<T, TKey>(CodeJam.Ranges.Range<T, TKey>, System.Func<T, T>, System.Func<T, T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: MakeExclusive
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 67
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReplaces inclusive boundaries with exclusive ones with the values from the selector callbacks\n"
  example: []
  syntax:
    content: public static Range<T, TKey> MakeExclusive<T, TKey>(this Range<T, TKey> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: fromValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.
    - id: toValueSelector
      type: System.Func{{T},{T}}
      description: Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: A range with exclusive boundaries.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeExclusive(Of T, TKey)(range As Range(Of T, TKey), fromValueSelector As Func(Of T, T), toValueSelector As Func(Of T, T)) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.MakeExclusive*
  nameWithType.vb: RangeExtensions.MakeExclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.MakeExclusive(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), System.Func(Of T, T), System.Func(Of T, T))
  name.vb: MakeExclusive(Of T, TKey)(Range(Of T, TKey), Func(Of T, T), Func(Of T, T))
- uid: CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  id: WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: WithKey<T, TKey, TKey2>(Range<T, TKey>, TKey2)
  nameWithType: RangeExtensions.WithKey<T, TKey, TKey2>(Range<T, TKey>, TKey2)
  fullName: CodeJam.Ranges.RangeExtensions.WithKey<T, TKey, TKey2>(CodeJam.Ranges.Range<T, TKey>, TKey2)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: WithKey
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 99
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Creates a new range with the key specified.
  example: []
  syntax:
    content: public static Range<T, TKey2> WithKey<T, TKey, TKey2>(this Range<T, TKey> range, TKey2 key)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: key
      type: '{TKey2}'
      description: The value of the new key.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TKey2
      description: The type of the new key.
    return:
      type: CodeJam.Ranges.Range{{T},{TKey2}}
      description: A new range with the key specified.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithKey(Of T, TKey, TKey2)(range As Range(Of T, TKey), key As TKey2) As Range(Of T, TKey2)
  overload: CodeJam.Ranges.RangeExtensions.WithKey*
  nameWithType.vb: RangeExtensions.WithKey(Of T, TKey, TKey2)(Range(Of T, TKey), TKey2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.WithKey(Of T, TKey, TKey2)(CodeJam.Ranges.Range(Of T, TKey), TKey2)
  name.vb: WithKey(Of T, TKey, TKey2)(Range(Of T, TKey), TKey2)
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: Contains``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 111
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains the specified value.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this Range<T, TKey> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(range As Range(Of T, TKey), value As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 123
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(range As Range(Of T, TKey), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 139
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains the specified range boundary.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(range As Range(Of T, TKey), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  id: Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.Contains<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 156
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains another range.
  example: []
  syntax:
    content: public static bool Contains<T, TKey>(this Range<T, TKey> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey)(range As Range(Of T, TKey), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey)(Range(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: Contains(Of T, TKey)(Range(Of T, TKey), T, T)
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  id: Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Contains
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 169
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range contains another range.
  example: []
  syntax:
    content: 'public static bool Contains<T, TKey, TRange>(this TRange range, Range<T, TKey> other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: '{TRange}'
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TRange
      description: The type of the range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range contains another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of T, TKey, TRange As IRange(Of T))(range As TRange, other As Range(Of T, TKey)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.Contains*
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
- uid: CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  id: HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.HasIntersection<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 187
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range has intersection with another range.
  example: []
  syntax:
    content: public static bool HasIntersection<T, TKey>(this Range<T, TKey> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value of the range to check.
    - id: to
      type: '{T}'
      description: The boundary To value of the range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TKey)(range As Range(Of T, TKey), from As T, to As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.HasIntersection*
  nameWithType.vb: RangeExtensions.HasIntersection(Of T, TKey)(Range(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: HasIntersection(Of T, TKey)(Range(Of T, TKey), T, T)
- uid: CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  id: HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: HasIntersection<T, TKey, TRange>(Range<T, TKey>, TRange)
  nameWithType: RangeExtensions.HasIntersection<T, TKey, TRange>(Range<T, TKey>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection<T, TKey, TRange>(CodeJam.Ranges.Range<T, TKey>, TRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasIntersection
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 198
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range has intersection with another range.
  example: []
  syntax:
    content: 'public static bool HasIntersection<T, TKey, TRange>(this Range<T, TKey> range, TRange other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: '{TRange}'
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TRange
      description: The type of another range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range has intersection with another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasIntersection(Of T, TKey, TRange As IRange(Of T))(range As Range(Of T, TKey), other As TRange) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.HasIntersection*
  nameWithType.vb: RangeExtensions.HasIntersection(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.HasIntersection(Of T, TKey, TRange)(CodeJam.Ranges.Range(Of T, TKey), TRange)
  name.vb: HasIntersection(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
- uid: CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: Clamp``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Clamp<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.Clamp<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.Clamp<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Clamp
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 218
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Ensures that the value fits into a range.
  example: []
  syntax:
    content: public static T Clamp<T, TKey>(this Range<T, TKey> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The range the value will be fitted to.
    - id: value
      type: '{T}'
      description: The value to be adjusted.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: '{T}'
      description: A new value that fits into a range specified
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(Of T, TKey)(range As Range(Of T, TKey), value As T) As T
  overload: CodeJam.Ranges.RangeExtensions.Clamp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The range is empty or any of its boundaries is exclusive.
  nameWithType.vb: RangeExtensions.Clamp(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Clamp(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: Clamp(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 253
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the value specified.
  example: []
  syntax:
    content: public static bool StartsAfter<T, TKey>(this Range<T, TKey> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T, TKey)(range As Range(Of T, TKey), value As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: StartsAfter(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 263
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the boundary specified.
  example: []
  syntax:
    content: public static bool StartsAfter<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T, TKey)(range As Range(Of T, TKey), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 273
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the boundary specified.
  example: []
  syntax:
    content: public static bool StartsAfter<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T, TKey)(range As Range(Of T, TKey), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: StartsAfter(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  id: StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: StartsAfter
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 286
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range starts after the range specified.
  example: []
  syntax:
    content: 'public static bool StartsAfter<T, TKey, TRange>(this TRange range, Range<T, TKey> other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: '{TRange}'
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TRange
      description: The type of the range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range starts after another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StartsAfter(Of T, TKey, TRange As IRange(Of T))(range As TRange, other As Range(Of T, TKey)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.StartsAfter*
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 297
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the value specified.
  example: []
  syntax:
    content: public static bool EndsBefore<T, TKey>(this Range<T, TKey> range, T value)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: value
      type: '{T}'
      description: The value to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before the value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T, TKey)(range As Range(Of T, TKey), value As T) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: EndsBefore(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 307
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the boundary specified.
  example: []
  syntax:
    content: public static bool EndsBefore<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T, TKey)(range As Range(Of T, TKey), other As RangeBoundaryFrom(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 317
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the boundary specified.
  example: []
  syntax:
    content: public static bool EndsBefore<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> other)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: The boundary to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before the boundary.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T, TKey)(range As Range(Of T, TKey), other As RangeBoundaryTo(Of T)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: EndsBefore(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  id: EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EndsBefore
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 330
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Determines whether the range ends before the range specified.
  example: []
  syntax:
    content: 'public static bool EndsBefore<T, TKey, TRange>(this TRange range, Range<T, TKey> other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: '{TRange}'
      description: The source range.
    - id: other
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The range to check.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TRange
      description: The type of the range.
    return:
      type: System.Boolean
      description: <code>true</code>, if the range ends before another range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EndsBefore(Of T, TKey, TRange As IRange(Of T))(range As TRange, other As Range(Of T, TKey)) As Boolean
  overload: CodeJam.Ranges.RangeExtensions.EndsBefore*
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
- uid: CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  id: Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.Union<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 344
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing both of the ranges.
  example: []
  syntax:
    content: public static Range<T, TKey> Union<T, TKey>(this Range<T, TKey> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: A union range containing both of the ranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T, TKey)(range As Range(Of T, TKey), from As T, to As T) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.Union*
  nameWithType.vb: RangeExtensions.Union(Of T, TKey)(Range(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: Union(Of T, TKey)(Range(Of T, TKey), T, T)
- uid: CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  id: Union``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Union<T, TKey, TRange>(Range<T, TKey>, TRange)
  nameWithType: RangeExtensions.Union<T, TKey, TRange>(Range<T, TKey>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Union<T, TKey, TRange>(CodeJam.Ranges.Range<T, TKey>, TRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Union
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 355
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns a union range containing both of the ranges.
  example: []
  syntax:
    content: 'public static Range<T, TKey> Union<T, TKey, TRange>(this Range<T, TKey> range, TRange other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: '{TRange}'
      description: The range to union with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: A union range containing both of the ranges.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of T, TKey, TRange As IRange(Of T))(range As Range(Of T, TKey), other As TRange) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.Union*
  nameWithType.vb: RangeExtensions.Union(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Union(Of T, TKey, TRange)(CodeJam.Ranges.Range(Of T, TKey), TRange)
  name.vb: Union(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
- uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.ExtendFrom<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 378
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static Range<T, TKey> ExtendFrom<T, TKey>(this Range<T, TKey> range, T from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T, TKey)(range As Range(Of T, TKey), from As T) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.ExtendFrom*
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: ExtendFrom(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.ExtendFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 390
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the left.
  example: []
  syntax:
    content: public static Range<T, TKey> ExtendFrom<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new From boundary or the source fange if the new boundary is greater than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendFrom(Of T, TKey)(range As Range(Of T, TKey), from As RangeBoundaryFrom(Of T)) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.ExtendFrom*
  nameWithType.vb: RangeExtensions.ExtendFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: ExtendFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.ExtendTo<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 409
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static Range<T, TKey> ExtendTo<T, TKey>(this Range<T, TKey> range, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T, TKey)(range As Range(Of T, TKey), to As T) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.ExtendTo*
  nameWithType.vb: RangeExtensions.ExtendTo(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: ExtendTo(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: ExtendTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.ExtendTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ExtendTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 421
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Extends the range from the right.
  example: []
  syntax:
    content: public static Range<T, TKey> ExtendTo<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new To boundary or the source fange if the new boundary is less than original.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExtendTo(Of T, TKey)(range As Range(Of T, TKey), to As RangeBoundaryTo(Of T)) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.ExtendTo*
  nameWithType.vb: RangeExtensions.ExtendTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.ExtendTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: ExtendTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
- uid: CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  id: Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TKey>(Range<T, TKey>, T, T)
  nameWithType: RangeExtensions.Intersect<T, TKey>(Range<T, TKey>, T, T)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 441
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: public static Range<T, TKey> Intersect<T, TKey>(this Range<T, TKey> range, T from, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: The boundary From value.
    - id: to
      type: '{T}'
      description: The boundary To value.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TKey)(range As Range(Of T, TKey), from As T, to As T) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.Intersect*
  nameWithType.vb: RangeExtensions.Intersect(Of T, TKey)(Range(Of T, TKey), T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T, T)
  name.vb: Intersect(Of T, TKey)(Range(Of T, TKey), T, T)
- uid: CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  commentId: M:CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  id: Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: Intersect<T, TKey, TRange>(Range<T, TKey>, TRange)
  nameWithType: RangeExtensions.Intersect<T, TKey, TRange>(Range<T, TKey>, TRange)
  fullName: CodeJam.Ranges.RangeExtensions.Intersect<T, TKey, TRange>(CodeJam.Ranges.Range<T, TKey>, TRange)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Intersect
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 452
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns an intersection of the the ranges.
  example: []
  syntax:
    content: 'public static Range<T, TKey> Intersect<T, TKey, TRange>(this Range<T, TKey> range, TRange other)where TRange : IRange<T>'
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: other
      type: '{TRange}'
      description: The range to intersect with.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    - id: TRange
      description: The type of another range.
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: An intersection range or empty range if the ranges do not intersect.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of T, TKey, TRange As IRange(Of T))(range As Range(Of T, TKey), other As TRange) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.Intersect*
  nameWithType.vb: RangeExtensions.Intersect(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.Intersect(Of T, TKey, TRange)(CodeJam.Ranges.Range(Of T, TKey), TRange)
  name.vb: Intersect(Of T, TKey, TRange)(Range(Of T, TKey), TRange)
- uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.TrimFrom<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 469
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static Range<T, TKey> TrimFrom<T, TKey>(this Range<T, TKey> range, T from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: '{T}'
      description: A new value From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new From boundary\nor the source fange if the new boundary is less than original\nor an empty range if the new From boundary is greater than To boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T, TKey)(range As Range(Of T, TKey), from As T) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.TrimFrom*
  nameWithType.vb: RangeExtensions.TrimFrom(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: TrimFrom(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  id: TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  nameWithType: RangeExtensions.TrimFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryFrom<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimFrom
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 483
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the left.
  example: []
  syntax:
    content: public static Range<T, TKey> TrimFrom<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> from)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: from
      type: CodeJam.Ranges.RangeBoundaryFrom{{T}}
      description: A new boundary From.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new From boundary\nor the source fange if the new boundary is less than original\nor an empty range if the new From boundary is greater than To boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimFrom(Of T, TKey)(range As Range(Of T, TKey), from As RangeBoundaryFrom(Of T)) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.TrimFrom*
  nameWithType.vb: RangeExtensions.TrimFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimFrom(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryFrom(Of T))
  name.vb: TrimFrom(Of T, TKey)(Range(Of T, TKey), RangeBoundaryFrom(Of T))
- uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  id: TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T, TKey>(Range<T, TKey>, T)
  nameWithType: RangeExtensions.TrimTo<T, TKey>(Range<T, TKey>, T)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, T)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 499
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static Range<T, TKey> TrimTo<T, TKey>(this Range<T, TKey> range, T to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: to
      type: '{T}'
      description: A new value To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new To boundary\nor the source fange if the new boundary is greater than original\nor an empty range if the new To boundary is less than From boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T, TKey)(range As Range(Of T, TKey), to As T) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.TrimTo*
  nameWithType.vb: RangeExtensions.TrimTo(Of T, TKey)(Range(Of T, TKey), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), T)
  name.vb: TrimTo(Of T, TKey)(Range(Of T, TKey), T)
- uid: CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  id: TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})
  isExtensionMethod: true
  parent: CodeJam.Ranges.RangeExtensions
  langs:
  - csharp
  - vb
  name: TrimTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  nameWithType: RangeExtensions.TrimTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>)
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo<T, TKey>(CodeJam.Ranges.Range<T, TKey>, CodeJam.Ranges.RangeBoundaryTo<T>)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TrimTo
    path: ../Main/src/Ranges/[RangeExtensions]/RangeExtensions.WithKey.generated.cs
    startLine: 513
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Trims the range from the right.
  example: []
  syntax:
    content: public static Range<T, TKey> TrimTo<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> to)
    parameters:
    - id: range
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: The source range.
    - id: to
      type: CodeJam.Ranges.RangeBoundaryTo{{T}}
      description: A new boundary To.
    typeParameters:
    - id: T
      description: The type of the range values.
    - id: TKey
      description: The type of the range key
    return:
      type: CodeJam.Ranges.Range{{T},{TKey}}
      description: "\nA range with a new To boundary\nor the source fange if the new boundary is greater than original\nor an empty range if the new To boundary is less than From boundary of the range.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimTo(Of T, TKey)(range As Range(Of T, TKey), to As RangeBoundaryTo(Of T)) As Range(Of T, TKey)
  overload: CodeJam.Ranges.RangeExtensions.TrimTo*
  nameWithType.vb: RangeExtensions.TrimTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Ranges.RangeExtensions.TrimTo(Of T, TKey)(CodeJam.Ranges.Range(Of T, TKey), CodeJam.Ranges.RangeBoundaryTo(Of T))
  name.vb: TrimTo(Of T, TKey)(Range(Of T, TKey), RangeBoundaryTo(Of T))
references:
- uid: CodeJam.Ranges.Range`1
  commentId: T:CodeJam.Ranges.Range`1
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Ranges.RangeExtensions.WithValues*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.WithValues
  isExternal: false
  name: WithValues
  nameWithType: RangeExtensions.WithValues
  fullName: CodeJam.Ranges.RangeExtensions.WithValues
- uid: CodeJam.Ranges.Range{{T}}
  commentId: T:CodeJam.Ranges.Range{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`1
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{T2}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  name: Func<T, T2>
  nameWithType: Func<T, T2>
  fullName: System.Func<T, T2>
  nameWithType.vb: Func(Of T, T2)
  fullName.vb: System.Func(Of T, T2)
  name.vb: Func(Of T, T2)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range{{T2}}
  commentId: T:CodeJam.Ranges.Range{``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`1
  name: Range<T2>
  nameWithType: Range<T2>
  fullName: CodeJam.Ranges.Range<T2>
  nameWithType.vb: Range(Of T2)
  fullName.vb: CodeJam.Ranges.Range(Of T2)
  name.vb: Range(Of T2)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range{{T},{TKey}}
  commentId: T:CodeJam.Ranges.Range{``0,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`2
  name: Range<T, TKey>
  nameWithType: Range<T, TKey>
  fullName: CodeJam.Ranges.Range<T, TKey>
  nameWithType.vb: Range(Of T, TKey)
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey)
  name.vb: Range(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range{{T2},{TKey}}
  commentId: T:CodeJam.Ranges.Range{``1,``2}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`2
  name: Range<T2, TKey>
  nameWithType: Range<T2, TKey>
  fullName: CodeJam.Ranges.Range<T2, TKey>
  nameWithType.vb: Range(Of T2, TKey)
  fullName.vb: CodeJam.Ranges.Range(Of T2, TKey)
  name.vb: Range(Of T2, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`2
  commentId: T:CodeJam.Ranges.Range`2
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T, TKey>
  nameWithType: Range<T, TKey>
  fullName: CodeJam.Ranges.Range<T, TKey>
  nameWithType.vb: Range(Of T, TKey)
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey)
  name.vb: Range(Of T, TKey)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.WithoutKey*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.WithoutKey
  isExternal: false
  name: WithoutKey
  nameWithType: RangeExtensions.WithoutKey
  fullName: CodeJam.Ranges.RangeExtensions.WithoutKey
- uid: CodeJam.Ranges.RangeExtensions.MakeInclusive*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.MakeInclusive
  isExternal: false
  name: MakeInclusive
  nameWithType: RangeExtensions.MakeInclusive
  fullName: CodeJam.Ranges.RangeExtensions.MakeInclusive
- uid: System.Func{{T},{T}}
  commentId: T:System.Func{`0,`0}
  parent: System
  definition: System.Func`2
  name: Func<T, T>
  nameWithType: Func<T, T>
  fullName: System.Func<T, T>
  nameWithType.vb: Func(Of T, T)
  fullName.vb: System.Func(Of T, T)
  name.vb: Func(Of T, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.MakeExclusive*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.MakeExclusive
  isExternal: false
  name: MakeExclusive
  nameWithType: RangeExtensions.MakeExclusive
  fullName: CodeJam.Ranges.RangeExtensions.MakeExclusive
- uid: CodeJam.Ranges.RangeExtensions.WithKey*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.WithKey
  isExternal: false
  name: WithKey
  nameWithType: RangeExtensions.WithKey
  fullName: CodeJam.Ranges.RangeExtensions.WithKey
- uid: '{TKey2}'
  commentId: '!:TKey2'
  definition: TKey2
  name: TKey2
  nameWithType: TKey2
  fullName: TKey2
- uid: CodeJam.Ranges.Range{{T},{TKey2}}
  commentId: T:CodeJam.Ranges.Range{``0,``1}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`2
  name: Range<T, TKey2>
  nameWithType: Range<T, TKey2>
  fullName: CodeJam.Ranges.Range<T, TKey2>
  nameWithType.vb: Range(Of T, TKey2)
  fullName.vb: CodeJam.Ranges.Range(Of T, TKey2)
  name.vb: Range(Of T, TKey2)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey2
    nameWithType: TKey2
    fullName: TKey2
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey2
  isExternal: false
  name: TKey2
  nameWithType: TKey2
  fullName: TKey2
- uid: CodeJam.Ranges.RangeExtensions.Contains*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.Contains
  isExternal: false
  name: Contains
  nameWithType: RangeExtensions.Contains
  fullName: CodeJam.Ranges.RangeExtensions.Contains
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Ranges.RangeBoundaryFrom{{T}}
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryFrom`1
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  nameWithType.vb: RangeBoundaryFrom(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryFrom`1
  commentId: T:CodeJam.Ranges.RangeBoundaryFrom`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryFrom<T>
  nameWithType: RangeBoundaryFrom<T>
  fullName: CodeJam.Ranges.RangeBoundaryFrom<T>
  nameWithType.vb: RangeBoundaryFrom(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryFrom(Of T)
  name.vb: RangeBoundaryFrom(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryFrom`1
    name: RangeBoundaryFrom
    nameWithType: RangeBoundaryFrom
    fullName: CodeJam.Ranges.RangeBoundaryFrom
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryTo{{T}}
  commentId: T:CodeJam.Ranges.RangeBoundaryTo{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.RangeBoundaryTo`1
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeBoundaryTo`1
  commentId: T:CodeJam.Ranges.RangeBoundaryTo`1
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeBoundaryTo<T>
  nameWithType: RangeBoundaryTo<T>
  fullName: CodeJam.Ranges.RangeBoundaryTo<T>
  nameWithType.vb: RangeBoundaryTo(Of T)
  fullName.vb: CodeJam.Ranges.RangeBoundaryTo(Of T)
  name.vb: RangeBoundaryTo(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.RangeBoundaryTo`1
    name: RangeBoundaryTo
    nameWithType: RangeBoundaryTo
    fullName: CodeJam.Ranges.RangeBoundaryTo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRange}'
  commentId: '!:TRange'
  definition: TRange
  name: TRange
  nameWithType: TRange
  fullName: TRange
- uid: TRange
  isExternal: false
  name: TRange
  nameWithType: TRange
  fullName: TRange
- uid: CodeJam.Ranges.RangeExtensions.HasIntersection*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.HasIntersection
  isExternal: false
  name: HasIntersection
  nameWithType: RangeExtensions.HasIntersection
  fullName: CodeJam.Ranges.RangeExtensions.HasIntersection
- uid: CodeJam.Ranges.RangeExtensions.Clamp*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.Clamp
  isExternal: false
  name: Clamp
  nameWithType: RangeExtensions.Clamp
  fullName: CodeJam.Ranges.RangeExtensions.Clamp
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.StartsAfter
  isExternal: false
  name: StartsAfter
  nameWithType: RangeExtensions.StartsAfter
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.EndsBefore
  isExternal: false
  name: EndsBefore
  nameWithType: RangeExtensions.EndsBefore
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore
- uid: CodeJam.Ranges.RangeExtensions.Union*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.Union
  isExternal: false
  name: Union
  nameWithType: RangeExtensions.Union
  fullName: CodeJam.Ranges.RangeExtensions.Union
- uid: CodeJam.Ranges.RangeExtensions.ExtendFrom*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.ExtendFrom
  isExternal: false
  name: ExtendFrom
  nameWithType: RangeExtensions.ExtendFrom
  fullName: CodeJam.Ranges.RangeExtensions.ExtendFrom
- uid: CodeJam.Ranges.RangeExtensions.ExtendTo*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.ExtendTo
  isExternal: false
  name: ExtendTo
  nameWithType: RangeExtensions.ExtendTo
  fullName: CodeJam.Ranges.RangeExtensions.ExtendTo
- uid: CodeJam.Ranges.RangeExtensions.Intersect*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.Intersect
  isExternal: false
  name: Intersect
  nameWithType: RangeExtensions.Intersect
  fullName: CodeJam.Ranges.RangeExtensions.Intersect
- uid: CodeJam.Ranges.RangeExtensions.TrimFrom*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.TrimFrom
  isExternal: false
  name: TrimFrom
  nameWithType: RangeExtensions.TrimFrom
  fullName: CodeJam.Ranges.RangeExtensions.TrimFrom
- uid: CodeJam.Ranges.RangeExtensions.TrimTo*
  commentId: Overload:CodeJam.Ranges.RangeExtensions.TrimTo
  isExternal: false
  name: TrimTo
  nameWithType: RangeExtensions.TrimTo
  fullName: CodeJam.Ranges.RangeExtensions.TrimTo
