### YamlMime:ManagedReference
items:
- uid: CodeJam.Arithmetic.Operators`1
  commentId: T:CodeJam.Arithmetic.Operators`1
  id: Operators`1
  parent: CodeJam.Arithmetic
  children:
  - CodeJam.Arithmetic.Operators`1.AreEqual
  - CodeJam.Arithmetic.Operators`1.AreNotEqual
  - CodeJam.Arithmetic.Operators`1.BitwiseAnd
  - CodeJam.Arithmetic.Operators`1.BitwiseOr
  - CodeJam.Arithmetic.Operators`1.Compare
  - CodeJam.Arithmetic.Operators`1.Div
  - CodeJam.Arithmetic.Operators`1.GreaterThan
  - CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual
  - CodeJam.Arithmetic.Operators`1.HasNaN
  - CodeJam.Arithmetic.Operators`1.HasNegativeInfinity
  - CodeJam.Arithmetic.Operators`1.HasPositiveInfinity
  - CodeJam.Arithmetic.Operators`1.LeftShift
  - CodeJam.Arithmetic.Operators`1.LessThan
  - CodeJam.Arithmetic.Operators`1.LessThanOrEqual
  - CodeJam.Arithmetic.Operators`1.Minus
  - CodeJam.Arithmetic.Operators`1.Modulo
  - CodeJam.Arithmetic.Operators`1.Mul
  - CodeJam.Arithmetic.Operators`1.NaN
  - CodeJam.Arithmetic.Operators`1.NegativeInfinity
  - CodeJam.Arithmetic.Operators`1.OnesComplement
  - CodeJam.Arithmetic.Operators`1.Plus
  - CodeJam.Arithmetic.Operators`1.PositiveInfinity
  - CodeJam.Arithmetic.Operators`1.RightShift
  - CodeJam.Arithmetic.Operators`1.UnaryMinus
  - CodeJam.Arithmetic.Operators`1.Xor
  langs:
  - csharp
  - vb
  name: Operators<T>
  nameWithType: Operators<T>
  fullName: CodeJam.Arithmetic.Operators<T>
  type: Class
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Operators
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 14
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nCallbacks for common arithmetic actions.\nLook at OperatorsPerformanceTest to see why.\n"
  example: []
  syntax:
    content: public static class Operators<T>
    typeParameters:
    - id: T
      description: The type of the operands.
    content.vb: Public Module Operators(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Operators(Of T)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: CodeJam.Arithmetic.Operators(Of T)
  name.vb: Operators(Of T)
- uid: CodeJam.Arithmetic.Operators`1.UnaryMinus
  commentId: P:CodeJam.Arithmetic.Operators`1.UnaryMinus
  id: UnaryMinus
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: UnaryMinus
  nameWithType: Operators<T>.UnaryMinus
  fullName: CodeJam.Arithmetic.Operators<T>.UnaryMinus
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: UnaryMinus
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 31
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: UnaryMinus operator.
  example: []
  syntax:
    content: public static Func<T, T> UnaryMinus { get; }
    parameters: []
    return:
      type: System.Func{{T},{T}}
      description: The UnaryMinus operator.
    content.vb: Public Shared ReadOnly Property UnaryMinus As Func(Of T, T)
  overload: CodeJam.Arithmetic.Operators`1.UnaryMinus*
  nameWithType.vb: Operators(Of T).UnaryMinus
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).UnaryMinus
- uid: CodeJam.Arithmetic.Operators`1.AreEqual
  commentId: P:CodeJam.Arithmetic.Operators`1.AreEqual
  id: AreEqual
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: AreEqual
  nameWithType: Operators<T>.AreEqual
  fullName: CodeJam.Arithmetic.Operators<T>.AreEqual
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AreEqual
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 43
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: AreEqual operator.
  example: []
  syntax:
    content: public static Func<T, T, bool> AreEqual { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},System.Boolean}
      description: The AreEqual operator.
    content.vb: Public Shared ReadOnly Property AreEqual As Func(Of T, T, Boolean)
  overload: CodeJam.Arithmetic.Operators`1.AreEqual*
  nameWithType.vb: Operators(Of T).AreEqual
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).AreEqual
- uid: CodeJam.Arithmetic.Operators`1.AreNotEqual
  commentId: P:CodeJam.Arithmetic.Operators`1.AreNotEqual
  id: AreNotEqual
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: AreNotEqual
  nameWithType: Operators<T>.AreNotEqual
  fullName: CodeJam.Arithmetic.Operators<T>.AreNotEqual
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: AreNotEqual
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 52
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: AreNotEqual operator.
  example: []
  syntax:
    content: public static Func<T, T, bool> AreNotEqual { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},System.Boolean}
      description: The AreNotEqual operator.
    content.vb: Public Shared ReadOnly Property AreNotEqual As Func(Of T, T, Boolean)
  overload: CodeJam.Arithmetic.Operators`1.AreNotEqual*
  nameWithType.vb: Operators(Of T).AreNotEqual
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).AreNotEqual
- uid: CodeJam.Arithmetic.Operators`1.GreaterThan
  commentId: P:CodeJam.Arithmetic.Operators`1.GreaterThan
  id: GreaterThan
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: GreaterThan
  nameWithType: Operators<T>.GreaterThan
  fullName: CodeJam.Arithmetic.Operators<T>.GreaterThan
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GreaterThan
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 61
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: GreaterThan operator.
  example: []
  syntax:
    content: public static Func<T, T, bool> GreaterThan { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},System.Boolean}
      description: The GreaterThan operator.
    content.vb: Public Shared ReadOnly Property GreaterThan As Func(Of T, T, Boolean)
  overload: CodeJam.Arithmetic.Operators`1.GreaterThan*
  nameWithType.vb: Operators(Of T).GreaterThan
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).GreaterThan
- uid: CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual
  commentId: P:CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual
  id: GreaterThanOrEqual
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual
  nameWithType: Operators<T>.GreaterThanOrEqual
  fullName: CodeJam.Arithmetic.Operators<T>.GreaterThanOrEqual
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GreaterThanOrEqual
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 70
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: GreaterThanOrEqual operator.
  example: []
  syntax:
    content: public static Func<T, T, bool> GreaterThanOrEqual { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},System.Boolean}
      description: The GreaterThanOrEqual operator.
    content.vb: Public Shared ReadOnly Property GreaterThanOrEqual As Func(Of T, T, Boolean)
  overload: CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual*
  nameWithType.vb: Operators(Of T).GreaterThanOrEqual
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).GreaterThanOrEqual
- uid: CodeJam.Arithmetic.Operators`1.LessThan
  commentId: P:CodeJam.Arithmetic.Operators`1.LessThan
  id: LessThan
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: LessThan
  nameWithType: Operators<T>.LessThan
  fullName: CodeJam.Arithmetic.Operators<T>.LessThan
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LessThan
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 79
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: LessThan operator.
  example: []
  syntax:
    content: public static Func<T, T, bool> LessThan { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},System.Boolean}
      description: The LessThan operator.
    content.vb: Public Shared ReadOnly Property LessThan As Func(Of T, T, Boolean)
  overload: CodeJam.Arithmetic.Operators`1.LessThan*
  nameWithType.vb: Operators(Of T).LessThan
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).LessThan
- uid: CodeJam.Arithmetic.Operators`1.LessThanOrEqual
  commentId: P:CodeJam.Arithmetic.Operators`1.LessThanOrEqual
  id: LessThanOrEqual
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual
  nameWithType: Operators<T>.LessThanOrEqual
  fullName: CodeJam.Arithmetic.Operators<T>.LessThanOrEqual
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LessThanOrEqual
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 88
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: LessThanOrEqual operator.
  example: []
  syntax:
    content: public static Func<T, T, bool> LessThanOrEqual { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},System.Boolean}
      description: The LessThanOrEqual operator.
    content.vb: Public Shared ReadOnly Property LessThanOrEqual As Func(Of T, T, Boolean)
  overload: CodeJam.Arithmetic.Operators`1.LessThanOrEqual*
  nameWithType.vb: Operators(Of T).LessThanOrEqual
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).LessThanOrEqual
- uid: CodeJam.Arithmetic.Operators`1.Plus
  commentId: P:CodeJam.Arithmetic.Operators`1.Plus
  id: Plus
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: Plus
  nameWithType: Operators<T>.Plus
  fullName: CodeJam.Arithmetic.Operators<T>.Plus
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Plus
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 99
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: Plus operator.
  example: []
  syntax:
    content: public static Func<T, T, T> Plus { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The Plus operator.
    content.vb: Public Shared ReadOnly Property Plus As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.Plus*
  nameWithType.vb: Operators(Of T).Plus
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Plus
- uid: CodeJam.Arithmetic.Operators`1.Minus
  commentId: P:CodeJam.Arithmetic.Operators`1.Minus
  id: Minus
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: Minus
  nameWithType: Operators<T>.Minus
  fullName: CodeJam.Arithmetic.Operators<T>.Minus
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Minus
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 108
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: Minus operator.
  example: []
  syntax:
    content: public static Func<T, T, T> Minus { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The Minus operator.
    content.vb: Public Shared ReadOnly Property Minus As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.Minus*
  nameWithType.vb: Operators(Of T).Minus
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Minus
- uid: CodeJam.Arithmetic.Operators`1.Mul
  commentId: P:CodeJam.Arithmetic.Operators`1.Mul
  id: Mul
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: Mul
  nameWithType: Operators<T>.Mul
  fullName: CodeJam.Arithmetic.Operators<T>.Mul
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Mul
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 117
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: Mul operator.
  example: []
  syntax:
    content: public static Func<T, T, T> Mul { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The Mul operator.
    content.vb: Public Shared ReadOnly Property Mul As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.Mul*
  nameWithType.vb: Operators(Of T).Mul
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Mul
- uid: CodeJam.Arithmetic.Operators`1.Div
  commentId: P:CodeJam.Arithmetic.Operators`1.Div
  id: Div
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: Div
  nameWithType: Operators<T>.Div
  fullName: CodeJam.Arithmetic.Operators<T>.Div
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Div
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 126
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: Div operator.
  example: []
  syntax:
    content: public static Func<T, T, T> Div { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The Div operator.
    content.vb: Public Shared ReadOnly Property Div As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.Div*
  nameWithType.vb: Operators(Of T).Div
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Div
- uid: CodeJam.Arithmetic.Operators`1.Modulo
  commentId: P:CodeJam.Arithmetic.Operators`1.Modulo
  id: Modulo
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: Modulo
  nameWithType: Operators<T>.Modulo
  fullName: CodeJam.Arithmetic.Operators<T>.Modulo
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Modulo
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 135
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: Modulo operator.
  example: []
  syntax:
    content: public static Func<T, T, T> Modulo { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The Modulo operator.
    content.vb: Public Shared ReadOnly Property Modulo As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.Modulo*
  nameWithType.vb: Operators(Of T).Modulo
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Modulo
- uid: CodeJam.Arithmetic.Operators`1.Xor
  commentId: P:CodeJam.Arithmetic.Operators`1.Xor
  id: Xor
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: Xor
  nameWithType: Operators<T>.Xor
  fullName: CodeJam.Arithmetic.Operators<T>.Xor
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Xor
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 144
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: Xor operator.
  example: []
  syntax:
    content: public static Func<T, T, T> Xor { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The Xor operator.
    content.vb: Public Shared ReadOnly Property Xor As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.Xor*
  nameWithType.vb: Operators(Of T).Xor
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Xor
- uid: CodeJam.Arithmetic.Operators`1.BitwiseAnd
  commentId: P:CodeJam.Arithmetic.Operators`1.BitwiseAnd
  id: BitwiseAnd
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: BitwiseAnd
  nameWithType: Operators<T>.BitwiseAnd
  fullName: CodeJam.Arithmetic.Operators<T>.BitwiseAnd
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BitwiseAnd
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 153
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: BitwiseAnd operator.
  example: []
  syntax:
    content: public static Func<T, T, T> BitwiseAnd { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The BitwiseAnd operator.
    content.vb: Public Shared ReadOnly Property BitwiseAnd As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.BitwiseAnd*
  nameWithType.vb: Operators(Of T).BitwiseAnd
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).BitwiseAnd
- uid: CodeJam.Arithmetic.Operators`1.BitwiseOr
  commentId: P:CodeJam.Arithmetic.Operators`1.BitwiseOr
  id: BitwiseOr
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: BitwiseOr
  nameWithType: Operators<T>.BitwiseOr
  fullName: CodeJam.Arithmetic.Operators<T>.BitwiseOr
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: BitwiseOr
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 162
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: BitwiseOr operator.
  example: []
  syntax:
    content: public static Func<T, T, T> BitwiseOr { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The BitwiseOr operator.
    content.vb: Public Shared ReadOnly Property BitwiseOr As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.BitwiseOr*
  nameWithType.vb: Operators(Of T).BitwiseOr
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).BitwiseOr
- uid: CodeJam.Arithmetic.Operators`1.LeftShift
  commentId: P:CodeJam.Arithmetic.Operators`1.LeftShift
  id: LeftShift
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: LeftShift
  nameWithType: Operators<T>.LeftShift
  fullName: CodeJam.Arithmetic.Operators<T>.LeftShift
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: LeftShift
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 171
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: LeftShift operator.
  example: []
  syntax:
    content: public static Func<T, T, T> LeftShift { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The LeftShift operator.
    content.vb: Public Shared ReadOnly Property LeftShift As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.LeftShift*
  nameWithType.vb: Operators(Of T).LeftShift
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).LeftShift
- uid: CodeJam.Arithmetic.Operators`1.RightShift
  commentId: P:CodeJam.Arithmetic.Operators`1.RightShift
  id: RightShift
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: RightShift
  nameWithType: Operators<T>.RightShift
  fullName: CodeJam.Arithmetic.Operators<T>.RightShift
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.generated.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RightShift
    path: ../Main/src/Arithmetic/Operators.generated.cs
    startLine: 180
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: RightShift operator.
  example: []
  syntax:
    content: public static Func<T, T, T> RightShift { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},{T}}
      description: The RightShift operator.
    content.vb: Public Shared ReadOnly Property RightShift As Func(Of T, T, T)
  overload: CodeJam.Arithmetic.Operators`1.RightShift*
  nameWithType.vb: Operators(Of T).RightShift
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).RightShift
- uid: CodeJam.Arithmetic.Operators`1.Compare
  commentId: P:CodeJam.Arithmetic.Operators`1.Compare
  id: Compare
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: Compare
  nameWithType: Operators<T>.Compare
  fullName: CodeJam.Arithmetic.Operators<T>.Compare
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Compare
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 24
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nComparison callback\n"
  example: []
  syntax:
    content: public static Func<T, T, int> Compare { get; }
    parameters: []
    return:
      type: System.Func{{T},{T},System.Int32}
    content.vb: Public Shared ReadOnly Property Compare As Func(Of T, T, Integer)
  overload: CodeJam.Arithmetic.Operators`1.Compare*
  nameWithType.vb: Operators(Of T).Compare
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Compare
- uid: CodeJam.Arithmetic.Operators`1.HasNaN
  commentId: P:CodeJam.Arithmetic.Operators`1.HasNaN
  id: HasNaN
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: HasNaN
  nameWithType: Operators<T>.HasNaN
  fullName: CodeJam.Arithmetic.Operators<T>.HasNaN
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasNaN
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 34
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nCheck for the NaN value.\n"
  example: []
  syntax:
    content: public static bool HasNaN { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property HasNaN As Boolean
  overload: CodeJam.Arithmetic.Operators`1.HasNaN*
  nameWithType.vb: Operators(Of T).HasNaN
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).HasNaN
- uid: CodeJam.Arithmetic.Operators`1.NaN
  commentId: P:CodeJam.Arithmetic.Operators`1.NaN
  id: NaN
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: NaN
  nameWithType: Operators<T>.NaN
  fullName: CodeJam.Arithmetic.Operators<T>.NaN
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NaN
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 42
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nNaN value\n"
  example: []
  syntax:
    content: public static T NaN { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Shared ReadOnly Property NaN As T
  overload: CodeJam.Arithmetic.Operators`1.NaN*
  nameWithType.vb: Operators(Of T).NaN
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).NaN
- uid: CodeJam.Arithmetic.Operators`1.HasNegativeInfinity
  commentId: P:CodeJam.Arithmetic.Operators`1.HasNegativeInfinity
  id: HasNegativeInfinity
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: HasNegativeInfinity
  nameWithType: Operators<T>.HasNegativeInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.HasNegativeInfinity
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasNegativeInfinity
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 51
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nCheck for the negative infinity value.\n"
  example: []
  syntax:
    content: public static bool HasNegativeInfinity { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property HasNegativeInfinity As Boolean
  overload: CodeJam.Arithmetic.Operators`1.HasNegativeInfinity*
  nameWithType.vb: Operators(Of T).HasNegativeInfinity
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).HasNegativeInfinity
- uid: CodeJam.Arithmetic.Operators`1.NegativeInfinity
  commentId: P:CodeJam.Arithmetic.Operators`1.NegativeInfinity
  id: NegativeInfinity
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: NegativeInfinity
  nameWithType: Operators<T>.NegativeInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.NegativeInfinity
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: NegativeInfinity
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 59
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nNegative infinity value\n"
  example: []
  syntax:
    content: public static T NegativeInfinity { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Shared ReadOnly Property NegativeInfinity As T
  overload: CodeJam.Arithmetic.Operators`1.NegativeInfinity*
  nameWithType.vb: Operators(Of T).NegativeInfinity
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).NegativeInfinity
- uid: CodeJam.Arithmetic.Operators`1.HasPositiveInfinity
  commentId: P:CodeJam.Arithmetic.Operators`1.HasPositiveInfinity
  id: HasPositiveInfinity
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: HasPositiveInfinity
  nameWithType: Operators<T>.HasPositiveInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.HasPositiveInfinity
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: HasPositiveInfinity
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 68
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nCheck for the positive infinity value.\n"
  example: []
  syntax:
    content: public static bool HasPositiveInfinity { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property HasPositiveInfinity As Boolean
  overload: CodeJam.Arithmetic.Operators`1.HasPositiveInfinity*
  nameWithType.vb: Operators(Of T).HasPositiveInfinity
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).HasPositiveInfinity
- uid: CodeJam.Arithmetic.Operators`1.PositiveInfinity
  commentId: P:CodeJam.Arithmetic.Operators`1.PositiveInfinity
  id: PositiveInfinity
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: PositiveInfinity
  nameWithType: Operators<T>.PositiveInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.PositiveInfinity
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: PositiveInfinity
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 76
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: "\nPositive infinity value\n"
  example: []
  syntax:
    content: public static T PositiveInfinity { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Shared ReadOnly Property PositiveInfinity As T
  overload: CodeJam.Arithmetic.Operators`1.PositiveInfinity*
  nameWithType.vb: Operators(Of T).PositiveInfinity
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).PositiveInfinity
- uid: CodeJam.Arithmetic.Operators`1.OnesComplement
  commentId: P:CodeJam.Arithmetic.Operators`1.OnesComplement
  id: OnesComplement
  parent: CodeJam.Arithmetic.Operators`1
  langs:
  - csharp
  - vb
  name: OnesComplement
  nameWithType: Operators<T>.OnesComplement
  fullName: CodeJam.Arithmetic.Operators<T>.OnesComplement
  type: Property
  source:
    remote:
      path: Main/src/Arithmetic/Operators.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: OnesComplement
    path: ../Main/src/Arithmetic/Operators.cs
    startLine: 91
  assemblies:
  - CodeJam
  namespace: CodeJam.Arithmetic
  summary: OnesComplement operator.
  example: []
  syntax:
    content: public static Func<T, T> OnesComplement { get; }
    parameters: []
    return:
      type: System.Func{{T},{T}}
      description: The OnesComplement operator.
    content.vb: Public Shared ReadOnly Property OnesComplement As Func(Of T, T)
  overload: CodeJam.Arithmetic.Operators`1.OnesComplement*
  nameWithType.vb: Operators(Of T).OnesComplement
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).OnesComplement
references:
- uid: CodeJam.Arithmetic
  commentId: N:CodeJam.Arithmetic
  isExternal: false
  name: CodeJam.Arithmetic
  nameWithType: CodeJam.Arithmetic
  fullName: CodeJam.Arithmetic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Arithmetic.Operators`1.UnaryMinus*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.UnaryMinus
  isExternal: false
  name: UnaryMinus
  nameWithType: Operators<T>.UnaryMinus
  fullName: CodeJam.Arithmetic.Operators<T>.UnaryMinus
  nameWithType.vb: Operators(Of T).UnaryMinus
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).UnaryMinus
- uid: System.Func{{T},{T}}
  commentId: T:System.Func{`0,`0}
  parent: System
  definition: System.Func`2
  name: Func<T, T>
  nameWithType: Func<T, T>
  fullName: System.Func<T, T>
  nameWithType.vb: Func(Of T, T)
  fullName.vb: System.Func(Of T, T)
  name.vb: Func(Of T, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Arithmetic.Operators`1.AreEqual*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.AreEqual
  isExternal: false
  name: AreEqual
  nameWithType: Operators<T>.AreEqual
  fullName: CodeJam.Arithmetic.Operators<T>.AreEqual
  nameWithType.vb: Operators(Of T).AreEqual
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).AreEqual
- uid: System.Func{{T},{T},System.Boolean}
  commentId: T:System.Func{`0,`0,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<T, T, Boolean>
  nameWithType: Func<T, T, Boolean>
  fullName: System.Func<T, T, System.Boolean>
  nameWithType.vb: Func(Of T, T, Boolean)
  fullName.vb: System.Func(Of T, T, System.Boolean)
  name.vb: Func(Of T, T, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Arithmetic.Operators`1.AreNotEqual*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.AreNotEqual
  isExternal: false
  name: AreNotEqual
  nameWithType: Operators<T>.AreNotEqual
  fullName: CodeJam.Arithmetic.Operators<T>.AreNotEqual
  nameWithType.vb: Operators(Of T).AreNotEqual
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).AreNotEqual
- uid: CodeJam.Arithmetic.Operators`1.GreaterThan*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.GreaterThan
  isExternal: false
  name: GreaterThan
  nameWithType: Operators<T>.GreaterThan
  fullName: CodeJam.Arithmetic.Operators<T>.GreaterThan
  nameWithType.vb: Operators(Of T).GreaterThan
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).GreaterThan
- uid: CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: Operators<T>.GreaterThanOrEqual
  fullName: CodeJam.Arithmetic.Operators<T>.GreaterThanOrEqual
  nameWithType.vb: Operators(Of T).GreaterThanOrEqual
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).GreaterThanOrEqual
- uid: CodeJam.Arithmetic.Operators`1.LessThan*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.LessThan
  isExternal: false
  name: LessThan
  nameWithType: Operators<T>.LessThan
  fullName: CodeJam.Arithmetic.Operators<T>.LessThan
  nameWithType.vb: Operators(Of T).LessThan
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).LessThan
- uid: CodeJam.Arithmetic.Operators`1.LessThanOrEqual*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.LessThanOrEqual
  isExternal: false
  name: LessThanOrEqual
  nameWithType: Operators<T>.LessThanOrEqual
  fullName: CodeJam.Arithmetic.Operators<T>.LessThanOrEqual
  nameWithType.vb: Operators(Of T).LessThanOrEqual
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).LessThanOrEqual
- uid: CodeJam.Arithmetic.Operators`1.Plus*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.Plus
  isExternal: false
  name: Plus
  nameWithType: Operators<T>.Plus
  fullName: CodeJam.Arithmetic.Operators<T>.Plus
  nameWithType.vb: Operators(Of T).Plus
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Plus
- uid: System.Func{{T},{T},{T}}
  commentId: T:System.Func{`0,`0,`0}
  parent: System
  definition: System.Func`3
  name: Func<T, T, T>
  nameWithType: Func<T, T, T>
  fullName: System.Func<T, T, T>
  nameWithType.vb: Func(Of T, T, T)
  fullName.vb: System.Func(Of T, T, T)
  name.vb: Func(Of T, T, T)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Arithmetic.Operators`1.Minus*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.Minus
  isExternal: false
  name: Minus
  nameWithType: Operators<T>.Minus
  fullName: CodeJam.Arithmetic.Operators<T>.Minus
  nameWithType.vb: Operators(Of T).Minus
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Minus
- uid: CodeJam.Arithmetic.Operators`1.Mul*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.Mul
  isExternal: false
  name: Mul
  nameWithType: Operators<T>.Mul
  fullName: CodeJam.Arithmetic.Operators<T>.Mul
  nameWithType.vb: Operators(Of T).Mul
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Mul
- uid: CodeJam.Arithmetic.Operators`1.Div*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.Div
  isExternal: false
  name: Div
  nameWithType: Operators<T>.Div
  fullName: CodeJam.Arithmetic.Operators<T>.Div
  nameWithType.vb: Operators(Of T).Div
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Div
- uid: CodeJam.Arithmetic.Operators`1.Modulo*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.Modulo
  isExternal: false
  name: Modulo
  nameWithType: Operators<T>.Modulo
  fullName: CodeJam.Arithmetic.Operators<T>.Modulo
  nameWithType.vb: Operators(Of T).Modulo
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Modulo
- uid: CodeJam.Arithmetic.Operators`1.Xor*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.Xor
  isExternal: false
  name: Xor
  nameWithType: Operators<T>.Xor
  fullName: CodeJam.Arithmetic.Operators<T>.Xor
  nameWithType.vb: Operators(Of T).Xor
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Xor
- uid: CodeJam.Arithmetic.Operators`1.BitwiseAnd*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.BitwiseAnd
  isExternal: false
  name: BitwiseAnd
  nameWithType: Operators<T>.BitwiseAnd
  fullName: CodeJam.Arithmetic.Operators<T>.BitwiseAnd
  nameWithType.vb: Operators(Of T).BitwiseAnd
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).BitwiseAnd
- uid: CodeJam.Arithmetic.Operators`1.BitwiseOr*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.BitwiseOr
  isExternal: false
  name: BitwiseOr
  nameWithType: Operators<T>.BitwiseOr
  fullName: CodeJam.Arithmetic.Operators<T>.BitwiseOr
  nameWithType.vb: Operators(Of T).BitwiseOr
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).BitwiseOr
- uid: CodeJam.Arithmetic.Operators`1.LeftShift*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.LeftShift
  isExternal: false
  name: LeftShift
  nameWithType: Operators<T>.LeftShift
  fullName: CodeJam.Arithmetic.Operators<T>.LeftShift
  nameWithType.vb: Operators(Of T).LeftShift
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).LeftShift
- uid: CodeJam.Arithmetic.Operators`1.RightShift*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.RightShift
  isExternal: false
  name: RightShift
  nameWithType: Operators<T>.RightShift
  fullName: CodeJam.Arithmetic.Operators<T>.RightShift
  nameWithType.vb: Operators(Of T).RightShift
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).RightShift
- uid: CodeJam.Arithmetic.Operators`1.Compare*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.Compare
  isExternal: false
  name: Compare
  nameWithType: Operators<T>.Compare
  fullName: CodeJam.Arithmetic.Operators<T>.Compare
  nameWithType.vb: Operators(Of T).Compare
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).Compare
- uid: System.Func{{T},{T},System.Int32}
  commentId: T:System.Func{`0,`0,System.Int32}
  parent: System
  definition: System.Func`3
  name: Func<T, T, Int32>
  nameWithType: Func<T, T, Int32>
  fullName: System.Func<T, T, System.Int32>
  nameWithType.vb: Func(Of T, T, Int32)
  fullName.vb: System.Func(Of T, T, System.Int32)
  name.vb: Func(Of T, T, Int32)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Arithmetic.Operators`1.HasNaN*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.HasNaN
  isExternal: false
  name: HasNaN
  nameWithType: Operators<T>.HasNaN
  fullName: CodeJam.Arithmetic.Operators<T>.HasNaN
  nameWithType.vb: Operators(Of T).HasNaN
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).HasNaN
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Arithmetic.Operators`1.NaN*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.NaN
  isExternal: false
  name: NaN
  nameWithType: Operators<T>.NaN
  fullName: CodeJam.Arithmetic.Operators<T>.NaN
  nameWithType.vb: Operators(Of T).NaN
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).NaN
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: CodeJam.Arithmetic.Operators`1.HasNegativeInfinity*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.HasNegativeInfinity
  isExternal: false
  name: HasNegativeInfinity
  nameWithType: Operators<T>.HasNegativeInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.HasNegativeInfinity
  nameWithType.vb: Operators(Of T).HasNegativeInfinity
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).HasNegativeInfinity
- uid: CodeJam.Arithmetic.Operators`1.NegativeInfinity*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.NegativeInfinity
  isExternal: false
  name: NegativeInfinity
  nameWithType: Operators<T>.NegativeInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.NegativeInfinity
  nameWithType.vb: Operators(Of T).NegativeInfinity
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).NegativeInfinity
- uid: CodeJam.Arithmetic.Operators`1.HasPositiveInfinity*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.HasPositiveInfinity
  isExternal: false
  name: HasPositiveInfinity
  nameWithType: Operators<T>.HasPositiveInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.HasPositiveInfinity
  nameWithType.vb: Operators(Of T).HasPositiveInfinity
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).HasPositiveInfinity
- uid: CodeJam.Arithmetic.Operators`1.PositiveInfinity*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.PositiveInfinity
  isExternal: false
  name: PositiveInfinity
  nameWithType: Operators<T>.PositiveInfinity
  fullName: CodeJam.Arithmetic.Operators<T>.PositiveInfinity
  nameWithType.vb: Operators(Of T).PositiveInfinity
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).PositiveInfinity
- uid: CodeJam.Arithmetic.Operators`1.OnesComplement*
  commentId: Overload:CodeJam.Arithmetic.Operators`1.OnesComplement
  isExternal: false
  name: OnesComplement
  nameWithType: Operators<T>.OnesComplement
  fullName: CodeJam.Arithmetic.Operators<T>.OnesComplement
  nameWithType.vb: Operators(Of T).OnesComplement
  fullName.vb: CodeJam.Arithmetic.Operators(Of T).OnesComplement
