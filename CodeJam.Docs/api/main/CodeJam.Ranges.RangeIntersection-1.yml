### YamlMime:ManagedReference
items:
- uid: CodeJam.Ranges.RangeIntersection`1
  commentId: T:CodeJam.Ranges.RangeIntersection`1
  id: RangeIntersection`1
  parent: CodeJam.Ranges
  children:
  - CodeJam.Ranges.RangeIntersection`1.IntersectionRange
  - CodeJam.Ranges.RangeIntersection`1.IsEmpty
  - CodeJam.Ranges.RangeIntersection`1.IsNotEmpty
  - CodeJam.Ranges.RangeIntersection`1.Ranges
  - CodeJam.Ranges.RangeIntersection`1.ToString
  - CodeJam.Ranges.RangeIntersection`1.ToString(System.IFormatProvider)
  - CodeJam.Ranges.RangeIntersection`1.ToString(System.String)
  - CodeJam.Ranges.RangeIntersection`1.ToString(System.String,System.IFormatProvider)
  langs:
  - csharp
  - vb
  name: RangeIntersection<T>
  nameWithType: RangeIntersection<T>
  fullName: CodeJam.Ranges.RangeIntersection<T>
  type: Struct
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: RangeIntersection
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 18
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nDescribes an intersection of multiple ranges.\n"
  example: []
  syntax:
    content: 'public struct RangeIntersection<T> : IFormattable'
    typeParameters:
    - id: T
      description: The type of the range values.
    content.vb: >-
      Public Structure RangeIntersection(Of T)
          Implements IFormattable
  seealso:
  - linkId: System.IFormattable
    commentId: T:System.IFormattable
  implements:
  - System.IFormattable
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.NullableHelper.AsNullable``1
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Strings.StringExtensions.ToInvariantString``1
  - CodeJam.Ranges.RangeIntersection`1.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  nameWithType.vb: RangeIntersection(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T)
  name.vb: RangeIntersection(Of T)
- uid: CodeJam.Ranges.RangeIntersection`1.IntersectionRange
  commentId: P:CodeJam.Ranges.RangeIntersection`1.IntersectionRange
  id: IntersectionRange
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: IntersectionRange
  nameWithType: RangeIntersection<T>.IntersectionRange
  fullName: CodeJam.Ranges.RangeIntersection<T>.IntersectionRange
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IntersectionRange
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 53
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The common part for all ranges in intersection.
  example: []
  syntax:
    content: public Range<T> IntersectionRange { get; }
    parameters: []
    return:
      type: CodeJam.Ranges.Range{{T}}
      description: The common part for all ranges in intersection.
    content.vb: Public ReadOnly Property IntersectionRange As Range(Of T)
  overload: CodeJam.Ranges.RangeIntersection`1.IntersectionRange*
  nameWithType.vb: RangeIntersection(Of T).IntersectionRange
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).IntersectionRange
- uid: CodeJam.Ranges.RangeIntersection`1.Ranges
  commentId: P:CodeJam.Ranges.RangeIntersection`1.Ranges
  id: Ranges
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: Ranges
  nameWithType: RangeIntersection<T>.Ranges
  fullName: CodeJam.Ranges.RangeIntersection<T>.Ranges
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Ranges
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 58
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: The ranges in the intersection, if any.
  example: []
  syntax:
    content: public IReadOnlyList<Range<T>> Ranges { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{CodeJam.Ranges.Range{{T}}}
      description: The ranges in the intersection, if any.
    content.vb: Public ReadOnly Property Ranges As IReadOnlyList(Of Range(Of T))
  overload: CodeJam.Ranges.RangeIntersection`1.Ranges*
  nameWithType.vb: RangeIntersection(Of T).Ranges
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).Ranges
- uid: CodeJam.Ranges.RangeIntersection`1.IsEmpty
  commentId: P:CodeJam.Ranges.RangeIntersection`1.IsEmpty
  id: IsEmpty
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: RangeIntersection<T>.IsEmpty
  fullName: CodeJam.Ranges.RangeIntersection<T>.IsEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsEmpty
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 63
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Gets a value indicating whether the intersection does not contain any ranges.
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the intersection does not contain any ranges; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: CodeJam.Ranges.RangeIntersection`1.IsEmpty*
  nameWithType.vb: RangeIntersection(Of T).IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).IsEmpty
- uid: CodeJam.Ranges.RangeIntersection`1.IsNotEmpty
  commentId: P:CodeJam.Ranges.RangeIntersection`1.IsNotEmpty
  id: IsNotEmpty
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: IsNotEmpty
  nameWithType: RangeIntersection<T>.IsNotEmpty
  fullName: CodeJam.Ranges.RangeIntersection<T>.IsNotEmpty
  type: Property
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNotEmpty
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 67
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Gets a value indicating whether the intersection contains any ranges.
  example: []
  syntax:
    content: public bool IsNotEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the intersection contains any ranges; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsNotEmpty As Boolean
  overload: CodeJam.Ranges.RangeIntersection`1.IsNotEmpty*
  nameWithType.vb: RangeIntersection(Of T).IsNotEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).IsNotEmpty
- uid: CodeJam.Ranges.RangeIntersection`1.ToString
  commentId: M:CodeJam.Ranges.RangeIntersection`1.ToString
  id: ToString
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RangeIntersection<T>.ToString()
  fullName: CodeJam.Ranges.RangeIntersection<T>.ToString()
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 72
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: Returns string representation of the range intersection.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The string representation of the range intersection.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: CodeJam.Ranges.RangeIntersection`1.ToString*
  nameWithType.vb: RangeIntersection(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).ToString()
- uid: CodeJam.Ranges.RangeIntersection`1.ToString(System.String)
  commentId: M:CodeJam.Ranges.RangeIntersection`1.ToString(System.String)
  id: ToString(System.String)
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: ToString(String)
  nameWithType: RangeIntersection<T>.ToString(String)
  fullName: CodeJam.Ranges.RangeIntersection<T>.ToString(System.String)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 94
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(string format)
    parameters:
    - id: format
      type: System.String
      description: The format string.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(format As String) As String
  overload: CodeJam.Ranges.RangeIntersection`1.ToString*
  nameWithType.vb: RangeIntersection(Of T).ToString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).ToString(System.String)
- uid: CodeJam.Ranges.RangeIntersection`1.ToString(System.IFormatProvider)
  commentId: M:CodeJam.Ranges.RangeIntersection`1.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: RangeIntersection<T>.ToString(IFormatProvider)
  fullName: CodeJam.Ranges.RangeIntersection<T>.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 103
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(IFormatProvider formatProvider)
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(formatProvider As IFormatProvider) As String
  overload: CodeJam.Ranges.RangeIntersection`1.ToString*
  nameWithType.vb: RangeIntersection(Of T).ToString(IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).ToString(System.IFormatProvider)
- uid: CodeJam.Ranges.RangeIntersection`1.ToString(System.String,System.IFormatProvider)
  commentId: M:CodeJam.Ranges.RangeIntersection`1.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: CodeJam.Ranges.RangeIntersection`1
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: RangeIntersection<T>.ToString(String, IFormatProvider)
  fullName: CodeJam.Ranges.RangeIntersection<T>.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: ToString
    path: ../Main/src/Ranges/[Helper types]/RangeIntersection`1.cs
    startLine: 113
  assemblies:
  - CodeJam
  namespace: CodeJam.Ranges
  summary: "\nReturns string representation of the range using the specified format string.\nIf <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not implement <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> the format string is ignored.\n"
  example: []
  syntax:
    content: public string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
      description: The format string.
    - id: formatProvider
      type: System.IFormatProvider
      description: The format provider.
    return:
      type: System.String
      description: The string representation of the range.
    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: CodeJam.Ranges.RangeIntersection`1.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: RangeIntersection(Of T).ToString(String, IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).ToString(System.String, System.IFormatProvider)
references:
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: CodeJam.Ranges
  commentId: N:CodeJam.Ranges
  isExternal: false
  name: CodeJam.Ranges
  nameWithType: CodeJam.Ranges
  fullName: CodeJam.Ranges
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.NullableHelper.AsNullable``1
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  parent: CodeJam.NullableHelper
  definition: CodeJam.NullableHelper.AsNullable``1(``0)
  name: AsNullable<RangeIntersection<T>>()
  nameWithType: NullableHelper.AsNullable<RangeIntersection<T>>()
  fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.RangeIntersection<T>>()
  nameWithType.vb: NullableHelper.AsNullable(Of RangeIntersection(Of T))()
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.RangeIntersection(Of T))()
  name.vb: AsNullable(Of RangeIntersection(Of T))()
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable<RangeIntersection<T>>
    nameWithType: NullableHelper.AsNullable<RangeIntersection<T>>
    fullName: CodeJam.NullableHelper.AsNullable<CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1
    name: AsNullable(Of RangeIntersection(Of T))
    nameWithType: NullableHelper.AsNullable(Of RangeIntersection(Of T))
    fullName: CodeJam.NullableHelper.AsNullable(Of CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  name: Contains<T, RangeIntersection<T>>(Range<T>)
  nameWithType: RangeExtensions.Contains<T, RangeIntersection<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.RangeIntersection<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, RangeIntersection(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.RangeIntersection(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, RangeIntersection(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains<T, RangeIntersection<T>>
    nameWithType: RangeExtensions.Contains<T, RangeIntersection<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0})
    name: Contains(Of T, RangeIntersection(Of T))
    nameWithType: RangeExtensions.Contains(Of T, RangeIntersection(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  name: StartsAfter<T, RangeIntersection<T>>(Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, RangeIntersection<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.RangeIntersection<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, RangeIntersection(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.RangeIntersection(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, RangeIntersection(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, RangeIntersection<T>>
    nameWithType: RangeExtensions.StartsAfter<T, RangeIntersection<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, RangeIntersection(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, RangeIntersection(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{{T}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  name: EndsBefore<T, RangeIntersection<T>>(Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, RangeIntersection<T>>(Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.RangeIntersection<T>>(CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, RangeIntersection(Of T))(Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.RangeIntersection(Of T))(CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, RangeIntersection(Of T))(Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, RangeIntersection<T>>
    nameWithType: RangeExtensions.EndsBefore<T, RangeIntersection<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, RangeIntersection(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, RangeIntersection(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: Contains<T, TKey, RangeIntersection<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, RangeIntersection<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.RangeIntersection<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, RangeIntersection(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.RangeIntersection(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, RangeIntersection(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, RangeIntersection<T>>
    nameWithType: RangeExtensions.Contains<T, TKey, RangeIntersection<T>>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, RangeIntersection(Of T))
    nameWithType: RangeExtensions.Contains(Of T, TKey, RangeIntersection(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: StartsAfter<T, TKey, RangeIntersection<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, RangeIntersection<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.RangeIntersection<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, RangeIntersection(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.RangeIntersection(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, RangeIntersection(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, RangeIntersection<T>>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, RangeIntersection<T>>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, RangeIntersection(Of T))
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, RangeIntersection(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{{T},{TKey}})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  parent: CodeJam.Ranges.RangeExtensions
  definition: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  name: EndsBefore<T, TKey, RangeIntersection<T>>(Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, RangeIntersection<T>>(Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.RangeIntersection<T>>(CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, RangeIntersection(Of T))(Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.RangeIntersection(Of T))(CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, RangeIntersection(Of T))(Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, RangeIntersection<T>>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, RangeIntersection<T>>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, RangeIntersection(Of T))
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, RangeIntersection(Of T))
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Strings.StringExtensions.ToInvariantString``1
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  name: ToInvariantString<RangeIntersection<T>>()
  nameWithType: StringExtensions.ToInvariantString<RangeIntersection<T>>()
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeIntersection<T>>()
  nameWithType.vb: StringExtensions.ToInvariantString(Of RangeIntersection(Of T))()
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeIntersection(Of T))()
  name.vb: ToInvariantString(Of RangeIntersection(Of T))()
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString<RangeIntersection<T>>
    nameWithType: StringExtensions.ToInvariantString<RangeIntersection<T>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1
    name: ToInvariantString(Of RangeIntersection(Of T))
    nameWithType: StringExtensions.ToInvariantString(Of RangeIntersection(Of T))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  parent: CodeJam.Strings.StringExtensions
  definition: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  name: ToInvariantString<RangeIntersection<T>>(String)
  nameWithType: StringExtensions.ToInvariantString<RangeIntersection<T>>(String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeIntersection<T>>(System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of RangeIntersection(Of T))(String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeIntersection(Of T))(System.String)
  name.vb: ToInvariantString(Of RangeIntersection(Of T))(String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString<RangeIntersection<T>>
    nameWithType: StringExtensions.ToInvariantString<RangeIntersection<T>>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<CodeJam.Ranges.RangeIntersection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(System.String)
    name: ToInvariantString(Of RangeIntersection(Of T))
    nameWithType: StringExtensions.ToInvariantString(Of RangeIntersection(Of T))
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of CodeJam.Ranges.RangeIntersection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CodeJam.NullableHelper.AsNullable``1(``0)
  commentId: M:CodeJam.NullableHelper.AsNullable``1(``0)
  isExternal: false
  name: AsNullable<T>(T)
  nameWithType: NullableHelper.AsNullable<T>(T)
  fullName: CodeJam.NullableHelper.AsNullable<T>(T)
  nameWithType.vb: NullableHelper.AsNullable(Of T)(T)
  fullName.vb: CodeJam.NullableHelper.AsNullable(Of T)(T)
  name.vb: AsNullable(Of T)(T)
  spec.csharp:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable<T>
    nameWithType: NullableHelper.AsNullable<T>
    fullName: CodeJam.NullableHelper.AsNullable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.NullableHelper.AsNullable``1(``0)
    name: AsNullable(Of T)
    nameWithType: NullableHelper.AsNullable(Of T)
    fullName: CodeJam.NullableHelper.AsNullable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.NullableHelper
  commentId: T:CodeJam.NullableHelper
  parent: CodeJam
  isExternal: false
  name: NullableHelper
  nameWithType: NullableHelper
  fullName: CodeJam.NullableHelper
- uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: Contains<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.Contains<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: Contains(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains<T, TRange>
    nameWithType: RangeExtensions.Contains<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})
    name: Contains(Of T, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions
  commentId: T:CodeJam.Ranges.RangeExtensions
  parent: CodeJam.Ranges
  isExternal: false
  name: RangeExtensions
  nameWithType: RangeExtensions
  fullName: CodeJam.Ranges.RangeExtensions
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: StartsAfter<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: StartsAfter(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter<T, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})
    name: StartsAfter(Of T, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
  isExternal: false
  name: EndsBefore<T, TRange>(TRange, Range<T>)
  nameWithType: RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>(TRange, CodeJam.Ranges.Range<T>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TRange)(TRange, Range(Of T))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)(TRange, CodeJam.Ranges.Range(Of T))
  name.vb: EndsBefore(Of T, TRange)(TRange, Range(Of T))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore<T, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})
    name: EndsBefore(Of T, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: Contains(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains<T, TKey, TRange>
    nameWithType: RangeExtensions.Contains<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.Contains<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: Contains(Of T, TKey, TRange)
    nameWithType: RangeExtensions.Contains(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.Contains(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: StartsAfter(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter<T, TKey, TRange>
    nameWithType: RangeExtensions.StartsAfter<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: StartsAfter(Of T, TKey, TRange)
    nameWithType: RangeExtensions.StartsAfter(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.StartsAfter(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  commentId: M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
  isExternal: false
  name: EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)
  fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, CodeJam.Ranges.Range<T, TKey>)
  nameWithType.vb: RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  fullName.vb: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)(TRange, CodeJam.Ranges.Range(Of T, TKey))
  name.vb: EndsBefore(Of T, TKey, TRange)(TRange, Range(Of T, TKey))
  spec.csharp:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore<T, TKey, TRange>
    nameWithType: RangeExtensions.EndsBefore<T, TKey, TRange>
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore<T, TKey, TRange>
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})
    name: EndsBefore(Of T, TKey, TRange)
    nameWithType: RangeExtensions.EndsBefore(Of T, TKey, TRange)
    fullName: CodeJam.Ranges.RangeExtensions.EndsBefore(Of T, TKey, TRange)
  - name: (
    nameWithType: (
    fullName: (
  - name: TRange
    nameWithType: TRange
    fullName: TRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CodeJam.Ranges.Range`2
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
  isExternal: false
  name: ToInvariantString<T>(T)
  nameWithType: StringExtensions.ToInvariantString<T>(T)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T)
  name.vb: ToInvariantString(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Strings.StringExtensions
  commentId: T:CodeJam.Strings.StringExtensions
  parent: CodeJam.Strings
  isExternal: false
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: CodeJam.Strings.StringExtensions
- uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  commentId: M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
  isExternal: true
  name: ToInvariantString<T>(T, String)
  nameWithType: StringExtensions.ToInvariantString<T>(T, String)
  fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>(T, System.String)
  nameWithType.vb: StringExtensions.ToInvariantString(Of T)(T, String)
  fullName.vb: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)(T, System.String)
  name.vb: ToInvariantString(Of T)(T, String)
  spec.csharp:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString<T>
    nameWithType: StringExtensions.ToInvariantString<T>
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)
    name: ToInvariantString(Of T)
    nameWithType: StringExtensions.ToInvariantString(Of T)
    fullName: CodeJam.Strings.StringExtensions.ToInvariantString(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: CodeJam.Strings
  commentId: N:CodeJam.Strings
  isExternal: false
  name: CodeJam.Strings
  nameWithType: CodeJam.Strings
  fullName: CodeJam.Strings
- uid: CodeJam.Ranges.RangeIntersection`1.IntersectionRange*
  commentId: Overload:CodeJam.Ranges.RangeIntersection`1.IntersectionRange
  isExternal: false
  name: IntersectionRange
  nameWithType: RangeIntersection<T>.IntersectionRange
  fullName: CodeJam.Ranges.RangeIntersection<T>.IntersectionRange
  nameWithType.vb: RangeIntersection(Of T).IntersectionRange
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).IntersectionRange
- uid: CodeJam.Ranges.Range{{T}}
  commentId: T:CodeJam.Ranges.Range{``0}
  parent: CodeJam.Ranges
  definition: CodeJam.Ranges.Range`1
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.Range`1
  commentId: T:CodeJam.Ranges.Range`1
  parent: CodeJam.Ranges
  isExternal: false
  name: Range<T>
  nameWithType: Range<T>
  fullName: CodeJam.Ranges.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: CodeJam.Ranges.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.Ranges*
  commentId: Overload:CodeJam.Ranges.RangeIntersection`1.Ranges
  isExternal: false
  name: Ranges
  nameWithType: RangeIntersection<T>.Ranges
  fullName: CodeJam.Ranges.RangeIntersection<T>.Ranges
  nameWithType.vb: RangeIntersection(Of T).Ranges
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).Ranges
- uid: System.Collections.Generic.IReadOnlyList{CodeJam.Ranges.Range{{T}}}
  commentId: T:System.Collections.Generic.IReadOnlyList{CodeJam.Ranges.Range{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Range<T>>
  nameWithType: IReadOnlyList<Range<T>>
  fullName: System.Collections.Generic.IReadOnlyList<CodeJam.Ranges.Range<T>>
  nameWithType.vb: IReadOnlyList(Of Range(Of T))
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of CodeJam.Ranges.Range(Of T))
  name.vb: IReadOnlyList(Of Range(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.Ranges.Range`1
    name: Range
    nameWithType: Range
    fullName: CodeJam.Ranges.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CodeJam.Ranges.RangeIntersection`1.IsEmpty*
  commentId: Overload:CodeJam.Ranges.RangeIntersection`1.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: RangeIntersection<T>.IsEmpty
  fullName: CodeJam.Ranges.RangeIntersection<T>.IsEmpty
  nameWithType.vb: RangeIntersection(Of T).IsEmpty
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CodeJam.Ranges.RangeIntersection`1.IsNotEmpty*
  commentId: Overload:CodeJam.Ranges.RangeIntersection`1.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: RangeIntersection<T>.IsNotEmpty
  fullName: CodeJam.Ranges.RangeIntersection<T>.IsNotEmpty
  nameWithType.vb: RangeIntersection(Of T).IsNotEmpty
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).IsNotEmpty
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Ranges.RangeIntersection`1.ToString*
  commentId: Overload:CodeJam.Ranges.RangeIntersection`1.ToString
  isExternal: false
  name: ToString
  nameWithType: RangeIntersection<T>.ToString
  fullName: CodeJam.Ranges.RangeIntersection<T>.ToString
  nameWithType.vb: RangeIntersection(Of T).ToString
  fullName.vb: CodeJam.Ranges.RangeIntersection(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
