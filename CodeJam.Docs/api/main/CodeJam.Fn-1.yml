### YamlMime:ManagedReference
items:
- uid: CodeJam.Fn`1
  commentId: T:CodeJam.Fn`1
  id: Fn`1
  parent: CodeJam
  children:
  - CodeJam.Fn`1.False
  - CodeJam.Fn`1.FalsePredicate
  - CodeJam.Fn`1.IsNotNull
  - CodeJam.Fn`1.IsNull
  - CodeJam.Fn`1.Self
  - CodeJam.Fn`1.SelfConverter
  - CodeJam.Fn`1.True
  - CodeJam.Fn`1.TruePredicate
  langs:
  - csharp
  - vb
  name: Fn<T>
  nameWithType: Fn<T>
  fullName: CodeJam.Fn<T>
  type: Class
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Fn
    path: ../Main/src/Fn`1.cs
    startLine: 10
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nHelper methods for <xref href=\"System.Func%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static class Fn<T>
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Module Fn(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Fn(Of T)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: CodeJam.Fn(Of T)
  name.vb: Fn(Of T)
- uid: CodeJam.Fn`1.True
  commentId: F:CodeJam.Fn`1.True
  id: "True"
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: "True"
  nameWithType: Fn<T>.True
  fullName: CodeJam.Fn<T>.True
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: "True"
    path: ../Main/src/Fn`1.cs
    startLine: 16
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that always returns true.\n"
  example: []
  syntax:
    content: public static readonly Func<T, bool> True
    return:
      type: System.Func{{T},System.Boolean}
    content.vb: Public Shared ReadOnly True As Func(Of T, Boolean)
  nameWithType.vb: Fn(Of T).True
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).True
- uid: CodeJam.Fn`1.False
  commentId: F:CodeJam.Fn`1.False
  id: "False"
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: "False"
  nameWithType: Fn<T>.False
  fullName: CodeJam.Fn<T>.False
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: "False"
    path: ../Main/src/Fn`1.cs
    startLine: 21
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that returns false.\n"
  example: []
  syntax:
    content: public static readonly Func<T, bool> False
    return:
      type: System.Func{{T},System.Boolean}
    content.vb: Public Shared ReadOnly False As Func(Of T, Boolean)
  nameWithType.vb: Fn(Of T).False
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).False
- uid: CodeJam.Fn`1.TruePredicate
  commentId: F:CodeJam.Fn`1.TruePredicate
  id: TruePredicate
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: TruePredicate
  nameWithType: Fn<T>.TruePredicate
  fullName: CodeJam.Fn<T>.TruePredicate
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: TruePredicate
    path: ../Main/src/Fn`1.cs
    startLine: 26
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that returns true.\n"
  example: []
  syntax:
    content: public static readonly Predicate<T> TruePredicate
    return:
      type: System.Predicate{{T}}
    content.vb: Public Shared ReadOnly TruePredicate As Predicate(Of T)
  nameWithType.vb: Fn(Of T).TruePredicate
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).TruePredicate
- uid: CodeJam.Fn`1.FalsePredicate
  commentId: F:CodeJam.Fn`1.FalsePredicate
  id: FalsePredicate
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: FalsePredicate
  nameWithType: Fn<T>.FalsePredicate
  fullName: CodeJam.Fn<T>.FalsePredicate
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: FalsePredicate
    path: ../Main/src/Fn`1.cs
    startLine: 31
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that always returns false.\n"
  example: []
  syntax:
    content: public static readonly Predicate<T> FalsePredicate
    return:
      type: System.Predicate{{T}}
    content.vb: Public Shared ReadOnly FalsePredicate As Predicate(Of T)
  nameWithType.vb: Fn(Of T).FalsePredicate
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).FalsePredicate
- uid: CodeJam.Fn`1.Self
  commentId: F:CodeJam.Fn`1.Self
  id: Self
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: Self
  nameWithType: Fn<T>.Self
  fullName: CodeJam.Fn<T>.Self
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Self
    path: ../Main/src/Fn`1.cs
    startLine: 36
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that returns the same object which was passed as parameter.\n"
  example: []
  syntax:
    content: public static readonly Func<T, T> Self
    return:
      type: System.Func{{T},{T}}
    content.vb: Public Shared ReadOnly Self As Func(Of T, T)
  nameWithType.vb: Fn(Of T).Self
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).Self
- uid: CodeJam.Fn`1.SelfConverter
  commentId: F:CodeJam.Fn`1.SelfConverter
  id: SelfConverter
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: SelfConverter
  nameWithType: Fn<T>.SelfConverter
  fullName: CodeJam.Fn<T>.SelfConverter
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: SelfConverter
    path: ../Main/src/Fn`1.cs
    startLine: 41
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that returns the same object which was passed as parameter.\n"
  example: []
  syntax:
    content: public static readonly Converter<T, T> SelfConverter
    return:
      type: System.Converter{{T},{T}}
    content.vb: Public Shared ReadOnly SelfConverter As Converter(Of T, T)
  nameWithType.vb: Fn(Of T).SelfConverter
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).SelfConverter
- uid: CodeJam.Fn`1.IsNull
  commentId: F:CodeJam.Fn`1.IsNull
  id: IsNull
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: IsNull
  nameWithType: Fn<T>.IsNull
  fullName: CodeJam.Fn<T>.IsNull
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNull
    path: ../Main/src/Fn`1.cs
    startLine: 46
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that returns true if an object is null.\n"
  example: []
  syntax:
    content: public static readonly Func<T, bool> IsNull
    return:
      type: System.Func{{T},System.Boolean}
    content.vb: Public Shared ReadOnly IsNull As Func(Of T, Boolean)
  nameWithType.vb: Fn(Of T).IsNull
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).IsNull
- uid: CodeJam.Fn`1.IsNotNull
  commentId: F:CodeJam.Fn`1.IsNotNull
  id: IsNotNull
  parent: CodeJam.Fn`1
  langs:
  - csharp
  - vb
  name: IsNotNull
  nameWithType: Fn<T>.IsNotNull
  fullName: CodeJam.Fn<T>.IsNotNull
  type: Field
  source:
    remote:
      path: Main/src/Fn`1.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: IsNotNull
    path: ../Main/src/Fn`1.cs
    startLine: 51
  assemblies:
  - CodeJam
  namespace: CodeJam
  summary: "\nThe function that returns true if an object is not null.\n"
  example: []
  syntax:
    content: public static readonly Func<T, bool> IsNotNull
    return:
      type: System.Func{{T},System.Boolean}
    content.vb: Public Shared ReadOnly IsNotNull As Func(Of T, Boolean)
  nameWithType.vb: Fn(Of T).IsNotNull
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Fn(Of T).IsNotNull
references:
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam
  commentId: N:CodeJam
  isExternal: false
  name: CodeJam
  nameWithType: CodeJam
  fullName: CodeJam
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{`0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},{T}}
  commentId: T:System.Func{`0,`0}
  parent: System
  definition: System.Func`2
  name: Func<T, T>
  nameWithType: Func<T, T>
  fullName: System.Func<T, T>
  nameWithType.vb: Func(Of T, T)
  fullName.vb: System.Func(Of T, T)
  name.vb: Func(Of T, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Converter{{T},{T}}
  commentId: T:System.Converter{`0,`0}
  parent: System
  definition: System.Converter`2
  name: Converter<T, T>
  nameWithType: Converter<T, T>
  fullName: System.Converter<T, T>
  nameWithType.vb: Converter(Of T, T)
  fullName.vb: System.Converter(Of T, T)
  name.vb: Converter(Of T, T)
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Converter`2
  commentId: T:System.Converter`2
  isExternal: true
  name: Converter<TInput, TOutput>
  nameWithType: Converter<TInput, TOutput>
  fullName: System.Converter<TInput, TOutput>
  nameWithType.vb: Converter(Of TInput, TOutput)
  fullName.vb: System.Converter(Of TInput, TOutput)
  name.vb: Converter(Of TInput, TOutput)
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
