### YamlMime:ManagedReference
items:
- uid: CodeJam.Mapping.Convert`2
  commentId: T:CodeJam.Mapping.Convert`2
  id: Convert`2
  parent: CodeJam.Mapping
  children:
  - CodeJam.Mapping.Convert`2.Expression
  - CodeJam.Mapping.Convert`2.From
  - CodeJam.Mapping.Convert`2.Lambda
  langs:
  - csharp
  - vb
  name: Convert<TFrom, TTo>
  nameWithType: Convert<TFrom, TTo>
  fullName: CodeJam.Mapping.Convert<TFrom, TTo>
  type: Class
  source:
    remote:
      path: Blocks/src/Mapping/ConvertT.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Convert
    path: ../Blocks/src/Mapping/ConvertT.cs
    startLine: 15
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nProvides data convertion functionality.\n"
  example: []
  syntax:
    content: public static class Convert<TFrom, TTo>
    typeParameters:
    - id: TFrom
      description: Type to convert from.
    - id: TTo
      description: Type to convert to.
    content.vb: Public Module Convert(Of TFrom, TTo)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Convert(Of TFrom, TTo)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: CodeJam.Mapping.Convert(Of TFrom, TTo)
  name.vb: Convert(Of TFrom, TTo)
- uid: CodeJam.Mapping.Convert`2.Expression
  commentId: P:CodeJam.Mapping.Convert`2.Expression
  id: Expression
  parent: CodeJam.Mapping.Convert`2
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: Convert<TFrom, TTo>.Expression
  fullName: CodeJam.Mapping.Convert<TFrom, TTo>.Expression
  type: Property
  source:
    remote:
      path: Blocks/src/Mapping/ConvertT.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Expression
    path: ../Blocks/src/Mapping/ConvertT.cs
    startLine: 39
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nRepresents an expression that converts a value of <em>TFrom</em> type to <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public static Expression<Func<TFrom, TTo>> Expression { get; set; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TFrom},{TTo}}}
    content.vb: Public Shared Property Expression As Expression(Of Func(Of TFrom, TTo))
  overload: CodeJam.Mapping.Convert`2.Expression*
  nameWithType.vb: Convert(Of TFrom, TTo).Expression
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Mapping.Convert(Of TFrom, TTo).Expression
- uid: CodeJam.Mapping.Convert`2.Lambda
  commentId: P:CodeJam.Mapping.Convert`2.Lambda
  id: Lambda
  parent: CodeJam.Mapping.Convert`2
  langs:
  - csharp
  - vb
  name: Lambda
  nameWithType: Convert<TFrom, TTo>.Lambda
  fullName: CodeJam.Mapping.Convert<TFrom, TTo>.Lambda
  type: Property
  source:
    remote:
      path: Blocks/src/Mapping/ConvertT.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Lambda
    path: ../Blocks/src/Mapping/ConvertT.cs
    startLine: 69
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nRepresents a function that converts a value of <em>TFrom</em> type to <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public static Func<TFrom, TTo> Lambda { get; set; }
    parameters: []
    return:
      type: System.Func{{TFrom},{TTo}}
    content.vb: Public Shared Property Lambda As Func(Of TFrom, TTo)
  overload: CodeJam.Mapping.Convert`2.Lambda*
  nameWithType.vb: Convert(Of TFrom, TTo).Lambda
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.Mapping.Convert(Of TFrom, TTo).Lambda
- uid: CodeJam.Mapping.Convert`2.From
  commentId: P:CodeJam.Mapping.Convert`2.From
  id: From
  parent: CodeJam.Mapping.Convert`2
  langs:
  - csharp
  - vb
  name: From
  nameWithType: Convert<TFrom, TTo>.From
  fullName: CodeJam.Mapping.Convert<TFrom, TTo>.From
  type: Property
  source:
    remote:
      path: Blocks/src/Mapping/ConvertT.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: From
    path: ../Blocks/src/Mapping/ConvertT.cs
    startLine: 104
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a function that converts a value of <em>TFrom</em> type to <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public static Func<TFrom, TTo> From { get; }
    parameters: []
    return:
      type: System.Func{{TFrom},{TTo}}
    content.vb: Public Shared ReadOnly Property From As Func(Of TFrom, TTo)
  overload: CodeJam.Mapping.Convert`2.From*
  nameWithType.vb: Convert(Of TFrom, TTo).From
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CodeJam.Mapping.Convert(Of TFrom, TTo).From
references:
- uid: CodeJam.Mapping
  commentId: N:CodeJam.Mapping
  isExternal: false
  name: CodeJam.Mapping
  nameWithType: CodeJam.Mapping
  fullName: CodeJam.Mapping
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Mapping.Convert`2.Expression*
  commentId: Overload:CodeJam.Mapping.Convert`2.Expression
  isExternal: false
  name: Expression
  nameWithType: Convert<TFrom, TTo>.Expression
  fullName: CodeJam.Mapping.Convert<TFrom, TTo>.Expression
  nameWithType.vb: Convert(Of TFrom, TTo).Expression
  fullName.vb: CodeJam.Mapping.Convert(Of TFrom, TTo).Expression
- uid: System.Linq.Expressions.Expression{System.Func{{TFrom},{TTo}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TFrom, TTo>>
  nameWithType: Expression<Func<TFrom, TTo>>
  fullName: System.Linq.Expressions.Expression<System.Func<TFrom, TTo>>
  nameWithType.vb: Expression(Of Func(Of TFrom, TTo))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TFrom, TTo))
  name.vb: Expression(Of Func(Of TFrom, TTo))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: CodeJam.Mapping.Convert`2.Lambda*
  commentId: Overload:CodeJam.Mapping.Convert`2.Lambda
  isExternal: false
  name: Lambda
  nameWithType: Convert<TFrom, TTo>.Lambda
  fullName: CodeJam.Mapping.Convert<TFrom, TTo>.Lambda
  nameWithType.vb: Convert(Of TFrom, TTo).Lambda
  fullName.vb: CodeJam.Mapping.Convert(Of TFrom, TTo).Lambda
- uid: System.Func{{TFrom},{TTo}}
  commentId: T:System.Func{`0,`1}
  parent: System
  definition: System.Func`2
  name: Func<TFrom, TTo>
  nameWithType: Func<TFrom, TTo>
  fullName: System.Func<TFrom, TTo>
  nameWithType.vb: Func(Of TFrom, TTo)
  fullName.vb: System.Func(Of TFrom, TTo)
  name.vb: Func(Of TFrom, TTo)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Mapping.Convert`2.From*
  commentId: Overload:CodeJam.Mapping.Convert`2.From
  isExternal: false
  name: From
  nameWithType: Convert<TFrom, TTo>.From
  fullName: CodeJam.Mapping.Convert<TFrom, TTo>.From
  nameWithType.vb: Convert(Of TFrom, TTo).From
  fullName.vb: CodeJam.Mapping.Convert(Of TFrom, TTo).From
