### YamlMime:ManagedReference
items:
- uid: CodeJam.Mapping.Mapper`2
  commentId: T:CodeJam.Mapping.Mapper`2
  id: Mapper`2
  parent: CodeJam.Mapping
  children:
  - CodeJam.Mapping.Mapper`2.GetMapper
  - CodeJam.Mapping.Mapper`2.GetMapperEx
  - CodeJam.Mapping.Mapper`2.GetMapperExpression
  - CodeJam.Mapping.Mapper`2.GetMapperExpressionEx
  - CodeJam.Mapping.Mapper`2.Map(`0)
  - CodeJam.Mapping.Mapper`2.Map(`0,`1)
  - CodeJam.Mapping.Mapper`2.Map(`0,`1,System.Collections.Generic.IDictionary{System.Object,System.Object})
  langs:
  - csharp
  - vb
  name: Mapper<TFrom, TTo>
  nameWithType: Mapper<TFrom, TTo>
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>
  type: Class
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Mapper
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 18
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nMaps an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\n"
  example:
  - "\nThis example shows how to map one object to another.\n<pre><code source=\"Blocks\\tests\\Mapping\\Examples\\MapTests.cs\" region=\"Example\"></code></pre>\n"
  syntax:
    content: public class Mapper<TFrom, TTo>
    typeParameters:
    - id: TFrom
      description: Type to map from.
    - id: TTo
      description: Type to map to.
    content.vb: Public Class Mapper(Of TFrom, TTo)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - CodeJam.Mapping.Mapper`2.CodeJam.Mapping.Map.DeepCopy``1
  nameWithType.vb: Mapper(Of TFrom, TTo)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo)
  name.vb: Mapper(Of TFrom, TTo)
- uid: CodeJam.Mapping.Mapper`2.GetMapperExpressionEx
  commentId: M:CodeJam.Mapping.Mapper`2.GetMapperExpressionEx
  id: GetMapperExpressionEx
  parent: CodeJam.Mapping.Mapper`2
  langs:
  - csharp
  - vb
  name: GetMapperExpressionEx()
  nameWithType: Mapper<TFrom, TTo>.GetMapperExpressionEx()
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapperExpressionEx()
  type: Method
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMapperExpressionEx
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 34
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a mapper expression to map an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\nReturned expression is compatible to IQueriable.\n"
  example: []
  syntax:
    content: public Expression<Func<TFrom, TTo>> GetMapperExpressionEx()
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TFrom},{TTo}}}
      description: Mapping expression.
    content.vb: Public Function GetMapperExpressionEx As Expression(Of Func(Of TFrom, TTo))
  overload: CodeJam.Mapping.Mapper`2.GetMapperExpressionEx*
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapperExpressionEx()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapperExpressionEx()
- uid: CodeJam.Mapping.Mapper`2.GetMapperExpression
  commentId: M:CodeJam.Mapping.Mapper`2.GetMapperExpression
  id: GetMapperExpression
  parent: CodeJam.Mapping.Mapper`2
  langs:
  - csharp
  - vb
  name: GetMapperExpression()
  nameWithType: Mapper<TFrom, TTo>.GetMapperExpression()
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapperExpression()
  type: Method
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMapperExpression
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 42
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a mapper expression to map an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public Expression<Func<TFrom, TTo, IDictionary<object, object>, TTo>> GetMapperExpression()
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TFrom},{TTo},System.Collections.Generic.IDictionary{System.Object,System.Object},{TTo}}}
      description: Mapping expression.
    content.vb: Public Function GetMapperExpression As Expression(Of Func(Of TFrom, TTo, IDictionary(Of Object, Object), TTo))
  overload: CodeJam.Mapping.Mapper`2.GetMapperExpression*
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapperExpression()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapperExpression()
- uid: CodeJam.Mapping.Mapper`2.GetMapperEx
  commentId: M:CodeJam.Mapping.Mapper`2.GetMapperEx
  id: GetMapperEx
  parent: CodeJam.Mapping.Mapper`2
  langs:
  - csharp
  - vb
  name: GetMapperEx()
  nameWithType: Mapper<TFrom, TTo>.GetMapperEx()
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapperEx()
  type: Method
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMapperEx
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 50
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a mapper to map an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public Func<TFrom, TTo> GetMapperEx()
    return:
      type: System.Func{{TFrom},{TTo}}
      description: Mapping expression.
    content.vb: Public Function GetMapperEx As Func(Of TFrom, TTo)
  overload: CodeJam.Mapping.Mapper`2.GetMapperEx*
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapperEx()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapperEx()
- uid: CodeJam.Mapping.Mapper`2.GetMapper
  commentId: M:CodeJam.Mapping.Mapper`2.GetMapper
  id: GetMapper
  parent: CodeJam.Mapping.Mapper`2
  langs:
  - csharp
  - vb
  name: GetMapper()
  nameWithType: Mapper<TFrom, TTo>.GetMapper()
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapper()
  type: Method
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: GetMapper
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 58
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a mapper to map an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public Func<TFrom, TTo, IDictionary<object, object>, TTo> GetMapper()
    return:
      type: System.Func{{TFrom},{TTo},System.Collections.Generic.IDictionary{System.Object,System.Object},{TTo}}
      description: Mapping expression.
    content.vb: Public Function GetMapper As Func(Of TFrom, TTo, IDictionary(Of Object, Object), TTo)
  overload: CodeJam.Mapping.Mapper`2.GetMapper*
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapper()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapper()
- uid: CodeJam.Mapping.Mapper`2.Map(`0)
  commentId: M:CodeJam.Mapping.Mapper`2.Map(`0)
  id: Map(`0)
  parent: CodeJam.Mapping.Mapper`2
  langs:
  - csharp
  - vb
  name: Map(TFrom)
  nameWithType: Mapper<TFrom, TTo>.Map(TFrom)
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.Map(TFrom)
  type: Method
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Map
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 67
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a mapper to map an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public TTo Map(TFrom source)
    parameters:
    - id: source
      type: '{TFrom}'
      description: Object to map.
    return:
      type: '{TTo}'
      description: Destination object.
    content.vb: Public Function Map(source As TFrom) As TTo
  overload: CodeJam.Mapping.Mapper`2.Map*
  nameWithType.vb: Mapper(Of TFrom, TTo).Map(TFrom)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).Map(TFrom)
- uid: CodeJam.Mapping.Mapper`2.Map(`0,`1)
  commentId: M:CodeJam.Mapping.Mapper`2.Map(`0,`1)
  id: Map(`0,`1)
  parent: CodeJam.Mapping.Mapper`2
  langs:
  - csharp
  - vb
  name: Map(TFrom, TTo)
  nameWithType: Mapper<TFrom, TTo>.Map(TFrom, TTo)
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.Map(TFrom, TTo)
  type: Method
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Map
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 77
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a mapper to map an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public TTo Map(TFrom source, TTo destination)
    parameters:
    - id: source
      type: '{TFrom}'
      description: Object to map.
    - id: destination
      type: '{TTo}'
      description: Destination object.
    return:
      type: '{TTo}'
      description: Destination object.
    content.vb: Public Function Map(source As TFrom, destination As TTo) As TTo
  overload: CodeJam.Mapping.Mapper`2.Map*
  nameWithType.vb: Mapper(Of TFrom, TTo).Map(TFrom, TTo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).Map(TFrom, TTo)
- uid: CodeJam.Mapping.Mapper`2.Map(`0,`1,System.Collections.Generic.IDictionary{System.Object,System.Object})
  commentId: M:CodeJam.Mapping.Mapper`2.Map(`0,`1,System.Collections.Generic.IDictionary{System.Object,System.Object})
  id: Map(`0,`1,System.Collections.Generic.IDictionary{System.Object,System.Object})
  parent: CodeJam.Mapping.Mapper`2
  langs:
  - csharp
  - vb
  name: Map(TFrom, TTo, IDictionary<Object, Object>)
  nameWithType: Mapper<TFrom, TTo>.Map(TFrom, TTo, IDictionary<Object, Object>)
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.Map(TFrom, TTo, System.Collections.Generic.IDictionary<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: Blocks/src/Mapping/Mapper.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Map
    path: ../Blocks/src/Mapping/Mapper.cs
    startLine: 87
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.Mapping
  summary: "\nReturns a mapper to map an object of <em>TFrom</em> type to an object of <em>TTo</em> type.\n"
  example: []
  syntax:
    content: public TTo Map(TFrom source, TTo destination, IDictionary<object, object> crossReferenceDictionary)
    parameters:
    - id: source
      type: '{TFrom}'
      description: Object to map.
    - id: destination
      type: '{TTo}'
      description: Destination object.
    - id: crossReferenceDictionary
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
      description: Storage for cress references if applied.
    return:
      type: '{TTo}'
      description: Destination object.
    content.vb: Public Function Map(source As TFrom, destination As TTo, crossReferenceDictionary As IDictionary(Of Object, Object)) As TTo
  overload: CodeJam.Mapping.Mapper`2.Map*
  nameWithType.vb: Mapper(Of TFrom, TTo).Map(TFrom, TTo, IDictionary(Of Object, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).Map(TFrom, TTo, System.Collections.Generic.IDictionary(Of System.Object, System.Object))
  name.vb: Map(TFrom, TTo, IDictionary(Of Object, Object))
references:
- uid: CodeJam.Mapping
  commentId: N:CodeJam.Mapping
  isExternal: false
  name: CodeJam.Mapping
  nameWithType: CodeJam.Mapping
  fullName: CodeJam.Mapping
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Mapping.Mapper`2.CodeJam.Mapping.Map.DeepCopy``1
  commentId: M:CodeJam.Mapping.Map.DeepCopy``1(``0)
  parent: CodeJam.Mapping.Map
  definition: CodeJam.Mapping.Map.DeepCopy``1(``0)
  name: DeepCopy<Mapper<TFrom, TTo>>()
  nameWithType: Map.DeepCopy<Mapper<TFrom, TTo>>()
  fullName: CodeJam.Mapping.Map.DeepCopy<CodeJam.Mapping.Mapper<TFrom, TTo>>()
  nameWithType.vb: Map.DeepCopy(Of Mapper(Of TFrom, TTo))()
  fullName.vb: CodeJam.Mapping.Map.DeepCopy(Of CodeJam.Mapping.Mapper(Of TFrom, TTo))()
  name.vb: DeepCopy(Of Mapper(Of TFrom, TTo))()
  spec.csharp:
  - uid: CodeJam.Mapping.Map.DeepCopy``1
    name: DeepCopy<Mapper<TFrom, TTo>>
    nameWithType: Map.DeepCopy<Mapper<TFrom, TTo>>
    fullName: CodeJam.Mapping.Map.DeepCopy<CodeJam.Mapping.Mapper<TFrom, TTo>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Mapping.Map.DeepCopy``1
    name: DeepCopy(Of Mapper(Of TFrom, TTo))
    nameWithType: Map.DeepCopy(Of Mapper(Of TFrom, TTo))
    fullName: CodeJam.Mapping.Map.DeepCopy(Of CodeJam.Mapping.Mapper(Of TFrom, TTo))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.Mapping.Map.DeepCopy``1(``0)
  commentId: M:CodeJam.Mapping.Map.DeepCopy``1(``0)
  isExternal: false
  name: DeepCopy<T>(T)
  nameWithType: Map.DeepCopy<T>(T)
  fullName: CodeJam.Mapping.Map.DeepCopy<T>(T)
  nameWithType.vb: Map.DeepCopy(Of T)(T)
  fullName.vb: CodeJam.Mapping.Map.DeepCopy(Of T)(T)
  name.vb: DeepCopy(Of T)(T)
  spec.csharp:
  - uid: CodeJam.Mapping.Map.DeepCopy``1(``0)
    name: DeepCopy<T>
    nameWithType: Map.DeepCopy<T>
    fullName: CodeJam.Mapping.Map.DeepCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.Mapping.Map.DeepCopy``1(``0)
    name: DeepCopy(Of T)
    nameWithType: Map.DeepCopy(Of T)
    fullName: CodeJam.Mapping.Map.DeepCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Mapping.Map
  commentId: T:CodeJam.Mapping.Map
  parent: CodeJam.Mapping
  isExternal: false
  name: Map
  nameWithType: Map
  fullName: CodeJam.Mapping.Map
- uid: CodeJam.Mapping.Mapper`2.GetMapperExpressionEx*
  commentId: Overload:CodeJam.Mapping.Mapper`2.GetMapperExpressionEx
  isExternal: false
  name: GetMapperExpressionEx
  nameWithType: Mapper<TFrom, TTo>.GetMapperExpressionEx
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapperExpressionEx
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapperExpressionEx
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapperExpressionEx
- uid: System.Linq.Expressions.Expression{System.Func{{TFrom},{TTo}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TFrom, TTo>>
  nameWithType: Expression<Func<TFrom, TTo>>
  fullName: System.Linq.Expressions.Expression<System.Func<TFrom, TTo>>
  nameWithType.vb: Expression(Of Func(Of TFrom, TTo))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TFrom, TTo))
  name.vb: Expression(Of Func(Of TFrom, TTo))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: CodeJam.Mapping.Mapper`2.GetMapperExpression*
  commentId: Overload:CodeJam.Mapping.Mapper`2.GetMapperExpression
  isExternal: false
  name: GetMapperExpression
  nameWithType: Mapper<TFrom, TTo>.GetMapperExpression
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapperExpression
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapperExpression
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapperExpression
- uid: System.Linq.Expressions.Expression{System.Func{{TFrom},{TTo},System.Collections.Generic.IDictionary{System.Object,System.Object},{TTo}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,System.Collections.Generic.IDictionary{System.Object,System.Object},`1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TFrom, TTo, IDictionary<Object, Object>, TTo>>
  nameWithType: Expression<Func<TFrom, TTo, IDictionary<Object, Object>, TTo>>
  fullName: System.Linq.Expressions.Expression<System.Func<TFrom, TTo, System.Collections.Generic.IDictionary<System.Object, System.Object>, TTo>>
  nameWithType.vb: Expression(Of Func(Of TFrom, TTo, IDictionary(Of Object, Object), TTo))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TFrom, TTo, System.Collections.Generic.IDictionary(Of System.Object, System.Object), TTo))
  name.vb: Expression(Of Func(Of TFrom, TTo, IDictionary(Of Object, Object), TTo))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Mapping.Mapper`2.GetMapperEx*
  commentId: Overload:CodeJam.Mapping.Mapper`2.GetMapperEx
  isExternal: false
  name: GetMapperEx
  nameWithType: Mapper<TFrom, TTo>.GetMapperEx
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapperEx
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapperEx
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapperEx
- uid: System.Func{{TFrom},{TTo}}
  commentId: T:System.Func{`0,`1}
  parent: System
  definition: System.Func`2
  name: Func<TFrom, TTo>
  nameWithType: Func<TFrom, TTo>
  fullName: System.Func<TFrom, TTo>
  nameWithType.vb: Func(Of TFrom, TTo)
  fullName.vb: System.Func(Of TFrom, TTo)
  name.vb: Func(Of TFrom, TTo)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Mapping.Mapper`2.GetMapper*
  commentId: Overload:CodeJam.Mapping.Mapper`2.GetMapper
  isExternal: false
  name: GetMapper
  nameWithType: Mapper<TFrom, TTo>.GetMapper
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.GetMapper
  nameWithType.vb: Mapper(Of TFrom, TTo).GetMapper
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).GetMapper
- uid: System.Func{{TFrom},{TTo},System.Collections.Generic.IDictionary{System.Object,System.Object},{TTo}}
  commentId: T:System.Func{`0,`1,System.Collections.Generic.IDictionary{System.Object,System.Object},`1}
  parent: System
  definition: System.Func`4
  name: Func<TFrom, TTo, IDictionary<Object, Object>, TTo>
  nameWithType: Func<TFrom, TTo, IDictionary<Object, Object>, TTo>
  fullName: System.Func<TFrom, TTo, System.Collections.Generic.IDictionary<System.Object, System.Object>, TTo>
  nameWithType.vb: Func(Of TFrom, TTo, IDictionary(Of Object, Object), TTo)
  fullName.vb: System.Func(Of TFrom, TTo, System.Collections.Generic.IDictionary(Of System.Object, System.Object), TTo)
  name.vb: Func(Of TFrom, TTo, IDictionary(Of Object, Object), TTo)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.Mapping.Mapper`2.Map*
  commentId: Overload:CodeJam.Mapping.Mapper`2.Map
  isExternal: false
  name: Map
  nameWithType: Mapper<TFrom, TTo>.Map
  fullName: CodeJam.Mapping.Mapper<TFrom, TTo>.Map
  nameWithType.vb: Mapper(Of TFrom, TTo).Map
  fullName.vb: CodeJam.Mapping.Mapper(Of TFrom, TTo).Map
- uid: '{TFrom}'
  commentId: '!:TFrom'
  definition: TFrom
  name: TFrom
  nameWithType: TFrom
  fullName: TFrom
- uid: '{TTo}'
  commentId: '!:TTo'
  definition: TTo
  name: TTo
  nameWithType: TTo
  fullName: TTo
- uid: TFrom
  isExternal: false
  name: TFrom
  nameWithType: TFrom
  fullName: TFrom
- uid: TTo
  isExternal: false
  name: TTo
  nameWithType: TTo
  fullName: TTo
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Object, Object>
  nameWithType: IDictionary<Object, Object>
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>
  nameWithType.vb: IDictionary(Of Object, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object)
  name.vb: IDictionary(Of Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
