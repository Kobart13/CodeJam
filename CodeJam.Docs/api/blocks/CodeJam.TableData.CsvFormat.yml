### YamlMime:ManagedReference
items:
- uid: CodeJam.TableData.CsvFormat
  commentId: T:CodeJam.TableData.CsvFormat
  id: CsvFormat
  parent: CodeJam.TableData
  children:
  - CodeJam.TableData.CsvFormat.CreateParser(System.Boolean,System.Char)
  - CodeJam.TableData.CsvFormat.EscapeValue(System.String)
  - CodeJam.TableData.CsvFormat.Parse(System.IO.TextReader,System.Boolean,System.Char)
  - CodeJam.TableData.CsvFormat.Print(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String[]},System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: CsvFormat
  nameWithType: CsvFormat
  fullName: CodeJam.TableData.CsvFormat
  type: Class
  source:
    remote:
      path: Blocks/src/TableData/CsvFormat.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CsvFormat
    path: ../Blocks/src/TableData/CsvFormat.cs
    startLine: 24
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.TableData
  summary: "\nCSV format support.\n"
  example: []
  syntax:
    content: public static class CsvFormat
    content.vb: Public Module CsvFormat
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CodeJam.TableData.CsvFormat.EscapeValue(System.String)
  commentId: M:CodeJam.TableData.CsvFormat.EscapeValue(System.String)
  id: EscapeValue(System.String)
  parent: CodeJam.TableData.CsvFormat
  langs:
  - csharp
  - vb
  name: EscapeValue(String)
  nameWithType: CsvFormat.EscapeValue(String)
  fullName: CodeJam.TableData.CsvFormat.EscapeValue(System.String)
  type: Method
  source:
    remote:
      path: Blocks/src/TableData/CsvFormat.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: EscapeValue
    path: ../Blocks/src/TableData/CsvFormat.cs
    startLine: 34
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.TableData
  summary: Escapes csv value.
  example: []
  syntax:
    content: public static string EscapeValue(string value)
    parameters:
    - id: value
      type: System.String
      description: The value.
    return:
      type: System.String
      description: Escaped value.
    content.vb: Public Shared Function EscapeValue(value As String) As String
  overload: CodeJam.TableData.CsvFormat.EscapeValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.TableData.CsvFormat.CreateParser(System.Boolean,System.Char)
  commentId: M:CodeJam.TableData.CsvFormat.CreateParser(System.Boolean,System.Char)
  id: CreateParser(System.Boolean,System.Char)
  parent: CodeJam.TableData.CsvFormat
  langs:
  - csharp
  - vb
  name: CreateParser(Boolean, Char)
  nameWithType: CsvFormat.CreateParser(Boolean, Char)
  fullName: CodeJam.TableData.CsvFormat.CreateParser(System.Boolean, System.Char)
  type: Method
  source:
    remote:
      path: Blocks/src/TableData/CsvFormat.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: CreateParser
    path: ../Blocks/src/TableData/CsvFormat.cs
    startLine: 58
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.TableData
  summary: "\nCreates RFC4180 compliant CSV parser.\n"
  example: []
  syntax:
    content: public static Parser CreateParser(bool allowEscaping = true, char columnSeparator = ',')
    parameters:
    - id: allowEscaping
      type: System.Boolean
      description: If true, allows values escaping.
    - id: columnSeparator
      type: System.Char
      description: Char to use as column separator
    return:
      type: CodeJam.TableData.Parser
      description: Parser to use with <xref href="CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser%2cSystem.String)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function CreateParser(allowEscaping As Boolean = True, columnSeparator As Char = ","c) As Parser
  overload: CodeJam.TableData.CsvFormat.CreateParser*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.TableData.CsvFormat.Parse(System.IO.TextReader,System.Boolean,System.Char)
  commentId: M:CodeJam.TableData.CsvFormat.Parse(System.IO.TextReader,System.Boolean,System.Char)
  id: Parse(System.IO.TextReader,System.Boolean,System.Char)
  parent: CodeJam.TableData.CsvFormat
  langs:
  - csharp
  - vb
  name: Parse(TextReader, Boolean, Char)
  nameWithType: CsvFormat.Parse(TextReader, Boolean, Char)
  fullName: CodeJam.TableData.CsvFormat.Parse(System.IO.TextReader, System.Boolean, System.Char)
  type: Method
  source:
    remote:
      path: Blocks/src/TableData/CsvFormat.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Parse
    path: ../Blocks/src/TableData/CsvFormat.cs
    startLine: 70
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.TableData
  summary: Parses CSV data.
  example: []
  syntax:
    content: public static IEnumerable<DataLine> Parse(TextReader reader, bool allowEscaping = true, char columnSeparator = ',')
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: Text to parse
    - id: allowEscaping
      type: System.Boolean
      description: If true, allows values escaping.
    - id: columnSeparator
      type: System.Char
      description: Char to use as column separator
    return:
      type: System.Collections.Generic.IEnumerable{CodeJam.TableData.DataLine}
      description: Enumeration of <xref href="CodeJam.TableData.DataLine" data-throw-if-not-resolved="false"></xref> contained parsed data.
    content.vb: Public Shared Function Parse(reader As TextReader, allowEscaping As Boolean = True, columnSeparator As Char = ","c) As IEnumerable(Of DataLine)
  overload: CodeJam.TableData.CsvFormat.Parse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CodeJam.TableData.CsvFormat.Print(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String[]},System.String,System.Boolean)
  commentId: M:CodeJam.TableData.CsvFormat.Print(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String[]},System.String,System.Boolean)
  id: Print(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String[]},System.String,System.Boolean)
  parent: CodeJam.TableData.CsvFormat
  langs:
  - csharp
  - vb
  name: Print(TextWriter, IEnumerable<String[]>, String, Boolean)
  nameWithType: CsvFormat.Print(TextWriter, IEnumerable<String[]>, String, Boolean)
  fullName: CodeJam.TableData.CsvFormat.Print(System.IO.TextWriter, System.Collections.Generic.IEnumerable<System.String[]>, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Blocks/src/TableData/CsvFormat.cs
      branch: master
      repo: https://andrewvk@github.com/rsdn/CodeJam.git
    id: Print
    path: ../Blocks/src/TableData/CsvFormat.cs
    startLine: 288
  assemblies:
  - CodeJam.Blocks
  namespace: CodeJam.TableData
  summary: "\nPrints full data table\n"
  example: []
  syntax:
    content: public static void Print(TextWriter writer, IEnumerable<string[]> data, string indent = null, bool allowEscaping = true)
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: Instance of <xref href="System.IO.TextWriter" data-throw-if-not-resolved="false"></xref> to write to.
    - id: data
      type: System.Collections.Generic.IEnumerable{System.String[]}
      description: Data to write.
    - id: indent
      type: System.String
      description: The indent.
    - id: allowEscaping
      type: System.Boolean
      description: If true, allows values escaping.
    content.vb: Public Shared Sub Print(writer As TextWriter, data As IEnumerable(Of String()), indent As String = Nothing, allowEscaping As Boolean = True)
  overload: CodeJam.TableData.CsvFormat.Print*
  nameWithType.vb: CsvFormat.Print(TextWriter, IEnumerable(Of String()), String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CodeJam.TableData.CsvFormat.Print(System.IO.TextWriter, System.Collections.Generic.IEnumerable(Of System.String()), System.String, System.Boolean)
  name.vb: Print(TextWriter, IEnumerable(Of String()), String, Boolean)
references:
- uid: CodeJam.TableData
  commentId: N:CodeJam.TableData
  isExternal: false
  name: CodeJam.TableData
  nameWithType: CodeJam.TableData
  fullName: CodeJam.TableData
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: CodeJam.TableData.CsvFormat.EscapeValue*
  commentId: Overload:CodeJam.TableData.CsvFormat.EscapeValue
  isExternal: false
  name: EscapeValue
  nameWithType: CsvFormat.EscapeValue
  fullName: CodeJam.TableData.CsvFormat.EscapeValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.String)
  commentId: M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.String)
  isExternal: true
  name: Parse(Parser, String)
  nameWithType: TableDataParser.Parse(Parser, String)
  fullName: CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser, System.String)
  spec.csharp:
  - uid: CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.String)
    name: Parse
    nameWithType: TableDataParser.Parse
    fullName: CodeJam.TableData.TableDataParser.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.TableData.Parser
    name: Parser
    nameWithType: Parser
    fullName: CodeJam.TableData.Parser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.String)
    name: Parse
    nameWithType: TableDataParser.Parse
    fullName: CodeJam.TableData.TableDataParser.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: CodeJam.TableData.Parser
    name: Parser
    nameWithType: Parser
    fullName: CodeJam.TableData.Parser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CodeJam.TableData.CsvFormat.CreateParser*
  commentId: Overload:CodeJam.TableData.CsvFormat.CreateParser
  isExternal: false
  name: CreateParser
  nameWithType: CsvFormat.CreateParser
  fullName: CodeJam.TableData.CsvFormat.CreateParser
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: CodeJam.TableData.Parser
  commentId: T:CodeJam.TableData.Parser
  parent: CodeJam.TableData
  isExternal: false
  name: Parser
  nameWithType: Parser
  fullName: CodeJam.TableData.Parser
- uid: CodeJam.TableData.DataLine
  commentId: T:CodeJam.TableData.DataLine
  isExternal: false
  name: DataLine
  nameWithType: DataLine
  fullName: CodeJam.TableData.DataLine
- uid: CodeJam.TableData.CsvFormat.Parse*
  commentId: Overload:CodeJam.TableData.CsvFormat.Parse
  isExternal: false
  name: Parse
  nameWithType: CsvFormat.Parse
  fullName: CodeJam.TableData.CsvFormat.Parse
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Collections.Generic.IEnumerable{CodeJam.TableData.DataLine}
  commentId: T:System.Collections.Generic.IEnumerable{CodeJam.TableData.DataLine}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DataLine>
  nameWithType: IEnumerable<DataLine>
  fullName: System.Collections.Generic.IEnumerable<CodeJam.TableData.DataLine>
  nameWithType.vb: IEnumerable(Of DataLine)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CodeJam.TableData.DataLine)
  name.vb: IEnumerable(Of DataLine)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CodeJam.TableData.DataLine
    name: DataLine
    nameWithType: DataLine
    fullName: CodeJam.TableData.DataLine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CodeJam.TableData.DataLine
    name: DataLine
    nameWithType: DataLine
    fullName: CodeJam.TableData.DataLine
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: CodeJam.TableData.CsvFormat.Print*
  commentId: Overload:CodeJam.TableData.CsvFormat.Print
  isExternal: false
  name: Print
  nameWithType: CsvFormat.Print
  fullName: CodeJam.TableData.CsvFormat.Print
- uid: System.Collections.Generic.IEnumerable{System.String[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String[]>
  nameWithType: IEnumerable<String[]>
  fullName: System.Collections.Generic.IEnumerable<System.String[]>
  nameWithType.vb: IEnumerable(Of String())
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String())
  name.vb: IEnumerable(Of String())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
