<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #>
<#@ include file="$(SolutionDir)Build\T4\Transform.ttinclude" #>
<#
		Transform(
			"Disposable.cs",
			new ReplaceInfo // + conditional #if;
			{
				Pattern = "(?s)(^.*$)",
				Replacement = "#if NETSTANDARD21_OR_GREATER || NETCOREAPP30_OR_GREATER\r\n$1\r\n#endif",
				ThrowOnFail = true
			},
			new ReplaceInfo // + using System.Threading.Tasks;
			{
				Pattern = "using System.Threading;",
				Replacement = "using System.Threading;\r\nusing System.Threading.Tasks;",
				ThrowOnFail = true,
				EscapePattern = true
			},
			new ReplaceInfo // + partial
			{
				Pattern = "class Disposable",
				Replacement = "partial class Disposable",
				ThrowOnFail = true
			},
			new ReplaceInfo // Disposalbe to AsyncDisposable
			{
				Pattern = "Disposable",
				Replacement = "AsyncDisposable",
				ThrowOnFail = true
			},
			new ReplaceInfo // Empty async dispose impl
			{
				Pattern = "public void Dispose() { }",
				Replacement = "public ValueTask DisposeAsync() => default;",
				ThrowOnFail = true,
				EscapePattern = true
			},
			new ReplaceInfo // Async dispose impl
			{
				Pattern = "public void Dispose()",
				Replacement = "public async ValueTask DisposeAsync()",
				ThrowOnFail = true,
				EscapePattern = true
			},
			new ReplaceInfo // Typed callback signature
			{
				Pattern = "Action<T>",
				Replacement = "Func<T, ValueTask>",
				ThrowOnFail = true,
				Match = MatchMode.WholeWord,
				EscapePattern = true
			},
			new ReplaceInfo // Callback signature
			{
				Pattern = "Action",
				Replacement = "Func<ValueTask>",
				ThrowOnFail = true,
				Match = MatchMode.WholeWord,
				EscapePattern = true
			},
			new ReplaceInfo // invoke disposeAction
			{
				Pattern = "disposeAction.Invoke",
				Replacement = "await disposeAction.Invoke",
				ThrowOnFail = true,
				EscapePattern = true
			},
			new ReplaceInfo // DisposeAll signature
			{
				Pattern = "public static void DisposeAll",
				Replacement = "public static async ValueTask DisposeAllAsync",
				ThrowOnFail = true,
				EscapePattern = true
			},
			new ReplaceInfo // invoke DisposeAsync
			{
				Pattern = "item.Dispose()",
				Replacement = "await item.DisposeAsync()",
				ThrowOnFail = true,
				EscapePattern = true
			},
			new ReplaceInfo // invoke DisposeAllAsync
			{
				Pattern = "DisposeAll",
				Replacement = "DisposeAllAsync",
				Match = MatchMode.WholeWord,
				ThrowOnFail = true,
				EscapePattern = true
			});
#>