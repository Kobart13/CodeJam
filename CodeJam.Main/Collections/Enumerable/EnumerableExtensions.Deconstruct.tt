<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)Build\T4\Autogenerated.ttinclude" #>
using System.Collections.Generic;

using JetBrains.Annotations;

namespace CodeJam.Collections
{
	partial class EnumerableExtensions
	{
		private const string _enumTooShortMsg = "The enumerable is too short.";

<#
	for (var i = 2; i <= 10; i++)
		WriteDeconstructMethod(i);
#>
	}
}

<#+ private void WriteDeconstructMethod(int numOfParams) {#>
		/// <summary>
		/// Deconstructs <#=numOfParams#> items of the <paramref name="array"/>.
		/// </summary>
		[Pure]
		public static void Deconstruct<T>(
			[NotNull] this T[] array<#+ for (var i = 1; i <= numOfParams; i++) {#>,
			out T item<#=i#><#+ } #>)
		{
			Code.NotNull(array, nameof (array));

<#+for (var i = 1; i <= numOfParams; i++) {#>
			item<#=i#> = array[<#=i-1#>];
<#+ } #>
		}

		/// <summary>
		/// Deconstructs <#=numOfParams#> items of the <paramref name="list"/>.
		/// </summary>
		[Pure]
		public static void Deconstruct<T>(
			[NotNull] this IList<T> list<#+ for (var i = 1; i <= numOfParams; i++) {#>,
			out T item<#=i#><#+ } #>)
		{
			Code.NotNull(list, nameof (list));

<#+for (var i = 1; i <= numOfParams; i++) {#>
			item<#=i#> = list[<#=i-1#>];
<#+ } #>
		}

		/// <summary>
		/// Deconstructs <#=numOfParams#> items of the <paramref name="enumerable"/>.
		/// </summary>
		[Pure]
		public static void Deconstruct<T>(
			[NotNull] this IEnumerable<T> enumerable<#+ for (var i = 1; i <= numOfParams; i++) {#>,
			out T item<#=i#><#+ } #>)
		{
			Code.NotNull(enumerable, nameof (enumerable));

			using var enumerator = enumerable.GetEnumerator();
<#+for (var i = 1; i <= numOfParams; i++) {#>
			Code.AssertArgument(enumerator.MoveNext(), nameof (enumerable), _enumTooShortMsg);
			item<#=i#> = enumerator.Current;
<#+ } #>
		}

<#+ } #>
