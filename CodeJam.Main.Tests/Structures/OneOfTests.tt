<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #>
using NUnit.Framework;

namespace CodeJam
{
	[TestFixture]
	public class OneOfTests
	{
<#for (var i = 1; i <= 8; i++) {#>
		private class Case<#=i#>
		{
			public string Name => "Case<#=i#>";
		}

<#}#>

<#for (var i = 2; i <= 8; i++) {
	var types = List(i, j => $"Case{j}");#>
		[Test]
		public void OneOf<#=i#>Test()
		{
			string str;
<#	for (var k = 1; k <= i; k++) {#>
			var item<#=k#> = OneOf<<#=types#>>.Create(new Case<#=k#>());
			Assert.AreEqual("Case<#=k#>", item<#=k#>.GetValue(<#=List(i, j => $"v => v.Name")#>));

			str = "";
			item<#=k#>.Do(<#=List(i, j => $"v => str = v.Name")#>);
			Assert.AreEqual("Case<#=k#>", str);

<#	}#>
		}

		[Test]
		public void ValueOneOf<#=i#>Test()
		{
			string str;
<#	for (var k = 1; k <= i; k++) {#>
			var item<#=k#> = ValueOneOf<<#=types#>>.Create(new Case<#=k#>());
			Assert.AreEqual("Case<#=k#>", item<#=k#>.GetValue(<#=List(i, j => $"v => v.Name")#>));

			str = "";
			item<#=k#>.Do(<#=List(i, j => $"v => str = v.Name")#>);
			Assert.AreEqual("Case<#=k#>", str);

<#	}#>
		}

<#}#>
	}
}